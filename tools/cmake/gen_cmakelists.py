#!/usr/bin/env python3
"""Generate CMakeLists.txt files for Donner libraries using bazel query."""

from __future__ import annotations

import subprocess
from pathlib import Path
from typing import List

BAZEL_QUERY_PREFIX = ["bazel", "query", "--enable_workspace", "--noenable_bzlmod"]


def query_labels(attr: str, target: str, *, relative_to: str) -> List[str]:
    expr = f"labels({attr}, {target})"
    out = subprocess.check_output(BAZEL_QUERY_PREFIX + [expr], text=True, stderr=subprocess.DEVNULL)
    pkg = target.split(":")[0].removeprefix("//")
    prefix = f"//{pkg}:"
    results = []
    for line in out.splitlines():
        if not line.startswith(prefix):
            continue
        label = line[len(prefix) :]
        full = Path(pkg, label)
        results.append(str(full.relative_to(relative_to)))
    return results


def write_library(f, name: str, srcs: List[str], hdrs: List[str]) -> None:
    f.write(f"add_library({name}\n")
    for path in srcs + hdrs:
        f.write(f"  {path}\n")
    f.write(")\n")
    f.write(f"target_include_directories({name} PUBLIC ${{PROJECT_SOURCE_DIR}})\n")
    f.write(
        f"set_target_properties({name} PROPERTIES CXX_STANDARD 20 CXX_STANDARD_REQUIRED YES POSITION_INDEPENDENT_CODE YES)\n"
    )
    f.write(f"target_compile_options({name} PRIVATE -fno-exceptions)\n")


def generate_base() -> None:
    pkg = Path("donner/base")
    srcs = query_labels("srcs", "//donner/base:base", relative_to="donner/base")
    hdrs = query_labels("hdrs", "//donner/base:base", relative_to="donner/base")

    utils_hdrs = query_labels(
        "hdrs", "//donner/base:base_test_utils", relative_to="donner/base"
    )
    testdata = query_labels(
        "srcs", "//donner/base:base_tests_testdata", relative_to="donner/base"
    )
    tests = {
        "base_tests": query_labels(
            "srcs", "//donner/base:base_tests", relative_to="donner/base"
        ),
        "base_tests_ndebug": query_labels(
            "srcs", "//donner/base:base_tests_ndebug", relative_to="donner/base"
        ),
        "rcstring_tests_with_exceptions": query_labels(
            "srcs",
            "//donner/base:rcstring_tests_with_exceptions",
            relative_to="donner/base",
        ),
    }

    out = pkg / "CMakeLists.txt"
    with out.open("w") as f:
        f.write("##\n")
        f.write("## Generated by tools/cmake/gen_cmakelists.py.\n")
        f.write("## NOTE: Do not edit this file directly, edit gen_cmakelists.py instead\n")
        f.write("##\n\n")

        write_library(f, "donner_base", srcs, hdrs)
        f.write("target_link_libraries(donner_base PUBLIC EnTT::EnTT)\n")

        f.write("\nif(DONNER_BUILD_TESTS)\n")
        if utils_hdrs:
            f.write("  add_library(donner_base_test_utils INTERFACE\n")
            for p in utils_hdrs:
                f.write(f"    {p}\n")
            f.write("  )\n")
            f.write("  target_include_directories(donner_base_test_utils INTERFACE ${PROJECT_SOURCE_DIR})\n")
            f.write("  target_link_libraries(donner_base_test_utils INTERFACE gtest gmock rules_cc_runfiles)\n")

        for name, src in tests.items():
            if not src:
                continue
            f.write(f"\n  add_executable({name}\n")
            
            for p in src:
                if p.endswith("Runfiles_tests.cc"):
                    # Skip the Runfiles tests, they do not currently work in CMake
                    continue
                f.write(f"    {p}\n")

            f.write("  )\n")
            if name == "base_tests_ndebug":
                f.write("  target_compile_definitions(base_tests_ndebug PRIVATE NDEBUG)\n")
            if name == "rcstring_tests_with_exceptions":
                f.write("  target_compile_options(rcstring_tests_with_exceptions PRIVATE -fexceptions)\n")
            else:
                f.write(f"  target_compile_options({name} PRIVATE -fno-exceptions)\n")
            f.write(f"  target_link_libraries({name} PRIVATE donner_base gtest_main gmock_main")
            if utils_hdrs:
                f.write(" donner_base_test_utils")
            f.write(")\n")
            f.write(f"  add_test(NAME {name} COMMAND {name})\n")
            f.write(f"  set_tests_properties({name} PROPERTIES ENVIRONMENT \"RUNFILES_DIR=${{PROJECT_SOURCE_DIR}}\")\n")

        if testdata:
            f.write("\n  file(COPY\n")
            for p in testdata:
                f.write(f"    {p}\n")
            f.write("  DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/tests/testdata)\n")
        f.write("endif()\n")


def generate_css() -> None:
    pkg = Path("donner/css")
    css_srcs = query_labels("srcs", "//donner/css:css", relative_to="donner/css")
    css_hdrs = query_labels("hdrs", "//donner/css:css", relative_to="donner/css")
    core_srcs = query_labels("srcs", "//donner/css:core", relative_to="donner/css")
    core_hdrs = query_labels("hdrs", "//donner/css:core", relative_to="donner/css")
    parser_srcs = query_labels(
        "srcs", "//donner/css/parser:parser", relative_to="donner/css"
    )
    parser_hdrs = query_labels(
        "hdrs", "//donner/css/parser:parser", relative_to="donner/css"
    )
    selector_utils_hdrs = query_labels(
        "hdrs", "//donner/css:selector_test_utils", relative_to="donner/css"
    )

    css_tests = query_labels("srcs", "//donner/css:css_tests", relative_to="donner/css")
    css_parser_tests = query_labels(
        "srcs", "//donner/css/parser:parser_tests", relative_to="donner/css"
    )
    css_parsing_tests = query_labels(
        "srcs", "//donner/css/parser:css_parsing_tests", relative_to="donner/css"
    )

    # TODO: Re-enable parsing tests, currently they are disabled since they require bazel runfiles
    # to be set up correctly, which is not the case in CMake.
    #css_parser_tests = None
    css_parsing_tests = None

    out = pkg / "CMakeLists.txt"
    with out.open("w") as f:
        f.write("##\n")
        f.write("## Generated by tools/cmake/gen_cmakelists.py.\n")
        f.write("## NOTE: Do not edit this file directly, edit gen_cmakelists.py instead\n")
        f.write("##\n\n")

        write_library(f, "donner_css_core", core_srcs, core_hdrs)
        f.write("target_link_libraries(donner_css_core PUBLIC donner_base donner_base_element donner_base_xml_qualified_name frozen)\n")

        write_library(f, "donner_css_parser", parser_srcs, parser_hdrs)
        f.write("target_link_libraries(donner_css_parser PUBLIC donner_css_core donner_base donner_base_parser)\n")

        write_library(f, "donner_css", css_srcs, css_hdrs)
        f.write("target_link_libraries(donner_css PUBLIC donner_css_core donner_css_parser)\n")

        f.write("\nif(DONNER_BUILD_TESTS)\n")
        if selector_utils_hdrs:
            f.write("  add_library(donner_css_selector_test_utils INTERFACE\n")
            for p in selector_utils_hdrs:
                f.write(f"    {p}\n")
            f.write("  )\n")
            f.write(f"  target_compile_options(donner_css_selector_test_utils INTERFACE -fno-exceptions)\n")
            f.write("  target_include_directories(donner_css_selector_test_utils INTERFACE ${PROJECT_SOURCE_DIR})\n")
            f.write("  target_link_libraries(donner_css_selector_test_utils INTERFACE gtest)\n")

        if css_tests:
            f.write("\n  add_executable(css_tests\n")
            for p in css_tests:
                f.write(f"    {p}\n")
            f.write("  )\n")
            f.write("  target_compile_options(css_tests PRIVATE -fno-exceptions)\n")
            f.write("  target_link_libraries(css_tests PRIVATE donner_css_parser donner_css_core donner_css_selector_test_utils gtest_main donner_base_test_utils donner_base_element_fake)\n")
            f.write("  add_test(NAME css_tests COMMAND css_tests)\n")
            f.write("  set_tests_properties(css_tests PROPERTIES ENVIRONMENT \"RUNFILES_DIR=${PROJECT_SOURCE_DIR}\")\n")

        if css_parser_tests:
            f.write("\n  add_executable(css_parser_tests\n")
            for p in css_parser_tests:
                f.write(f"    {p}\n")
            f.write("  )\n")
            f.write("  target_compile_options(css_parser_tests PRIVATE -fno-exceptions)\n")
            f.write("  target_link_libraries(css_parser_tests PRIVATE donner_css_parser donner_css_selector_test_utils gtest_main donner_base_test_utils)\n")
            f.write("  add_test(NAME css_parser_tests COMMAND css_parser_tests)\n")
            f.write("  set_tests_properties(css_parser_tests PROPERTIES ENVIRONMENT \"RUNFILES_DIR=${PROJECT_SOURCE_DIR}\")\n")

        if css_parsing_tests:
            f.write("\n  add_executable(css_parsing_tests\n")
            for p in css_parsing_tests:
                f.write(f"    {p}\n")
            f.write("  )\n")
            f.write("  target_compile_options(css_parsing_tests PRIVATE -fno-exceptions)\n")
            f.write("  target_link_libraries(css_parsing_tests PRIVATE donner_css_parser gtest_main donner_base_test_utils nlohmann_json::nlohmann_json)\n")
            f.write("  add_test(NAME css_parsing_tests COMMAND css_parsing_tests)\n")
            f.write("  set_tests_properties(css_parsing_tests PROPERTIES ENVIRONMENT \"RUNFILES_DIR=${PROJECT_SOURCE_DIR}\")\n")
            f.write("  file(COPY\n")
            for name in [
                "component_value_list.json",
                "declaration_list.json",
                "one_component_value.json",
                "one_declaration.json",
                "one_rule.json",
                "rule_list.json",
                "stylesheet.json",
            ]:
                f.write(f"    ${{PROJECT_SOURCE_DIR}}/third_party/css-parsing-tests/{name}\n")
            f.write("  DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/css-parsing-tests)\n")
        f.write("endif()\n")


def generate_base_support() -> None:
    # base parser library
    parser_srcs = query_labels(
        "srcs", "//donner/base/parser:parser", relative_to="donner/base"
    )
    parser_hdrs = query_labels(
        "hdrs", "//donner/base/parser:parser", relative_to="donner/base"
    )

    element_hdrs = query_labels(
        "hdrs", "//donner/base/element:element", relative_to="donner/base"
    )
    fake_hdrs = query_labels(
        "hdrs", "//donner/base/element:fake_element", relative_to="donner/base"
    )

    xml_q_hdrs = query_labels(
        "hdrs", "//donner/base/xml:xml_qualified_name", relative_to="donner/base"
    )

    path = Path("donner/base") / "CMakeLists.txt"
    with path.open("a") as f:
        f.write("\n# Additional libraries for css\n")
        if parser_srcs or parser_hdrs:
            f.write("add_library(donner_base_parser\n")
            for p in parser_srcs + parser_hdrs:
                f.write(f"  {p}\n")
            f.write(")\n")
            f.write(f"target_compile_options(donner_base_parser PRIVATE -fno-exceptions)\n")
            f.write("target_include_directories(donner_base_parser PUBLIC ${PROJECT_SOURCE_DIR})\n")
            f.write("set_target_properties(donner_base_parser PROPERTIES CXX_STANDARD 20 CXX_STANDARD_REQUIRED YES)\n")
            f.write("target_link_libraries(donner_base_parser PUBLIC donner_base)\n")

        if element_hdrs:
            f.write("\nadd_library(donner_base_element INTERFACE)\n")
            f.write("target_compile_options(donner_base_element INTERFACE -fno-exceptions)\n")
            f.write("target_include_directories(donner_base_element INTERFACE ${PROJECT_SOURCE_DIR})\n")
            f.write("target_sources(donner_base_element INTERFACE\n")
            for p in element_hdrs:
                f.write(f"  {p}\n")
            f.write(")\n")

        if fake_hdrs:
            f.write("\nadd_library(donner_base_element_fake INTERFACE)\n")
            f.write("target_compile_options(donner_base_element_fake INTERFACE -fno-exceptions)\n")
            f.write("target_include_directories(donner_base_element_fake INTERFACE ${PROJECT_SOURCE_DIR})\n")
            f.write("target_sources(donner_base_element_fake INTERFACE\n")
            for p in fake_hdrs:
                f.write(f"  {p}\n")
            f.write(")\n")
            f.write("target_link_libraries(donner_base_element_fake INTERFACE gtest)\n")

        if xml_q_hdrs:
            f.write("\nadd_library(donner_base_xml_qualified_name INTERFACE)\n")
            f.write("target_compile_options(donner_base_xml_qualified_name INTERFACE -fno-exceptions)\n")
            f.write("target_include_directories(donner_base_xml_qualified_name INTERFACE ${PROJECT_SOURCE_DIR})\n")
            f.write("target_sources(donner_base_xml_qualified_name INTERFACE\n")
            for p in xml_q_hdrs:
                f.write(f"  {p}\n")
            f.write(")\n")
            f.write("target_link_libraries(donner_base_xml_qualified_name INTERFACE donner_base)\n")


def main() -> None:
    generate_base()
    generate_base_support()
    generate_css()


if __name__ == "__main__":
    main()
