load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")

refresh_compile_commands(
    name = "refresh_compile_commands",
    targets = "//donner/...",
)

py_binary(
    name = "embed_resources",
    srcs = ["embed_resources.py"],
    visibility = ["//visibility:public"],
)

# Genrule to execute the embed_resources.py script
genrule(
    name = "generate_embedded_test_resources",
    srcs = ["//third_party/public-sans:PublicSans-Medium.otf"],  # The resource file
    outs = ["py_embedded_dir/public_sans_embedded.h", "py_embedded_dir/PublicSans_Medium_otf.cpp"],
    cmd = """
        # Create the output dir in case the action is sandboxed
        mkdir -p "$(@D)/py_embedded_dir"
        $(location //tools:embed_resources) --out "$(@D)/py_embedded_dir" --header public_sans_embedded.h kPublicSansMediumOtf=$(SRCS)
    """,
    tools = [":embed_resources"],  # Depends on the py_binary
    visibility = ["//visibility:private"], # Only used by the test in this file
)

py_test(
    name = "embed_resources_tests",
    srcs = ["embed_resources_tests.py"],
    args = [
        "--generated_header_name", "public_sans_embedded.h",
        "--generated_cpp_name", "PublicSans_Medium_otf.cpp",
        "--generated_files_subdir", "donner/tools/py_embedded_dir",
        "--golden_header_path", "$(location //third_party/public-sans:embedded_header)",
        "--golden_cpp_path", "$(location //third_party/public-sans:embedded_cpp)",
    ],
    data = [
        ":generate_embedded_test_resources",
        "//third_party/public-sans:embedded_header",
        "//third_party/public-sans:embedded_cpp",
    ],
    deps = ["@rules_python//python/runfiles"],
)
