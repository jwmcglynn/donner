import argparse
import subprocess
from pathlib import Path
from python.runfiles import runfiles
import difflib

# Compare generated files with golden files
def compare_files(golden_path, generated_path):
    """Compare two files and raise AssertionError with diff if they don't match."""
    with open(golden_path, 'r') as f1, open(generated_path, 'r') as f2:
        golden_content = f1.read()
        generated_content = f2.read()
        if golden_content != generated_content:
            diff = difflib.unified_diff(
                golden_content.splitlines(keepends=True),
                generated_content.splitlines(keepends=True),
                fromfile=str(golden_path),
                tofile=str(generated_path)
            )
            raise AssertionError(f"Generated file does not match golden file.\n"
                                f"Golden file: {golden_path}\n"
                                f"Generated file: {generated_path}\n"
                                f"Diff:\n{''.join(diff)}")


def test_parity() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--generated_header_name", required=True)
    parser.add_argument("--generated_cpp_name", required=True)
    parser.add_argument("--generated_files_subdir", required=True)
    parser.add_argument("--golden_header_path", required=True)
    parser.add_argument("--golden_cpp_path", required=True)
    args = parser.parse_args()

    r = runfiles.Create()

    # Paths to files generated by the genrule
    # The genrule places its output in a subdirectory within the runfiles.
    # The path to this subdirectory is given by --generated_files_subdir.
    generated_dir = Path(r.Rlocation(args.generated_files_subdir))
    produced_header = generated_dir / args.generated_header_name
    produced_cpp = generated_dir / args.generated_cpp_name

    # Paths to the golden files
    golden_header = Path(args.golden_header_path)
    golden_cpp = Path(args.golden_cpp_path)

    # Check if generated files exist
    if not produced_header.exists():
        raise FileNotFoundError(
            f"Generated header file not found: {produced_header}. "
            f"Runfiles location for subdir: {generated_dir}"
        )
    if not produced_cpp.exists():
        raise FileNotFoundError(
            f"Generated C++ file not found: {produced_cpp}. "
            f"Runfiles location for subdir: {generated_dir}"
        )

    # Compare generated C++ file with golden file
    compare_files(golden_cpp, produced_cpp)
        
    # Compare generated header file with golden file
    compare_files(golden_header, produced_header)


if __name__ == "__main__":
    test_parity()
