import subprocess
import os
import argparse
import typing
from dataclasses import dataclass
import sys


@dataclass
class ReportOptions:
    all: bool = False
    binary_size: bool = False
    coverage: bool = False
    public_targets: bool = False
    external_dependencies: bool = False


def run_command(command):
    print("Running command: " + command)
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
    except KeyboardInterrupt:
        print("Interrupted! Exiting...")
        return None

    print("Done, return code: " + str(result.returncode))
    return result.stdout.strip()


def get_git_revision() -> str:
    try:
        revision = (
            subprocess.check_output(["git", "rev-parse", "HEAD"])
            .strip()
            .decode("utf-8")
        )
        return revision
    except subprocess.CalledProcessError:
        return "unknown"


def get_git_status() -> str:
    try:
        status = subprocess.check_output(["git", "status", "--short"]).decode("utf-8")
        return status
    except subprocess.CalledProcessError:
        return "unknown"


def query_public_targets() -> str:
    query = 'bazel query "kind(library, //...) intersect attr(visibility, public, //...)"'
    return run_command(query)


def query_external_dependencies() -> str:
    query = 'bazel query "kind(external, //...)"'
    return run_command(query)


def create_build_report(
    options: ReportOptions, save_svgs_to: typing.Optional[str] = None
):
    report = "# Donner build report\n\n"

    command_line = " ".join(sys.argv)
    report += f"Generated with: {command_line}\n\n"

    revision = get_git_revision()
    report += f"Git revision: [{revision}](https://github.com/jwmcglynn/donner/commit/{revision})\n\n"

    status = get_git_status()
    if status:
        report += "Local changes:\n"
        report += "```\n"
        report += status
        report += "```\n"

    # Lines of code report
    report += "## Lines of code\n```\n"
    report += "$ tools/cloc.sh\n"

    cloc_output = run_command("tools/cloc.sh")
    if not cloc_output:
        return report

    report += cloc_output
    report += "\n```\n\n"

    # Binary size report
    if options.all or options.binary_size:
        report += "## Binary size\n"
        report += "Generated by `tools/binary_size.sh`\n"
        binsize_output = run_command("tools/binary_size.sh")
        if not binsize_output:
            return report

        report += binsize_output

        if save_svgs_to:
            # Copy build-binary-size/binary_size_bargraph.svg into the folder
            # specified by save_svgs_to
            file = os.path.join(save_svgs_to, "binary_size_bargraph.svg")
            with open(file, "w") as f:
                with open("build-binary-size/binary_size_bargraph.svg", "r") as svg:
                    f.write(svg.read())

            report += "\n\n![Binary size bar graph](binary_size_bargraph.svg)"
        report += "\n\n"

    # Code coverage report
    if options.all or options.coverage:
        report += "## Code coverage\n```\n"
        report += "$ tools/coverage.sh --quiet\n"

        coverage_output = run_command("tools/coverage.sh --quiet")
        if not coverage_output:
            return report

        report += coverage_output
        report += "\n```\n\n"

    # Public targets report
    if options.all or options.public_targets:
        report += "## Public targets\n```\n"
        report += "$ bazel query 'kind(library, //...) intersect attr(visibility, public, //...)'\n"

        public_targets_output = query_public_targets()
        if not public_targets_output:
            return report

        report += public_targets_output
        report += "\n```\n\n"

    # External dependencies report
    if options.all or options.external_dependencies:
        report += "## External dependencies\n```\n"
        report += "$ bazel query 'kind(external, //...)'\n"

        external_dependencies_output = query_external_dependencies()
        if not external_dependencies_output:
            return report

        report += external_dependencies_output
        report += "\n```\n\n"

    return report


def main():
    parser = argparse.ArgumentParser(
        description="Generate a build report for a C++/Bazel project."
    )
    parser.add_argument("--save", type=str, help="Path to save the build report")
    parser.add_argument(
        "--all", action="store_true", help="Generate a full build report"
    )
    parser.add_argument(
        "--binary-size", action="store_true", help="Generate binary size report"
    )
    parser.add_argument(
        "--coverage", action="store_true", help="Generate code coverage report"
    )
    parser.add_argument(
        "--public-targets", action="store_true", help="Generate public targets report"
    )
    parser.add_argument(
        "--external-dependencies", action="store_true", help="Generate external dependencies report"
    )

    args = parser.parse_args()

    options = ReportOptions(
        all=args.all,
        binary_size=args.binary_size,
        coverage=args.coverage,
        public_targets=args.public_targets,
        external_dependencies=args.external_dependencies,
    )

    report = create_build_report(
        options, save_svgs_to=os.path.dirname(args.save) if args.save else None
    )

    if args.save:
        with open(args.save, "w") as file:
            file.write(report)

        print(f"Saved build report to {args.save}")
    else:
        print(report)


if __name__ == "__main__":
    main()
