build --enable_platform_specific_config

# Tell Bazel to pass the right flags for llvm-ar, not libtool. Only needed if you are building on darwin.
# See https://github.com/bazelbuild/bazel/blob/5c75d0acec21459bbb13520817e3806e1507e907/tools/cpp/unix_cc_toolchain_config.bzl#L1000-L1024
# Context: https://github.com/grailbio/bazel-toolchain/issues/238
build --features=-libtool
build --host_features=-libtool

# Disable docs and wasm by default.
build --build_tag_filters=-docs,-wasm

# Use registered clang toolchain.
build --incompatible_enable_cc_toolchain_resolution

# Clang with libc++
build:libc++ --action_env=CXXFLAGS=-stdlib=libc++
build:libc++ --action_env=LDFLAGS=-stdlib=libc++
build:libc++ --define force_libcpp=enabled

# C++20
build:c++20 --cxxopt=-std=c++20 --cxxopt=-fexperimental-library

# Host toolchain using libstdc++ instead of libc++, for libclang support
build:host_libstdc++ --host_cxxopt=-std=c++20 --host_cxxopt=-stdlib=libstdc++ --host_linkopt=-lstdc++

build:linux --config=host_libstdc++

# Fixes symbols when debugging on mac.
build:macos --features=oso_prefix_is_pwd

# Reduces binary size on mac
build:macos --linkopt=-exported_symbols_list --linkopt=/dev/null

# Generates documentation
build:doc --aspects=//tools/aspects:hdoc_aspect.bzl%hdoc_aspect

build --config=libc++ --config=c++20 --define absl=1

# Binary size builds
build:binary-size -c opt --copt=-Oz --copt=-g --strip=never

# Coverage builds
coverage --config=coverage
build:coverage --action_env=BAZEL_USE_LLVM_NATIVE_COVERAGE=1
build:coverage --action_env=GCOV=llvm-profdata
build:coverage --action_env=BAZEL_LLVM_COV=llvm-cov
build:coverage --experimental_generate_llvm_lcov
build:coverage --collect_code_coverage
build:coverage --combined_report=lcov
build:coverage --instrumentation_filter="//src[:/]"

# Basic ASAN/UBSAN that works for gcc
build:asan --linkopt -ldl
build:asan --copt -fsanitize=address,undefined
build:asan --linkopt -fsanitize=address,undefined
build:asan --test_env=ASAN_SYMBOLIZER_PATH
# These require libubsan, which is not linked properly by bazel, so disable.
# See https://github.com/google/oss-fuzz/issues/713
build:asan --copt -fno-sanitize=vptr,function
build:asan --linkopt -fno-sanitize=vptr,function

# Fuzzing builds
build:asan-fuzzer --config=asan
build:asan-fuzzer --define=FUZZING_ENGINE=libfuzzer
build:asan-fuzzer --copt=-fsanitize=fuzzer-no-link
build:asan-fuzzer --copt=-fno-omit-frame-pointer
build:asan-fuzzer --copt=-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
build:asan-fuzzer --test_env=UBSAN_OPTIONS=print_stacktrace=1

# Required for bazel_clang_tidy to operate as expected
build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy --output_groups=report

# Optionally override the .clang-tidy config file target
build:clang-tidy --@bazel_clang_tidy//:clang_tidy_config=//:clang_tidy_config
