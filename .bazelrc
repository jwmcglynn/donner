##
## Donner build config
##
## Options:
## 
##   --config=latest_llvm       - Build with LLVM toolchain (downloads automatically)
##   --config=debug             - Build debug with configs set to simplify debugging.
##   --config=binary-size       - Build optimized build and symbols for binary size analysis.
##   --config=macos-binary-size - Same as above but with additional flags for macOS.
##   --config=coverage          - Build with code coverage instrumentation.
##   --config=asan              - Build with address sanitizer.
##   --config=asan-fuzzer       - Build with address sanitizer and fuzzing engine.
##   --config=clang-tidy        - Build with clang-tidy checks.
##

# Enables using platform-specific configs such as build:linux and build:macos in this .bazelrc file
build --enable_platform_specific_config

##
## Build config
##

# Force clang to be the default compiler for all Bazel C/C++ actions.
# Propagates CC/CXX so every action (including host tools) uses clang/clang++.
build --action_env=CC=clang
build --action_env=CXX=clang++
build --host_action_env=CC=clang
build --host_action_env=CXX=clang++

# Disable layering check since toolchains_llvm has issues with it.
build --features=-layering_check

# Disable exceptions and rtti
build --copt=-fno-exceptions
build --copt=-fno-rtti

# Disable warning about a 'switch' missing 'default' label, which started triggering in skia on clang 19
build --copt=-Wno-switch-default

# Use registered clang toolchain.
build --incompatible_enable_cc_toolchain_resolution

# Enable building with the latest llvm toolchain (downloaded on-demand, see MODULE.bazel)
common:latest_llvm --extra_toolchains=@llvm_toolchain//:all
common:latest_llvm --//build_defs:llvm_latest=1

# Clang with libc++
build:libc++ --action_env=CXXFLAGS=-stdlib=libc++
build:libc++ --action_env=LDFLAGS=-stdlib=libc++
build:libc++ --define force_libcpp=enabled

# C++20
build:c++20 --cxxopt=-std=c++20

# Host toolchain using libstdc++ instead of libc++, for libclang support
build:host_libstdc++ --host_cxxopt=-std=c++20 --host_cxxopt=-stdlib=libstdc++ --host_linkopt=-lstdc++

build:linux --config=host_libstdc++ --copt=-fno-modules

# Fixes symbols when debugging on mac.
build:macos --features=oso_prefix_is_pwd

# Reduces binary size on mac
build:macos-binary-size --config=binary-size
build:macos-binary-size --linkopt=-exported_symbols_list --linkopt=/dev/null
build:macos-binary-size --copt=-gline-tables-only
build:macos-binary-size --linkopt=-dead_strip

build --config=libc++ --config=c++20 --define absl=1

# Debug builds
build:debug -c dbg --copt=-O0 --copt=-g --copt=-fdebug-compilation-dir=. --linkopt=-g --strip=never --apple_generate_dsym --spawn_strategy=standalone

# Binary size builds
build:binary-size -c opt --copt=-Os --copt=-g --strip=never

# For test coverage install the failure signal handler
test --test_env="GTEST_INSTALL_FAILURE_SIGNAL_HANDLER=1"

# Coverage builds
coverage --config=coverage
coverage --combined_report=lcov
coverage --instrumentation_filter="-test_utils$,//donner[:/]"
coverage --test_tag_filters=-fuzz_target

coverage:macos --test_env=COVERAGE_GCOV_PATH=/Library/Developer/CommandLineTools/usr/bin/llvm-profdata
coverage:macos --test_env=LLVM_COV=/Library/Developer/CommandLineTools/usr/bin/llvm-cov

build:coverage --cxxopt=-DNDEBUG
build:coverage --experimental_generate_llvm_lcov
build:coverage --copt=-ffile-compilation-dir=.
build:coverage --action_env=BAZEL_USE_LLVM_NATIVE_COVERAGE=1
build:coverage --action_env=GCOV=llvm-profdata
build:coverage --action_env=BAZEL_LLVM_COV=llvm-cov

test:coverage --collect_code_coverage
test:coverage --nocache_test_results

# Basic ASAN/UBSAN that works for gcc
build:asan --config=latest_llvm
build:asan --linkopt=-ldl
build:asan --copt=-fsanitize=address,undefined
build:asan --linkopt=-fsanitize=address,undefined
build:asan --copt=-fno-omit-frame-pointer
build:asan --copt=-fsanitize-address-use-after-scope
build:asan --test_env=ASAN_SYMBOLIZER_PATH
# These require libubsan, which is not linked properly by bazel, so disable.
# See https://github.com/google/oss-fuzz/issues/713
build:asan --copt=-fno-sanitize=vptr,function
build:asan --linkopt=-fno-sanitize=vptr,function
build:asan --strip=never

# Fuzzing builds
build:asan-fuzzer --config=asan
build:asan-fuzzer --copt=-fsanitize=fuzzer-no-link
build:asan-fuzzer --define=FUZZING_ENGINE=libfuzzer
build:asan-fuzzer --copt=-fno-omit-frame-pointer
build:asan-fuzzer --copt=-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
build:asan-fuzzer --test_env=UBSAN_OPTIONS=print_stacktrace=1

# Required for bazel_clang_tidy to operate as expected
build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy --output_groups=report

# Optionally override the .clang-tidy config file target
build:clang-tidy --@bazel_clang_tidy//:clang_tidy_config=//:clang_tidy_config

##
## Test config
##

# Outputs test failures from failing tests instead just linking to test.log.
test --test_output=errors
