#include "donner/svg/SVGDefsElement.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "donner/svg/renderer/tests/RendererTestUtils.h"
#include "donner/svg/tests/ParserTestUtils.h"

using testing::Eq;
using testing::Ne;

namespace donner::svg {

/**
 * Test that a `<defs>` element can be created and safely cast to its base type.
 */
TEST(SVGDefsElementTests, CreateAndCast) {
  auto defs = instantiateSubtreeElementAs<SVGDefsElement>("<defs></defs>");

  // Verify that the defs element can be cast to SVGGraphicsElement (its base class)
  EXPECT_THAT(defs->tryCast<SVGGraphicsElement>(), Ne(std::nullopt));
  // And that casting to itself works.
  EXPECT_THAT(defs->tryCast<SVGDefsElement>(), Ne(std::nullopt));
}

/**
 * Verify that a `<defs>` element is not rendered directly.
 *
 * Even if a `<defs>` element contains graphics (such as a circle), nothing should be visible in the
 * final output.
 */
TEST(SVGDefsElementTests, NotRenderedDirectly) {
  // The <svg> contains only a <defs> (with a child circle); the defs should not appear.
  const AsciiImage generatedAscii = RendererTestUtils::renderToAsciiImage(R"(
    <svg width="16" height="16">
      <defs>
        <circle cx="8" cy="8" r="4" fill="white"/>
      </defs>
    </svg>
  )");

  // Expect a blank (empty) 16x16 output.
  EXPECT_TRUE(generatedAscii.matches(R"(
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    ................
  )"));
}

/**
 * Verify that a definition placed within a `<defs>` element can be referenced
 * and rendered using a `<use>` element.
 */
TEST(SVGDefsElementTests, UseElementRendersDefinition) {
  // The defs defines a circle with id "c1"; the <use> element references it.
  const AsciiImage generatedAscii = RendererTestUtils::renderToAsciiImage(R"(
    <svg width="16" height="16">
      <defs>
        <circle id="c1" cx="8" cy="8" r="4" fill="white"/>
      </defs>
      <use href="#c1" />
    </svg>
  )");

  // The expected ASCII art represents a circle rendered by the <use> element.
  EXPECT_TRUE(generatedAscii.matches(R"(
      ................
      ................
      ................
      ................
      ......@@@@......
      .....@@@@@@.....
      ....@@@@@@@@....
      ....@@@@@@@@....
      ....@@@@@@@@....
      ....@@@@@@@@....
      .....@@@@@@.....
      ......@@@@......
      ................
      ................
      ................
      ................
      )"));
}

/**
 * Verify that a `<defs>` element may contain multiple definitions and that each
 * can be referenced via separate `<use>` elements.
 */
TEST(SVGDefsElementTests, MultipleDefinitionsUsage) {
  // The defs contains both a circle and a rectangle, each with its own id.
  const AsciiImage generatedAscii = RendererTestUtils::renderToAsciiImage(R"(
    <svg width="16" height="16">
      <defs>
        <circle id="c1" cx="4" cy="12" r="3" fill="white"/>
        <rect id="r1" x="9" y="2" width="4" height="4" fill="white"/>
      </defs>
      <use href="#c1" />
      <use href="#r1" />
    </svg>
  )");

  // The expected output is a composite image showing a circle (lower left) and a rectangle (upper
  // right). (Note: The ASCII art below is an approximation of the expected rendered output.)
  EXPECT_TRUE(generatedAscii.matches(R"(
      ................
      ................
      .........@@@@...
      .........@@@@...
      .........@@@@...
      .........@@@@...
      ................
      ................
      ................
      ...@@...........
      ..@@@@..........
      .@@@@@@.........
      .@@@@@@.........
      ..@@@@..........
      ...@@...........
      ................
      )"));
}

}  // namespace donner::svg
