// Copyright 2019-2023 hdoc
// SPDX-License-Identifier: AGPL-3.0-only

#include "doctest.h"
#include "serde/HTMLWriter.hpp"

#include <string>
#include <vector>

struct TestCase {
  std::string input;
  std::string expected;
};

TEST_CASE("Testing getBareTypeName on a huge set of test cases") {
  const std::vector<TestCase> cases{
      {"A1 &", "A1"},
      {"A2 &", "A2"},
      {"A3 &", "A3"},
      {"A4 &", "A4"},
      {"anonymous struct/union", "anonymous struct/union"},
      {"any_decision_function<sample_type, result_type> &", "any_decision_function"},
      {"any_decision_function<sample_type_, result_type_> &", "any_decision_function"},
      {"any_decision_function<U, V> &", "any_decision_function"},
      {"any_function<function_type> &", "any_function"},
      {"any_trainer<sample_type, scalar_type> &", "any_trainer"},
      {"any_trainer<sample_type_, scalar_type_> &", "any_trainer"},
      {"any_trainer<U, V> &", "any_trainer"},
      {"ARG1", "ARG1"},
      {"ARG2", "ARG2"},
      {"ARG3", "ARG3"},
      {"ARG4", "ARG4"},
      {"Args &&...", "Args"},
      {"array2d<char>", "array2d"},
      {"array2d<char> &", "array2d"},
      {"array2d<dlib::bgr_pixel, mem_manager> &", "array2d"},
      {"array2d<dlib::hsi_pixel, mem_manager> &", "array2d"},
      {"array2d<dlib::rgb_alpha_pixel, mem_manager> &", "array2d"},
      {"array2d<dlib::rgb_pixel, mem_manager> &", "array2d"},
      {"array2d<T, mem_manager> &", "array2d"},
      {"array2d<T, mem_manager> &&", "array2d"},
      {"array2d<T, mm> &", "array2d"},
      {"array2d<unsigned char, mem_manager> &", "array2d"},
      {"array<dlib::letter>", "array"},
      {"array<dlib::thread_id_type>", "array"},
      {"array<dlib::thread_pool_implementation::task_state_type>", "array"},
      {"array<long>", "array"},
      {"array<matrix<dlib::op_symm_cache::type, 0, 1, typename M::mem_manager_type>>", "array"},
      {"array<std::unique_ptr<thread_function>>", "array"},
      {"array<T, mem_manager> &", "array"},
      {"array<T, mem_manager> &&", "array"},
      {"assignable_col_matrix<T, NR, NC, MM, L> &", "assignable_col_matrix"},
      {"assignable_ptr_matrix<T> &", "assignable_ptr_matrix"},
      {"assignable_row_matrix<T, NR, NC, MM, L> &", "assignable_row_matrix"},
      {"assignable_sub_matrix<T, NR, NC, MM, L> &", "assignable_sub_matrix"},
      {"basic_mmap<AccessMode, ByteT> &", "basic_mmap"},
      {"basic_mmap<AccessMode, ByteT> &&", "basic_mmap"},
      {"basic_shared_mmap<AccessMode, ByteT> &", "basic_shared_mmap"},
      {"basic_shared_mmap<AccessMode, ByteT> &&", "basic_shared_mmap"},
      {"binary_search_tree_kernel_1<domain, range, mem_manager, compare> &", "binary_search_tree_kernel_1"},
      {"binary_search_tree_kernel_2<domain, range, mem_manager, compare> &", "binary_search_tree_kernel_2"},
      {"binary_search_tree_kernel_c<bst_base> &", "binary_search_tree_kernel_c"},
      {"binary_search_tree<thread_id_type, member_function_pointer<>, memory_manager<char>::kernel_2a>::kernel_2a_c",
       "binary_search_tree"},
      {"bool", "bool"},
      {"bool &", "bool"},
      {"bool *", "bool"},
      {"bst_base", "bst_base"},
      {"cc", "cc"},
      {"cc **", "cc"},
      {"ccbig *[alphabet_size]", "ccbig"},
      {"cc_high **", "cc_high"},
      {"char", "char"},
      {"char *", "char"},
      {"char **", "char"},
      {"char [20]", "char"},
      {"char [200]", "char"},
      {"char [4]", "char"},
      {"char (&)[length]", "char"},
      {"char [size]", "char"},
      {"char [sizeof(T)]", "char"},
      {"charT &", "charT"},
      {"charT [10]", "charT"},
      {"circular_buffer<T> &", "circular_buffer"},
      {"clang::AccessSpecifier", "clang::AccessSpecifier"},
      {"clang::ast_matchers::DeclarationMatcher", "clang::ast_matchers::DeclarationMatcher"},
      {"clang::PrintingPolicy", "clang::PrintingPolicy"},
      {"clang::RefQualifierKind", "clang::RefQualifierKind"},
      {"clang::StorageClass", "clang::StorageClass"},
      {"compare", "compare"},
      {"compile_time_integer_list<indices...>", "compile_time_integer_list"},
      {"compress_stream_kernel_1<fce, fcd, crc32> &", "compress_stream_kernel_1"},
      {"compress_stream_kernel_2<fce, fcd, lz77_buffer, sliding_buffer, fce_length, fcd_length, fce_index, fcd_index, crc32> &",
       "compress_stream_kernel_2"},
      {"compress_stream_kernel_3<lzp_buf, crc32, buffer_size> &", "compress_stream_kernel_3"},
      {"conditioning_class_kernel_1<alphabet_size> &", "conditioning_class_kernel_1"},
      {"conditioning_class_kernel_2<alphabet_size> &", "conditioning_class_kernel_2"},
      {"conditioning_class_kernel_3<alphabet_size> &", "conditioning_class_kernel_3"},
      {"conditioning_class_kernel_4<alphabet_size, pool_size, mem_manager> &", "conditioning_class_kernel_4"},
      {"config_reader_base *", "config_reader_base"},
      {"config_reader_kernel_1<map_string_string, map_string_void, tokenizer> &", "config_reader_kernel_1"},
      {"config_reader_thread_safe_1<config_reader_base, map_string_void> &", "config_reader_thread_safe_1"},
      {"const Allocator &", "Allocator"},
      {"const any_decision_function<sample_type_, result_type_> &", "any_decision_function"},
      {"const any_decision_function<U, V> &", "any_decision_function"},
      {"const any_function<function_type> &", "any_function"},
      {"const any_trainer<sample_type_, scalar_type_> &", "any_trainer"},
      {"const any_trainer<U, V> &", "any_trainer"},
      {"const ::arma::Mat<T> &", "::arma::Mat"},
      {"const array2d<dlib::bgr_pixel, mem_manager> &", "array2d"},
      {"const array2d<dlib::hsi_pixel, mem_manager> &", "array2d"},
      {"const array2d<dlib::rgb_alpha_pixel, mem_manager> &", "array2d"},
      {"const array2d<dlib::rgb_pixel> &", "array2d"},
      {"const array2d<dlib::rgb_pixel, mem_manager> &", "array2d"},
      {"const array2d<std::map<T, parse_tree_element<T>>> &", "array2d"},
      {"const array2d<T, mem_manager> &", "array2d"},
      {"const array2d<T, mm> &", "array2d"},
      {"const array2d<T, MM> &", "array2d"},
      {"const array2d<unsigned char> &", "array2d"},
      {"const array2d<unsigned char, mem_manager> &", "array2d"},
      {"const array_of_dpoints &", "array_of_dpoints"},
      {"const array<T, mem_manager> &", "array"},
      {"const array<T, MM> &", "array"},
      {"const array_type &", "array_type"},
      {"const background_type &", "background_type"},
      {"const basic_mmap<AccessMode, ByteT> &", "basic_mmap"},
      {"const basic_shared_mmap<AccessMode, ByteT> &", "basic_shared_mmap"},
      {"const bool", "bool"},
      {"const bool &", "bool"},
      {"const C &", "C"},
      {"const char", "char"},
      {"const char *", "char"},
      {"const char (&)[length]", "char"},
      {"const charT *", "charT"},
      {"const circular_buffer<T> &", "circular_buffer"},
      {"const clang::ast_matchers::MatchFinder::MatchResult &", "clang::ast_matchers::MatchFinder::MatchResult"},
      {"const clang::comments::Comment *", "clang::comments::Comment"},
      {"const clang::Decl *", "clang::Decl"},
      {"const clang::Expr *", "clang::Expr"},
      {"const clang::FunctionDecl *", "clang::FunctionDecl"},
      {"const clang::NamedDecl *", "clang::NamedDecl"},
      {"const clang::tooling::CompilationDatabase &", "clang::tooling::CompilationDatabase"},
      {"const compare &", "compare"},
      {"const compare_type &", "compare_type"},
      {"const config_reader_base *", "config_reader_base"},
      {"const config_reader_type &", "config_reader_type"},
      {"const const_image_view<image_type> &", "const_image_view"},
      {"const const_image_view<T> &", "const_image_view"},
      {"const constituent<T> &", "constituent"},
      {"const const_sub_image_proxy<T> &", "const_sub_image_proxy"},
      {"const cr_type &", "cr_type"},
      {"const Database<T> &", "Database"},
      {"const dec_funct_type &", "dec_funct_type"},
      {"const decision_function<K> &", "decision_function"},
      {"const directory::data &", "directory::data"},
      {"const discriminant_pca<matrix_type> &", "discriminant_pca"},
      {"const distance_function<K> &", "distance_function"},
      {"const distance_function_type &", "distance_function_type"},
      {"const dlib::alias_tensor &", "dlib::alias_tensor"},
      {"const dlib::alias_tensor_instance &", "dlib::alias_tensor_instance"},
      {"const dlib::any &", "dlib::any"},
      {"const dlib::any_decision_function::sample_type &", "dlib::any_decision_function::sample_type"},
      {"const dlib::attribute_list &", "dlib::attribute_list"},
      {"const dlib::bgr_pixel &", "dlib::bgr_pixel"},
      {"const dlib::bigint_kernel_1 &", "dlib::bigint_kernel_1"},
      {"const dlib::bigint_kernel_1::data_record &", "dlib::bigint_kernel_1::data_record"},
      {"const dlib::bigint_kernel_1::data_record *", "dlib::bigint_kernel_1::data_record"},
      {"const dlib::bigint_kernel_2 &", "dlib::bigint_kernel_2"},
      {"const dlib::bigint_kernel_2::data_record &", "dlib::bigint_kernel_2::data_record"},
      {"const dlib::bigint_kernel_2::data_record *", "dlib::bigint_kernel_2::data_record"},
      {"const dlib::binary_search_tree_kernel_1::node *", "dlib::binary_search_tree_kernel_1::node"},
      {"const dlib::binary_search_tree_kernel_2::node *", "dlib::binary_search_tree_kernel_2::node"},
      {"const dlib::binary_search_tree_kernel_c::domain &", "dlib::binary_search_tree_kernel_c::domain"},
      {"const dlib::blas_bindings::CBLAS_DIAG", "dlib::blas_bindings::CBLAS_DIAG"},
      {"const dlib::blas_bindings::CBLAS_ORDER", "dlib::blas_bindings::CBLAS_ORDER"},
      {"const dlib::blas_bindings::CBLAS_SIDE", "dlib::blas_bindings::CBLAS_SIDE"},
      {"const dlib::blas_bindings::CBLAS_TRANSPOSE", "dlib::blas_bindings::CBLAS_TRANSPOSE"},
      {"const dlib::blas_bindings::CBLAS_UPLO", "dlib::blas_bindings::CBLAS_UPLO"},
      {"const dlib::bobyqa_implementation::doublereal", "dlib::bobyqa_implementation::doublereal"},
      {"const dlib::bobyqa_implementation::doublereal *", "dlib::bobyqa_implementation::doublereal"},
      {"const dlib::bobyqa_implementation::integer", "dlib::bobyqa_implementation::integer"},
      {"const dlib::bound_function_pointer &", "dlib::bound_function_pointer"},
      {"const dlib::camera_transform &", "dlib::camera_transform"},
      {"const dlib::chip_details &", "dlib::chip_details"},
      {"const dlib::chip_dims &", "dlib::chip_dims"},
      {"const dlib::config_reader &", "dlib::config_reader"},
      {"const dlib::cpu::pooling &", "dlib::cpu::pooling"},
      {"const dlib::cpu::tensor_conv &", "dlib::cpu::tensor_conv"},
      {"const dlib::cuda::enable_peer_access &", "dlib::cuda::enable_peer_access"},
      {"const dlib::cuda::raii_set_device &", "dlib::cuda::raii_set_device"},
      {"const dlib::decision_function::sample_vector_type &", "dlib::decision_function::sample_vector_type"},
      {"const dlib::decision_function::scalar_type &", "dlib::decision_function::scalar_type"},
      {"const dlib::decision_function::scalar_vector_type &", "dlib::decision_function::scalar_vector_type"},
      {"const dlib::directory &", "dlib::directory"},
      {"const dlib::distance_function::kernel_type &", "dlib::distance_function::kernel_type"},
      {"const dlib::distance_function::sample_type &", "dlib::distance_function::sample_type"},
      {"const dlib::distance_function::sample_vector_type &", "dlib::distance_function::sample_vector_type"},
      {"const dlib::distance_function::scalar_type &", "dlib::distance_function::scalar_type"},
      {"const dlib::distance_function::scalar_vector_type &", "dlib::distance_function::scalar_vector_type"},
      {"const dlib::dpoint &", "dlib::dpoint"},
      {"const dlib::drectangle &", "dlib::drectangle"},
      {"const dlib::error_type", "dlib::error_type"},
      {"const dlib::fft_size", "dlib::fft_size"},
      {"const dlib::fft_size &", "dlib::fft_size"},
      {"const dlib::file &", "dlib::file"},
      {"const dlib::FileInfo &", "dlib::FileInfo"},
      {"const dlib::float_details &", "dlib::float_details"},
      {"const dlib::full_object_detection &", "dlib::full_object_detection"},
      {"const dlib::function_evaluation &", "dlib::function_evaluation"},
      {"const dlib::function_evaluation_request &", "dlib::function_evaluation_request"},
      {"const dlib::function_spec &", "dlib::function_spec"},
      {"const dlib::global_function_search &", "dlib::global_function_search"},
      {"const dlib::gopt_impl::funct_info &", "dlib::gopt_impl::funct_info"},
      {"const dlib::gpu_data &", "dlib::gpu_data"},
      {"const dlib::hsi_pixel &", "dlib::hsi_pixel"},
      {"const dlib::http_parse_error &", "dlib::http_parse_error"},
      {"const dlib::image_dataset_metadata::dataset &", "dlib::image_dataset_metadata::dataset"},
      {"const dlib::impl1::hostinfo &", "dlib::impl1::hostinfo"},
      {"const dlib::impl1::msg_data &", "dlib::impl1::msg_data"},
      {"const dlib::impl::png_type", "dlib::impl::png_type"},
      {"const dlib::incoming_things &", "dlib::incoming_things"},
      {"const dlib::int16", "dlib::int16"},
      {"const dlib::kiss_details::plan_key &", "dlib::kiss_details::plan_key"},
      {"const dlib::lab_pixel &", "dlib::lab_pixel"},
      {"const dlib::lbfgs_search_strategy &", "dlib::lbfgs_search_strategy"},
      {"const dlib::least_squares_function_model::column_vector &",
       "dlib::least_squares_function_model::column_vector"},
      {"const dlib::least_squares_lm_function_model::column_vector &",
       "dlib::least_squares_lm_function_model::column_vector"},
      {"const dlib::letter &", "dlib::letter"},
      {"const dlib::line &", "dlib::line"},
      {"const dlib::logger", "dlib::logger"},
      {"const dlib::logger &", "dlib::logger"},
      {"const dlib::logger::hook_mfp &", "dlib::logger::hook_mfp"},
      {"const dlib::log_level &", "dlib::log_level"},
      {"const dlib::map_kernel_c::domain &", "dlib::map_kernel_c::domain"},
      {"const dlib::matrix_div_scal_exp::type", "dlib::matrix_div_scal_exp::type"},
      {"const dlib::matrix_div_scal_exp::type &", "dlib::matrix_div_scal_exp::type"},
      {"const dlib::matrix::literal_assign_helper &", "dlib::matrix::literal_assign_helper"},
      {"const dlib::matrix_mul_scal_exp::type", "dlib::matrix_mul_scal_exp::type"},
      {"const dlib::matrix_mul_scal_exp::type &", "dlib::matrix_mul_scal_exp::type"},
      {"const dlib::max_function_calls", "dlib::max_function_calls"},
      {"const dlib::member_function_pointer::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer::mp_impl_const::mfp_pointer_type"},
      {"const dlib::member_function_pointer<>::mp_impl_const::mfp_pointer_type", "dlib::member_function_pointer"},
      {"const dlib::member_function_pointer::mp_impl::mfp_pointer_type",
       "dlib::member_function_pointer::mp_impl::mfp_pointer_type"},
      {"const dlib::member_function_pointer<>::mp_impl::mfp_pointer_type", "dlib::member_function_pointer"},
      {"const dlib::member_function_pointer<type-parameter-0-0>::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"const dlib::member_function_pointer<type-parameter-0-0>::mp_impl::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"const dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1>::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"const dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1>::mp_impl::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"const dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2>::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"const dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2>::mp_impl::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"const dlib::mfp_kernel_1_base_class::mfp_type", "dlib::mfp_kernel_1_base_class::mfp_type"},
      {"const dlib::mfp_kernel_1_base_class::mp_base_base *", "dlib::mfp_kernel_1_base_class::mp_base_base"},
      {"const dlib::mfp_kernel_1_base_class::mp_null::mfp_pointer_type",
       "dlib::mfp_kernel_1_base_class::mp_null::mfp_pointer_type"},
      {"const dlib::mmod_rect &", "dlib::mmod_rect"},
      {"const dlib::momentum_filter &", "dlib::momentum_filter"},
      {"const dlib::multiclass_linear_decision_function::sample_type &",
       "dlib::multiclass_linear_decision_function::sample_type"},
      {"const dlib::mutex &", "dlib::mutex"},
      {"const dlib::mutex *", "dlib::mutex"},
      {"const dlib::network_address &", "dlib::network_address"},
      {"const dlib::noncopyable &", "dlib::noncopyable"},
      {"const dlib::offset_kernel::scalar_type", "dlib::offset_kernel::scalar_type"},
      {"const dlib::offset_kernel::scalar_type &", "dlib::offset_kernel::scalar_type"},
      {"const dlib::op_add_scalar::type", "dlib::op_add_scalar::type"},
      {"const dlib::op_add_scalar::type &", "dlib::op_add_scalar::type"},
      {"const dlib::op_clamp2::type &", "dlib::op_clamp2::type"},
      {"const dlib::op_colm_symm_cache::type *", "dlib::op_colm_symm_cache::type"},
      {"const dlib::op_colm_symm_cache::type *const", "dlib::op_colm_symm_cache::type"},
      {"const dlib::op_kern_mat::samp_type &", "dlib::op_kern_mat::samp_type"},
      {"const dlib::op_kern_mat_single::samp_type &", "dlib::op_kern_mat_single::samp_type"},
      {"const dlib::op_lowerbound::type &", "dlib::op_lowerbound::type"},
      {"const dlib::op_lowerm_s::type", "dlib::op_lowerm_s::type"},
      {"const dlib::op_lowerm_s::type &", "dlib::op_lowerm_s::type"},
      {"const dlib::op_mat_to_vect2::M &", "dlib::op_mat_to_vect2::M"},
      {"const dlib::op_normalize::type", "dlib::op_normalize::type"},
      {"const dlib::op_normalize::type &", "dlib::op_normalize::type"},
      {"const dlib::op_rowm_symm_cache::type *", "dlib::op_rowm_symm_cache::type"},
      {"const dlib::op_rowm_symm_cache::type *const", "dlib::op_rowm_symm_cache::type"},
      {"const dlib::op_s_div_m::type", "dlib::op_s_div_m::type"},
      {"const dlib::op_s_div_m::type &", "dlib::op_s_div_m::type"},
      {"const dlib::op_softmax::type", "dlib::op_softmax::type"},
      {"const dlib::op_softmax::type &", "dlib::op_softmax::type"},
      {"const dlib::op_subl_scalar::type", "dlib::op_subl_scalar::type"},
      {"const dlib::op_subl_scalar::type &", "dlib::op_subl_scalar::type"},
      {"const dlib::op_subr_scalar::type", "dlib::op_subr_scalar::type"},
      {"const dlib::op_subr_scalar::type &", "dlib::op_subr_scalar::type"},
      {"const dlib::op_upperbound::type &", "dlib::op_upperbound::type"},
      {"const dlib::op_upperm_s::type", "dlib::op_upperm_s::type"},
      {"const dlib::op_upperm_s::type &", "dlib::op_upperm_s::type"},
      {"const dlib::ordered_sample_pair &", "dlib::ordered_sample_pair"},
      {"const dlib::point &", "dlib::point"},
      {"const dlib::point_rotator &", "dlib::point_rotator"},
      {"const dlib::point_transform &", "dlib::point_transform"},
      {"const dlib::point_transform_affine &", "dlib::point_transform_affine"},
      {"const dlib::point_transform_affine3d &", "dlib::point_transform_affine3d"},
      {"const dlib::point_transform_projective &", "dlib::point_transform_projective"},
      {"const dlib::polynomial_kernel::scalar_type", "dlib::polynomial_kernel::scalar_type"},
      {"const dlib::print_header_type &", "dlib::print_header_type"},
      {"const dlib::probabilistic_decision_function::scalar_type",
       "dlib::probabilistic_decision_function::scalar_type"},
      {"const dlib::probabilistic_function::scalar_type", "dlib::probabilistic_function::scalar_type"},
      {"const dlib::projection_function::sample_vector_type &", "dlib::projection_function::sample_vector_type"},
      {"const dlib::projection_function::scalar_matrix_type &", "dlib::projection_function::scalar_matrix_type"},
      {"const dlib::radial_basis_kernel::scalar_type", "dlib::radial_basis_kernel::scalar_type"},
      {"const dlib::rand &", "dlib::rand"},
      {"const dlib::read_write_mutex &", "dlib::read_write_mutex"},
      {"const dlib::read_write_mutex *", "dlib::read_write_mutex"},
      {"const dlib::rectangle", "dlib::rectangle"},
      {"const dlib::rectangle &", "dlib::rectangle"},
      {"const dlib::rectangle_transform &", "dlib::rectangle_transform"},
      {"const dlib::rect_filter &", "dlib::rect_filter"},
      {"const dlib::resizable_tensor &", "dlib::resizable_tensor"},
      {"const dlib::rgb_alpha_pixel &", "dlib::rgb_alpha_pixel"},
      {"const dlib::rgb_pixel &", "dlib::rgb_pixel"},
      {"const dlib::rmutex &", "dlib::rmutex"},
      {"const dlib::rmutex *", "dlib::rmutex"},
      {"const dlib::sample_pair &", "dlib::sample_pair"},
      {"const dlib::sequence_kernel_1::node *", "dlib::sequence_kernel_1::node"},
      {"const dlib::set_kernel_c::T &", "dlib::set_kernel_c::T"},
      {"const dlib::sigmoid_kernel::scalar_type", "dlib::sigmoid_kernel::scalar_type"},
      {"const dlib::simd4f &", "dlib::simd4f"},
      {"const dlib::simd4f_bool &", "dlib::simd4f_bool"},
      {"const dlib::simd4f::type *", "dlib::simd4f::type"},
      {"const dlib::simd4i &", "dlib::simd4i"},
      {"const dlib::simd4i::type *", "dlib::simd4i::type"},
      {"const dlib::simd8f &", "dlib::simd8f"},
      {"const dlib::simd8f_bool &", "dlib::simd8f_bool"},
      {"const dlib::simd8f::type *", "dlib::simd8f::type"},
      {"const dlib::simd8i &", "dlib::simd8i"},
      {"const dlib::simd8i::rawarray &", "dlib::simd8i::rawarray"},
      {"const dlib::simd8i::type *", "dlib::simd8i::type"},
      {"const dlib::solve_qp2_using_smo::scalar_type", "dlib::solve_qp2_using_smo::scalar_type"},
      {"const dlib::solve_qp3_using_smo::scalar_type &", "dlib::solve_qp3_using_smo::scalar_type"},
      {"const dlib::sparse_polynomial_kernel::scalar_type", "dlib::sparse_polynomial_kernel::scalar_type"},
      {"const dlib::sparse_radial_basis_kernel::scalar_type", "dlib::sparse_radial_basis_kernel::scalar_type"},
      {"const dlib::sparse_sigmoid_kernel::scalar_type", "dlib::sparse_sigmoid_kernel::scalar_type"},
      {"const dlib::svm_c_linear_dcd_trainer::optimizer_state &", "dlib::svm_c_linear_dcd_trainer::optimizer_state"},
      {"const dlib::svm_c_linear_dcd_trainer::sample_type &", "dlib::svm_c_linear_dcd_trainer::sample_type"},
      {"const dlib::svm_c_linear_dcd_trainer::scalar_type &", "dlib::svm_c_linear_dcd_trainer::scalar_type"},
      {"const dlib::svm_c_linear_dcd_trainer::scalar_vector_type &",
       "dlib::svm_c_linear_dcd_trainer::scalar_vector_type"},
      {"const dlib::svm_c_trainer::kernel_type &", "dlib::svm_c_trainer::kernel_type"},
      {"const dlib::svm_c_trainer::scalar_type &", "dlib::svm_c_trainer::scalar_type"},
      {"const dlib::svm_nu_trainer::kernel_type &", "dlib::svm_nu_trainer::kernel_type"},
      {"const dlib::svm_nu_trainer::scalar_type &", "dlib::svm_nu_trainer::scalar_type"},
      {"const dlib::tensor &", "dlib::tensor"},
      {"const dlib::thread_id_type", "dlib::thread_id_type"},
      {"const dlib::thread_pool_implementation::bfp_type &", "dlib::thread_pool_implementation::bfp_type"},
      {"const dlib::timeout &", "dlib::timeout"},
      {"const dlib::timer::af_type", "dlib::timer::af_type"},
      {"const dlib::timer_heavy::af_type", "dlib::timer_heavy::af_type"},
      {"const dlib::tokenizer_kernel_1 &", "dlib::tokenizer_kernel_1"},
      {"const dlib::tt::multi_device_tensor_averager &", "dlib::tt::multi_device_tensor_averager"},
      {"const dlib::tt::pooling &", "dlib::tt::pooling"},
      {"const dlib::tt::tensor_conv &", "dlib::tt::tensor_conv"},
      {"const dlib::tt::tensor_rand &", "dlib::tt::tensor_rand"},
      {"const dlib::uint32", "dlib::uint32"},
      {"const dlib::uint32 &", "dlib::uint32"},
      {"const dlib::uint32 *", "dlib::uint32"},
      {"const dlib::uint64", "dlib::uint64"},
      {"const dlib::uint64 &", "dlib::uint64"},
      {"const dlib::uint64 *", "dlib::uint64"},
      {"const dlib::upper_bound_function &", "dlib::upper_bound_function"},
      {"const dlib::ustring &", "dlib::ustring"},
      {"const dlib::vector<double, 2> &", "dlib::vector"},
      {"const dlib::vector<double, 3> &", "dlib::vector"},
      {"const dlib::vectorstream &", "dlib::vectorstream"},
      {"const dlib::vector<T, 2> &", "dlib::vector"},
      {"const domain &", "domain"},
      {"const domain *", "domain"},
      {"const double", "double"},
      {"const double &", "double"},
      {"const double *", "double"},
      {"const ::Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> &", "::Eigen::Matrix"},
      {"const enumerable<T> &", "enumerable"},
      {"const EXP &", "EXP"},
      {"const EXP *", "EXP"},
      {"const EXP1 &", "EXP1"},
      {"const EXP2 &", "EXP2"},
      {"const EXPc", "EXPc"},
      {"const EXPc &", "EXPc"},
      {"const EXPr", "EXPr"},
      {"const EXPr &", "EXPr"},
      {"const exp_type &", "exp_type"},
      {"const F &", "F"},
      {"const feature_extractor_type &", "feature_extractor_type"},
      {"const float", "float"},
      {"const float &", "float"},
      {"const float *", "float"},
      {"const frobmetric_training_sample<matrix_type> &", "frobmetric_training_sample"},
      {"const funct &", "funct"},
      {"const funct_der &", "funct_der"},
      {"const funct_der_type &", "funct_der_type"},
      {"const function_type &", "function_type"},
      {"const funct_model &", "funct_model"},
      {"const funct_type &", "funct_type"},
      {"const future<T> &", "future"},
      {"const gopt_impl::outstanding_function_eval_request &", "gopt_impl::outstanding_function_eval_request"},
      {"const hdoc::types::Config &", "hdoc::types::Config"},
      {"const hdoc::types::Config *", "hdoc::types::Config"},
      {"const hdoc::types::EnumSymbol &", "hdoc::types::EnumSymbol"},
      {"const hdoc::types::FunctionSymbol &", "hdoc::types::FunctionSymbol"},
      {"const hdoc::types::Index &", "hdoc::types::Index"},
      {"const hdoc::types::Index *", "hdoc::types::Index"},
      {"const hdoc::types::RecordSymbol &", "hdoc::types::RecordSymbol"},
      {"const hdoc::types::SymbolID &", "hdoc::types::SymbolID"},
      {"const hdoc::types::TypeRef", "hdoc::types::TypeRef"},
      {"const hessian_funct &", "hessian_funct"},
      {"const histogram_intersection_kernel<T> &", "histogram_intersection_kernel"},
      {"const image_array_type &", "image_array_type"},
      {"const image_type &", "image_type"},
      {"const image_type1 &", "image_type1"},
      {"const image_type2 &", "image_type2"},
      {"const image_view<image_type> &", "image_view"},
      {"const_image_view<image_type>", "const_image_view"},
      {"const image_view<T> &", "image_view"},
      {"const_image_view<T> &", "const_image_view"},
      {"const in_image_type &", "in_image_type"},
      {"const in_sample_vector_type &", "in_sample_vector_type"},
      {"const in_scalar_vector_type &", "in_scalar_vector_type"},
      {"const int", "int"},
      {"const int &", "int"},
      {"const int *", "int"},
      {"const interpolation_type &", "interpolation_type"},
      {"const iterator &", "iterator"},
      {"const_iterator", "const_iterator"},
      {"ConstIterator", "ConstIterator"},
      {"constituent<T>", "constituent"},
      {"constituent<T> &", "constituent"},
      {"const K &", "K"},
      {"const kalman_filter<states, measurements> &", "kalman_filter"},
      {"const kiss_fftndr_state<T> &", "kiss_fftndr_state"},
      {"const kiss_fftnd_state<T> &", "kiss_fftnd_state"},
      {"const kiss_fftr_state<T> &", "kiss_fftr_state"},
      {"const kiss_fft_state<T> &", "kiss_fft_state"},
      {"const labeled_detection<detection_type_, label_type_> &", "labeled_detection"},
      {"const label_vector_type &", "label_vector_type"},
      {"const LHS &", "LHS"},
      {"const LHS_ &", "LHS_"},
      {"const linear_kernel<T> &", "linear_kernel"},
      {"const long", "long"},
      {"const long &", "long"},
      {"const long double", "long double"},
      {"const long double &", "long double"},
      {"const long double *", "long double"},
      {"const lzp_buffer_kernel_1<sbuf> &", "lzp_buffer_kernel_1"},
      {"const lzp_buffer_kernel_2<sbuf> &", "lzp_buffer_kernel_2"},
      {"const M &", "M"},
      {"const M1 &", "M1"},
      {"const __m128 &", "__m128"},
      {"const __m128i &", "__m128i"},
      {"const M2 &", "M2"},
      {"const M3 &", "M3"},
      {"const M4 &", "M4"},
      {"const map_pair<domain, range> &", "map_pair"},
      {"const MappingToken &", "MappingToken"},
      {"const map_problem &", "map_problem"},
      {"const matrix_add_exp<matrix<T, NR, NC, MM, L>, src_exp> &", "matrix_add_exp"},
      {"const matrix_add_exp<src_exp, matrix<T, NR, NC, MM, L>> &", "matrix_add_exp"},
      {"const matrix_add_exp<src_exp, src_exp2> &", "matrix_add_exp"},
      {"const matrix_diag_exp<EXP> &", "matrix_diag_exp"},
      {"const matrix_diag_exp<M> &", "matrix_diag_exp"},
      {"const matrix<dlib::op_diag_inv::type, NR, 1, dlib::op_diag_inv::mem_manager_type, dlib::op_diag_inv::layout_type>",
       "matrix"},
      {"const matrix<double> &", "matrix"},
      {"const matrix<double, 0, 1> &", "matrix"},
      {"const matrix<double, 0, 1, dlib::vector_normalizer_frobmetric::mem_manager_type> &", "matrix"},
      {"const matrix<double, 2, 2> &", "matrix"},
      {"const matrix<double, 3, 3> &", "matrix"},
      {"const matrix<double, measurements, 1> &", "matrix"},
      {"const matrix<double, measurements, measurements> &", "matrix"},
      {"const matrix<double, measurements, states> &", "matrix"},
      {"const matrix<double, states, 1> &", "matrix"},
      {"const matrix<double, states, states> &", "matrix"},
      {"const matrix_exp<EXP> &", "matrix_exp"},
      {"const matrix_exp<EXP1> &", "matrix_exp"},
      {"const matrix_exp<EXP2> &", "matrix_exp"},
      {"const matrix_exp<EXP3> &", "matrix_exp"},
      {"const matrix_exp<EXP4> &", "matrix_exp"},
      {"const matrix_exp<EXPc> &", "matrix_exp"},
      {"const matrix_exp<EXPr> &", "matrix_exp"},
      {"const matrix_exp<M> &", "matrix_exp"},
      {"const matrix_exp<M1> &", "matrix_exp"},
      {"const matrix_exp<M2> &", "matrix_exp"},
      {"const matrix_exp<matrix_op<op_kern_mat_single<K, V>>> &", "matrix_exp"},
      {"const matrix_exp<matrix_op<op_pointer_to_col_vect<T>>> &", "matrix_exp"},
      {"const matrix_exp<matrix_op<op_pointer_to_mat<T>>> &", "matrix_exp"},
      {"const matrix_exp<matrix_op<op_symm_cache<EXP, cache_element_type>>> &", "matrix_exp"},
      {"const matrix_exp<matrix<T, num_rows, num_cols, mem_manager, layout>> &", "matrix_exp"},
      {"const matrix_exp<src_exp> &", "matrix_exp"},
      {"const matrix_exp<T> &", "matrix_exp"},
      {"const matrix_exp<U> &", "matrix_exp"},
      {"const matrix_mul_scal_exp<matrix<T, NR2, NC2, MM, L>, Sb> &", "matrix_mul_scal_exp"},
      {"const matrix_mul_scal_exp<src_exp, Sb> &", "matrix_mul_scal_exp"},
      {"const matrix_multiply_exp<EXP1, EXP2> &", "matrix_multiply_exp"},
      {"const matrix_op<op_conj<EXP>> &", "matrix_op"},
      {"const matrix_op<op_make_symmetric<EXP>> &", "matrix_op"},
      {"const matrix_op<op_trans<EXP>> &", "matrix_op"},
      {"const matrix_op<op_trans<src_exp>> &", "matrix_op"},
      {"const matrix<std::complex<T>, NR, NC, MM, L> &", "matrix"},
      {"const matrix_subtract_exp<matrix<T, NR, NC, MM, L>, src_exp> &", "matrix_subtract_exp"},
      {"const matrix_subtract_exp<src_exp, src_exp2> &", "matrix_subtract_exp"},
      {"const matrix<T> &", "matrix"},
      {"const matrix<T, Anr, Anc, MM, L> &", "matrix"},
      {"const matrix<T, NR1, NC1, MM> &", "matrix"},
      {"const matrix<T, NR1, NC1, MM, dlib::column_major_layout> &", "matrix"},
      {"const matrix<T, NR1, NC1, MM, layout> &", "matrix"},
      {"const matrix<T, NR, NC, MM> &", "matrix"},
      {"const matrix<T, NR, NC, mm, l> &", "matrix"},
      {"const matrix<T, NR, NC, MM, L> &", "matrix"},
      {"const matrix<T, num_rows, num_cols, mem_manager, layout> &", "matrix"},
      {"const matrix_type &", "matrix_type"},
      {"const mat_type &", "mat_type"},
      {"const mersenne_twister<UIntType, w, n, m, r, a, u, s, b, t, c, l, val> &", "mersenne_twister"},
      {"const mfp_kernel_1_base_class<num_args> &", "mfp_kernel_1_base_class"},
      {"const mio::basic_mmap::handle_type", "mio::basic_mmap::handle_type"},
      {"const mio::basic_mmap::size_type", "mio::basic_mmap::size_type"},
      {"const mio::basic_shared_mmap::handle_type", "mio::basic_shared_mmap::handle_type"},
      {"const mio::basic_shared_mmap::size_type", "mio::basic_shared_mmap::size_type"},
      {"const multiclass_linear_decision_function<K, result_type_> &", "multiclass_linear_decision_function"},
      {"const nlohmann::json &", "nlohmann::json"},
      {"const normalized_function<function_type, normalizer_type> &", "normalized_function"},
      {"const oca_problem<matrix_type> &", "oca_problem"},
      {"const offset_kernel<T> &", "offset_kernel"},
      {"const OP", "OP"},
      {"const OP &", "OP"},
      {"const op_colm_symm_cache<M, cache_element_type> &", "op_colm_symm_cache"},
      {"const op_rowm_symm_cache<M, cache_element_type> &", "op_rowm_symm_cache"},
      {"const op_symm_cache<M, cache_element_type> &", "op_symm_cache"},
      {"const P &", "P"},
      {"const P2 &", "P2"},
      {"const parser_type &", "parser_type"},
      {"const parse_tree_element<T> &", "parse_tree_element"},
      {"const pixel_type &", "pixel_type"},
      {"const point_mapping_type &", "point_mapping_type"},
      {"const polynomial_kernel<T> &", "polynomial_kernel"},
      {"const probabilistic_decision_function<K> &", "probabilistic_decision_function"},
      {"const probabilistic_function<decision_function<K>> &", "probabilistic_function"},
      {"const probabilistic_function<function_type> &", "probabilistic_function"},
      {"const production_rule_function &", "production_rule_function"},
      {"const projection_function<K> &", "projection_function"},
      {"const pyramid_down<1> &", "pyramid_down"},
      {"const pyramid_down<2> &", "pyramid_down"},
      {"const pyramid_down<3> &", "pyramid_down"},
      {"const pyramid_down<N> &", "pyramid_down"},
      {"const pyramid_type &", "pyramid_type"},
      {"const radial_basis_kernel<T> &", "radial_basis_kernel"},
      {"const ramdump_t<const T> &", "ramdump_t"},
      {"const ramdump_t<matrix<T, NR, NC, mm, l>> &", "ramdump_t"},
      {"const random_subset_selector<sparse_vector_type, Rand_type> &", "random_subset_selector"},
      {"const random_subset_selector<T> &", "random_subset_selector"},
      {"const random_subset_selector<T1, T2> &", "random_subset_selector"},
      {"const range_set<T> &", "range_set"},
      {"const Rest &...", "Rest"},
      {"const RHS &", "RHS"},
      {"const RHS_ &", "RHS_"},
      {"const running_stats_decayed<T> &", "running_stats_decayed"},
      {"const running_stats_decayed<U> &", "running_stats_decayed"},
      {"const running_stats<U> &", "running_stats"},
      {"const S &", "S"},
      {"const sample_vector_type &", "sample_vector_type"},
      {"const scalar_type", "scalar_type"},
      {"const scalar_vector_type &", "scalar_vector_type"},
      {"const scalar_vector_type2 &", "scalar_vector_type2"},
      {"const sigmoid_kernel<T> &", "sigmoid_kernel"},
      {"const size_t", "size_t"},
      {"const size_t &", "size_t"},
      {"const sparse_histogram_intersection_kernel<T> &", "sparse_histogram_intersection_kernel"},
      {"const sparse_linear_kernel<T> &", "sparse_linear_kernel"},
      {"const sparse_polynomial_kernel<T> &", "sparse_polynomial_kernel"},
      {"const sparse_radial_basis_kernel<T> &", "sparse_radial_basis_kernel"},
      {"const sparse_sigmoid_kernel<T> &", "sparse_sigmoid_kernel"},
      {"const sparse_vector_type &", "sparse_vector_type"},
      {"const SRC &", "SRC"},
      {"const src_exp &", "src_exp"},
      {"const src_image_type &", "src_image_type"},
      {"const src_pixel_type &", "src_pixel_type"},
      {"const std_allocator<T, M> &", "std_allocator"},
      {"const std_allocator<U, M> &", "std_allocator"},
      {"const std::array<dpoint, 4> &", "std::array"},
      {"const std::array<line, 4> &", "std::array"},
      {"const std::array<T, 0> &", "std::array"},
      {"const std::array<T, N> &", "std::array"},
      {"const std::basic_string<char, traits, alloc> &", "std::basic_string"},
      {"const std::basic_string<charT, traits, alloc> &", "std::basic_string"},
      {"const std::basic_string<T, traits, alloc> &", "std::basic_string"},
      {"const std::chrono::nanoseconds", "std::chrono::nanoseconds"},
      {"const std::chrono::nanoseconds &", "std::chrono::nanoseconds"},
      {"const std::chrono::time_point<std::chrono::system_clock> &", "std::chrono::time_point"},
      {"const std::complex<T> &", "std::complex"},
      {"const std::complex<T> *", "std::complex"},
      {"const std::deque<T, alloc> &", "std::deque"},
      {"const std::exception &", "std::exception"},
      {"const std::filesystem::path &", "std::filesystem::path"},
      {"const std::forward_list<T, alloc> &", "std::forward_list"},
      {"const std::initializer_list<T> &", "std::initializer_list"},
      {"const std::list<T, alloc> &", "std::list"},
      {"const std::map<domain, range, compare, alloc> &", "std::map"},
      {"const std::map<T1, T2, T3, T4> &", "std::map"},
      {"const std::map<T3, T4, T5, T6> &", "std::map"},
      {"const std::map<T, U, comp, alloc> &", "std::map"},
      {"const std::map<unordered_pair<size_t>, matrix<T, NR, NC, MM, L>> &", "std::map"},
      {"const std::multimap<domain, range, compare, alloc> &", "std::multimap"},
      {"const std::multiset<domain, compare, alloc> &", "std::multiset"},
      {"const std::pair<double, double> &", "std::pair"},
      {"const std::pair<first_type, second_type> &", "std::pair"},
      {"const std::pair<T, bool> &", "std::pair"},
      {"const std::pair<T, T> &", "std::pair"},
      {"const std::pair<T, U> &", "std::pair"},
      {"const std::pair<uint32, uint32> &", "std::pair"},
      {"const std::pair<uint64, uint64> &", "std::pair"},
      {"const std::pair<vector<T, 2>, vector<T, 2>> &", "std::pair"},
      {"const std::set<domain, compare, alloc> &", "std::set"},
      {"const std::shared_ptr<gopt_impl::funct_info> &", "std::shared_ptr"},
      {"const std::shared_ptr<std::mutex> &", "std::shared_ptr"},
      {"const std::shared_ptr<T> &", "std::shared_ptr"},
      {"const std::size_t", "std::size_t"},
      {"const std::streamsize", "std::streamsize"},
      {"const std::string", "std::string"},
      {"const std::string &", "std::string"},
      {"const std::tuple<Tp...> &", "std::tuple"},
      {"const std::tuple<Types...> &", "std::tuple"},
      {"const std::unique_ptr<connection> &", "std::unique_ptr"},
      {"const std::unique_ptr<T, deleter> &", "std::unique_ptr"},
      {"const std::unordered_map<domain, range, hash, keyEqual, alloc> &", "std::unordered_map"},
      {"const std::unordered_multimap<domain, range, hash, keyEqual, alloc> &", "std::unordered_multimap"},
      {"const std::unordered_multiset<domain, hash, keyEqual, alloc> &", "std::unordered_multiset"},
      {"const std::unordered_set<domain, hash, keyEqual, alloc> &", "std::unordered_set"},
      {"const std::vector<bool> &", "std::vector"},
      {"const std::vector<bool, alloc> &", "std::vector"},
      {"const std::vector<char> &", "std::vector"},
      {"const std::vector<char, alloc> &", "std::vector"},
      {"const std::vector<clang::tooling::ArgumentsAdjuster> &", "std::vector"},
      {"const std::vector<compact_frobmetric_training_sample> &", "std::vector"},
      {"const std_vector_c<T, alloc> &", "std_vector_c"},
      {"const std_vector_c<value_type, alloc> &", "std_vector_c"},
      {"const std::vector<dlib::vector<double, 2>> &", "std::vector"},
      {"const std::vector<dlib::vector<T, 2>> &", "std::vector"},
      {"const std::vector<double> &", "std::vector"},
      {"const std::vector<frobmetric_training_sample<matrix_type>> &", "std::vector"},
      {"const std::vector<function_evaluation> &", "std::vector"},
      {"const std::vector<function_spec> &", "std::vector"},
      {"const std::vector<hdoc::types::FunctionParam>", "std::vector"},
      {"const std::vector<hostinfo> &", "std::vector"},
      {"const std::vector<long> &", "std::vector"},
      {"const std::vector<matrix<double, 0, 1>> &", "std::vector"},
      {"const std::vector<matrix<T, NR, NC, MM, L>> &", "std::vector"},
      {"const std::vector<matrix<T, NR, NR, MM, L>> &", "std::vector"},
      {"const std::vector<matrix_type> &", "std::vector"},
      {"const std::vector<network_address> &", "std::vector"},
      {"const std::vector<ordered_sample_pair> &", "std::vector"},
      {"const std::vector<ordered_sample_pair, alloc1> &", "std::vector"},
      {"const std::vector<parse_tree_element<T>> &", "std::vector"},
      {"const std::vector<point> &", "std::vector"},
      {"const std::vector<rectangle> &", "std::vector"},
      {"const std::vector<sample_pair> &", "std::vector"},
      {"const std::vector<sample_pair, alloc1> &", "std::vector"},
      {"const std::vector<sample_type> &", "std::vector"},
      {"const std::vector<sample_type, alloc> &", "std::vector"},
      {"const std::vector<scalar_type> &", "std::vector"},
      {"const std::vector<sequence_type> &", "std::vector"},
      {"const std::vector<sparse_vector_type> &", "std::vector"},
      {"const std::vector<std::complex<T>, Alloc> &", "std::vector"},
      {"const std::vector<std::pair<idx_type, value_type>, alloc> &", "std::vector"},
      {"const std::vector<std::pair<std::vector<lhs_type>, std::vector<rhs_type>>> &", "std::vector"},
      {"const std::vector<std::pair<T, U>, alloc> &", "std::vector"},
      {"const std::vector<std::string> &", "std::vector"},
      {"const std::vector<std::vector<double>> &", "std::vector"},
      {"const std::vector<std::vector<function_evaluation>> &", "std::vector"},
      {"const std::vector<std::vector<labeled_detection<detection_type, label_type>>> &", "std::vector"},
      {"const std::vector<std::vector<long>> &", "std::vector"},
      {"const std::vector<std::vector<std::pair<unsigned long, unsigned long>>> &", "std::vector"},
      {"const std::vector<std::vector<std::vector<labeled_detection<detection_type, label_type>>>> &", "std::vector"},
      {"const std::vector<std::vector<unsigned long>> &", "std::vector"},
      {"const std::vector<T> &", "std::vector"},
      {"const std::vector<T1, T2> &", "std::vector"},
      {"const std::vector<T, alloc> &", "std::vector"},
      {"const std::vector<T, Allocator> &", "std::vector"},
      {"const std::vector<typename EXP::type> &", "std::vector"},
      {"const std::vector<U> &", "std::vector"},
      {"const std::vector<unsigned char, alloc> &", "std::vector"},
      {"const std::vector<unsigned long> &", "std::vector"},
      {"const std::vector<value_type, alloc> &", "std::vector"},
      {"const std::vector<vector<T, 2>> &", "std::vector"},
      {"const std::wstring &", "std::wstring"},
      {"const String &", "String"},
      {"const sub_image_proxy<T> &", "sub_image_proxy"},
      {"const T", "T"},
      {"const T &", "T"},
      {"const T *", "T"},
      {"const timer_heavy<T> &", "timer_heavy"},
      {"const timer<T> &", "timer"},
      {"const T (&)[length]", "T"},
      {"const trainer_type", "trainer_type"},
      {"const trainer_type &", "trainer_type"},
      {"const type &", "type"},
      {"const U", "U"},
      {"const U &", "U"},
      {"const uint16_t", "uint16_t"},
      {"const uint64_t &", "uint64_t"},
      {"const UIntType", "UIntType"},
      {"const unordered_pair<T> &", "unordered_pair"},
      {"const unordered_pair<U> &", "unordered_pair"},
      {"const unsigned char", "unsigned char"},
      {"const unsigned char &", "unsigned char"},
      {"const unsigned char *", "unsigned char"},
      {"const unsigned int", "unsigned int"},
      {"const unsigned int &", "unsigned int"},
      {"const unsigned long", "unsigned long"},
      {"const unsigned short", "unsigned short"},
      {"const V &", "V"},
      {"const V1 &", "V1"},
      {"const V2 &", "V2"},
      {"const vector<double> &", "vector"},
      {"const vector<double, 3> &", "vector"},
      {"const vector_normalizer<dlib::normalized_function::sample_type> &", "vector_normalizer"},
      {"const vector_normalizer_frobmetric<matrix_type> &", "vector_normalizer_frobmetric"},
      {"const vector_normalizer_frobmetric<mt> &", "vector_normalizer_frobmetric"},
      {"const vector_normalizer<matrix_type> &", "vector_normalizer"},
      {"const vector_normalizer<mt> &", "vector_normalizer"},
      {"const vector_normalizer_pca<matrix_type> &", "vector_normalizer_pca"},
      {"const vector_normalizer_pca<T> &", "vector_normalizer_pca"},
      {"const vector<T, 2> &", "vector"},
      {"const vector<T, 3> &", "vector"},
      {"const vector_type &", "vector_type"},
      {"const vector<U, 2> &", "vector"},
      {"const vector<U, NR> &", "vector"},
      {"const vect_type &", "vect_type"},
      {"const vect_type1 &", "vect_type1"},
      {"const vect_type2 &", "vect_type2"},
      {"const void *", "void"},
      {"const W &", "W"},
      {"const wchar_t", "wchar_t"},
      {"const wchar_t *", "wchar_t"},
      {"cpu::pooling", "cpu::pooling"},
      {"cpu::tensor_conv", "cpu::tensor_conv"},
      {"Database<hdoc::types::EnumSymbol>", "Database"},
      {"Database<hdoc::types::FunctionSymbol>", "Database"},
      {"Database<hdoc::types::NamespaceSymbol>", "Database"},
      {"Database<hdoc::types::RecordSymbol>", "Database"},
      {"decision_function<K>", "decision_function"},
      {"decision_function<K> &", "decision_function"},
      {"DEST &", "DEST"},
      {"dest_exp &", "dest_exp"},
      {"dest_image_type &", "dest_image_type"},
      {"discriminant_pca<matrix_type> &", "discriminant_pca"},
      {"distance_function<K> &", "distance_function"},
      {"dlib::alias_tensor &", "dlib::alias_tensor"},
      {"dlib::alias_tensor_instance", "dlib::alias_tensor_instance"},
      {"dlib::any", "dlib::any"},
      {"dlib::any &", "dlib::any"},
      {"dlib::any *", "dlib::any"},
      {"dlib::assign_pixel_helpers::COLOUR", "dlib::assign_pixel_helpers::COLOUR"},
      {"dlib::assign_pixel_helpers::HSL", "dlib::assign_pixel_helpers::HSL"},
      {"dlib::assign_pixel_helpers::Lab", "dlib::assign_pixel_helpers::Lab"},
      {"dlib::auto_mutex &", "dlib::auto_mutex"},
      {"dlib::auto_mutex_readonly &", "dlib::auto_mutex_readonly"},
      {"dlib::auto_unlock &", "dlib::auto_unlock"},
      {"dlib::auto_unlock_readonly &", "dlib::auto_unlock_readonly"},
      {"dlib::base64 &", "dlib::base64"},
      {"dlib::base64::line_ending_type", "dlib::base64::line_ending_type"},
      {"dlib::bdf_font &", "dlib::bdf_font"},
      {"dlib::bdf_font_helpers::bdf_parser::char_info &", "dlib::bdf_font_helpers::bdf_parser::char_info"},
      {"dlib::bdf_font_helpers::bdf_parser::header_info &", "dlib::bdf_font_helpers::bdf_parser::header_info"},
      {"dlib::bgr_pixel &", "dlib::bgr_pixel"},
      {"dlib::bigint_kernel_1 &", "dlib::bigint_kernel_1"},
      {"dlib::bigint_kernel_1::data_record &", "dlib::bigint_kernel_1::data_record"},
      {"dlib::bigint_kernel_1::data_record *", "dlib::bigint_kernel_1::data_record"},
      {"dlib::bigint_kernel_2 &", "dlib::bigint_kernel_2"},
      {"dlib::bigint_kernel_2::ct *", "dlib::bigint_kernel_2::ct"},
      {"dlib::bigint_kernel_2::data_record &", "dlib::bigint_kernel_2::data_record"},
      {"dlib::bigint_kernel_2::data_record *", "dlib::bigint_kernel_2::data_record"},
      {"dlib::binary_search_tree_kernel_1::mpair", "dlib::binary_search_tree_kernel_1::mpair"},
      {"dlib::binary_search_tree_kernel_1::node *", "dlib::binary_search_tree_kernel_1::node"},
      {"dlib::binary_search_tree_kernel_1::node *&", "dlib::binary_search_tree_kernel_1::node"},
      {"dlib::binary_search_tree_kernel_1::node **", "dlib::binary_search_tree_kernel_1::node"},
      {"dlib::binary_search_tree_kernel_2::mpair", "dlib::binary_search_tree_kernel_2::mpair"},
      {"dlib::binary_search_tree_kernel_2::node *", "dlib::binary_search_tree_kernel_2::node"},
      {"dlib::binary_search_tree_kernel_c::domain &", "dlib::binary_search_tree_kernel_c::domain"},
      {"dlib::binary_search_tree_kernel_c::range &", "dlib::binary_search_tree_kernel_c::range"},
      {"dlib::bit_stream_kernel_1 &", "dlib::bit_stream_kernel_1"},
      {"dlib::blas_bindings::CBLAS_SIDE", "dlib::blas_bindings::CBLAS_SIDE"},
      {"dlib::blas_bindings::CBLAS_UPLO", "dlib::blas_bindings::CBLAS_UPLO"},
      {"dlib::blas_bindings::yes_type", "dlib::blas_bindings::yes_type"},
      {"dlib::bobyqa_implementation::doublereal &", "dlib::bobyqa_implementation::doublereal"},
      {"dlib::bobyqa_implementation::doublereal *", "dlib::bobyqa_implementation::doublereal"},
      {"dlib::bobyqa_implementation::integer &", "dlib::bobyqa_implementation::integer"},
      {"dlib::border_enumerator::emode", "dlib::border_enumerator::emode"},
      {"dlib::bound_function_pointer &", "dlib::bound_function_pointer"},
      {"dlib::camera_transform &", "dlib::camera_transform"},
      {"dlib::cholesky_decomposition::matrix_type", "dlib::cholesky_decomposition::matrix_type"},
      {"dlib::conditioning_class_kernel_1::global_state_type &",
       "dlib::conditioning_class_kernel_1::global_state_type"},
      {"dlib::conditioning_class_kernel_2::data *", "dlib::conditioning_class_kernel_2::data"},
      {"dlib::conditioning_class_kernel_2::global_state_type &",
       "dlib::conditioning_class_kernel_2::global_state_type"},
      {"dlib::conditioning_class_kernel_3::data *", "dlib::conditioning_class_kernel_3::data"},
      {"dlib::conditioning_class_kernel_3::global_state_type &",
       "dlib::conditioning_class_kernel_3::global_state_type"},
      {"dlib::conditioning_class_kernel_4::global_state_type &",
       "dlib::conditioning_class_kernel_4::global_state_type"},
      {"dlib::conditioning_class_kernel_4::node *", "dlib::conditioning_class_kernel_4::node"},
      {"dlib::connection &", "dlib::connection"},
      {"dlib::connection *", "dlib::connection"},
      {"dlib::connection *&", "dlib::connection"},
      {"dlib::console_progress_indicator", "dlib::console_progress_indicator"},
      {"dlib::crc32 &", "dlib::crc32"},
      {"dlib::decision_function::sample_vector_type", "dlib::decision_function::sample_vector_type"},
      {"dlib::decision_function::scalar_type", "dlib::decision_function::scalar_type"},
      {"dlib::decision_function::scalar_vector_type", "dlib::decision_function::scalar_vector_type"},
      {"dlib::default_font &", "dlib::default_font"},
      {"dlib::directory &", "dlib::directory"},
      {"dlib::directory::data", "dlib::directory::data"},
      {"dlib::directory::private_constructor", "dlib::directory::private_constructor"},
      {"dlib::discriminant_pca::column_matrix", "dlib::discriminant_pca::column_matrix"},
      {"dlib::discriminant_pca::general_matrix", "dlib::discriminant_pca::general_matrix"},
      {"dlib::discriminant_pca::general_matrix &", "dlib::discriminant_pca::general_matrix"},
      {"dlib::discriminant_pca::scalar_type", "dlib::discriminant_pca::scalar_type"},
      {"dlib::distance_function::sample_vector_type", "dlib::distance_function::sample_vector_type"},
      {"dlib::distance_function::scalar_type", "dlib::distance_function::scalar_type"},
      {"dlib::distance_function::scalar_vector_type", "dlib::distance_function::scalar_vector_type"},
      {"dlib::document_handler &", "dlib::document_handler"},
      {"dlib::dpoint", "dlib::dpoint"},
      {"dlib::drectangle", "dlib::drectangle"},
      {"dlib::drectangle &", "dlib::drectangle"},
      {"dlib::edmk4::node *", "dlib::edmk4::node"},
      {"dlib::edmk5::node *", "dlib::edmk5::node"},
      {"dlib::eemk4::node *", "dlib::eemk4::node"},
      {"dlib::eemk5::node *", "dlib::eemk5::node"},
      {"dlib::eigenvalue_decomposition::column_vector_type", "dlib::eigenvalue_decomposition::column_vector_type"},
      {"dlib::eigenvalue_decomposition::matrix_type", "dlib::eigenvalue_decomposition::matrix_type"},
      {"dlib::eigenvalue_decomposition::type", "dlib::eigenvalue_decomposition::type"},
      {"dlib::entropy_decoder_kernel_1 &", "dlib::entropy_decoder_kernel_1"},
      {"dlib::entropy_decoder_kernel_2 &", "dlib::entropy_decoder_kernel_2"},
      {"dlib::entropy_decoder_model_kernel_4::node *", "dlib::entropy_decoder_model_kernel_4::node"},
      {"dlib::entropy_decoder_model_kernel_4::node *[order + 1]", "dlib::entropy_decoder_model_kernel_4::node"},
      {"dlib::entropy_decoder_model_kernel_5::node *", "dlib::entropy_decoder_model_kernel_5::node"},
      {"dlib::entropy_decoder_model_kernel_5::node *&", "dlib::entropy_decoder_model_kernel_5::node"},
      {"dlib::entropy_decoder_model_kernel_5::nodes [order + 1]", "dlib::entropy_decoder_model_kernel_5::nodes"},
      {"dlib::entropy_encoder_kernel_1 &", "dlib::entropy_encoder_kernel_1"},
      {"dlib::entropy_encoder_kernel_2 &", "dlib::entropy_encoder_kernel_2"},
      {"dlib::entropy_encoder_model_kernel_4::node *", "dlib::entropy_encoder_model_kernel_4::node"},
      {"dlib::entropy_encoder_model_kernel_5::node *", "dlib::entropy_encoder_model_kernel_5::node"},
      {"dlib::entropy_encoder_model_kernel_5::node *&", "dlib::entropy_encoder_model_kernel_5::node"},
      {"dlib::entropy_encoder_model_kernel_5::nodes [order + 1]", "dlib::entropy_encoder_model_kernel_5::nodes"},
      {"dlib::entropy_encoder_model_kernel_c::entropy_encoder &",
       "dlib::entropy_encoder_model_kernel_c::entropy_encoder"},
      {"dlib::error_handler &", "dlib::error_handler"},
      {"dlib::error_type", "dlib::error_type"},
      {"dlib::fft_size", "dlib::fft_size"},
      {"dlib::fft_size::container_type", "dlib::fft_size::container_type"},
      {"dlib::file &", "dlib::file"},
      {"dlib::file::data", "dlib::file::data"},
      {"dlib::file::private_constructor", "dlib::file::private_constructor"},
      {"dlib::float_details &", "dlib::float_details"},
      {"dlib::full_object_detection &", "dlib::full_object_detection"},
      {"dlib::function_evaluation_request &", "dlib::function_evaluation_request"},
      {"dlib::function_evaluation_request &&", "dlib::function_evaluation_request"},
      {"dlib::function_spec", "dlib::function_spec"},
      {"dlib::general_", "dlib::general_"},
      {"dlib::global_function_search &&", "dlib::global_function_search"},
      {"dlib::gpu_data", "dlib::gpu_data"},
      {"dlib::gpu_data &", "dlib::gpu_data"},
      {"dlib::gpu_data &&", "dlib::gpu_data"},
      {"dlib::gpu_data *", "dlib::gpu_data"},
      {"dlib::hsi_pixel &", "dlib::hsi_pixel"},
      {"dlib::image_dataset_metadata::box", "dlib::image_dataset_metadata::box"},
      {"dlib::image_dataset_metadata::dataset &", "dlib::image_dataset_metadata::dataset"},
      {"dlib::image_dataset_metadata::gender_t", "dlib::image_dataset_metadata::gender_t"},
      {"dlib::image_dataset_metadata::image", "dlib::image_dataset_metadata::image"},
      {"dlib::impl1::hostinfo &", "dlib::impl1::hostinfo"},
      {"dlib::impl1::map_id_to_con &", "dlib::impl1::map_id_to_con"},
      {"dlib::impl1::msg_data", "dlib::impl1::msg_data"},
      {"dlib::impl1::msg_data &", "dlib::impl1::msg_data"},
      {"dlib::incoming_things &", "dlib::incoming_things"},
      {"dlib::int16", "dlib::int16"},
      {"dlib::int32", "dlib::int32"},
      {"dlib::int64", "dlib::int64"},
      {"dlib::int8", "dlib::int8"},
      {"dlib::interpolate_bilinear", "dlib::interpolate_bilinear"},
      {"dlib::is_convertible::yes_type [2]", "dlib::is_convertible::yes_type"},
      {"dlib::key_value_map", "dlib::key_value_map"},
      {"dlib::key_value_map &", "dlib::key_value_map"},
      {"dlib::key_value_map_ci", "dlib::key_value_map_ci"},
      {"dlib::labeled_detection::detection_type", "dlib::labeled_detection::detection_type"},
      {"dlib::labeled_detection::label_type", "dlib::labeled_detection::label_type"},
      {"dlib::lab_pixel &", "dlib::lab_pixel"},
      {"dlib::lbfgs_search_strategy::data_helper", "dlib::lbfgs_search_strategy::data_helper"},
      {"dlib::lbfgs_search_strategy::data_helper &", "dlib::lbfgs_search_strategy::data_helper"},
      {"dlib::least_squares_function_model::column_vector", "dlib::least_squares_function_model::column_vector"},
      {"dlib::least_squares_function_model::column_vector &", "dlib::least_squares_function_model::column_vector"},
      {"dlib::least_squares_function_model::general_matrix", "dlib::least_squares_function_model::general_matrix"},
      {"dlib::least_squares_function_model::general_matrix &", "dlib::least_squares_function_model::general_matrix"},
      {"dlib::least_squares_function_model::type", "dlib::least_squares_function_model::type"},
      {"dlib::least_squares_lm_function_model::column_vector", "dlib::least_squares_lm_function_model::column_vector"},
      {"dlib::least_squares_lm_function_model::column_vector &",
       "dlib::least_squares_lm_function_model::column_vector"},
      {"dlib::least_squares_lm_function_model::general_matrix &",
       "dlib::least_squares_lm_function_model::general_matrix"},
      {"dlib::letter &", "dlib::letter"},
      {"dlib::letter *", "dlib::letter"},
      {"dlib::letter::point *", "dlib::letter::point"},
      {"dlib::line", "dlib::line"},
      {"dlib::linker &", "dlib::linker"},
      {"dlib::listener &", "dlib::listener"},
      {"dlib::listener *&", "dlib::listener"},
      {"dlib::logger &", "dlib::logger"},
      {"dlib::logger::global_data &", "dlib::logger::global_data"},
      {"dlib::logger::global_data::hook_streambuf", "dlib::logger::global_data::hook_streambuf"},
      {"dlib::logger::hook_mfp", "dlib::logger::hook_mfp"},
      {"dlib::log_level", "dlib::log_level"},
      {"dlib::lu_decomposition::pivot_column_vector_type", "dlib::lu_decomposition::pivot_column_vector_type"},
      {"dlib::lz77_buffer_kernel_2::node *", "dlib::lz77_buffer_kernel_2::node"},
      {"dlib::lz77_buffer_kernel_2::node **", "dlib::lz77_buffer_kernel_2::node"},
      {"dlib::map_kernel_c::domain &", "dlib::map_kernel_c::domain"},
      {"dlib::map_kernel_c::range &", "dlib::map_kernel_c::range"},
      {"dlib::matrix_mul_scal_exp::M_ref_type", "dlib::matrix_mul_scal_exp::M_ref_type"},
      {"dlib::matrix_multiply_exp::LHS_ref_type", "dlib::matrix_multiply_exp::LHS_ref_type"},
      {"dlib::matrix_multiply_exp::RHS_ref_type", "dlib::matrix_multiply_exp::RHS_ref_type"},
      {"dlib::member_function_pointer::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer::mp_impl_const::mfp_pointer_type"},
      {"dlib::member_function_pointer<>::mp_impl_const::mfp_pointer_type", "dlib::member_function_pointer"},
      {"dlib::member_function_pointer::mp_impl::mfp_pointer_type",
       "dlib::member_function_pointer::mp_impl::mfp_pointer_type"},
      {"dlib::member_function_pointer<>::mp_impl::mfp_pointer_type", "dlib::member_function_pointer"},
      {"dlib::member_function_pointer<type-parameter-0-0>::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"dlib::member_function_pointer<type-parameter-0-0>::mp_impl::mfp_pointer_type", "dlib::member_function_pointer"},
      {"dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1>::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1>::mp_impl::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2>::mp_impl_const::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"dlib::member_function_pointer<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2>::mp_impl::mfp_pointer_type",
       "dlib::member_function_pointer"},
      {"dlib::memory_manager_kernel_1::node *", "dlib::memory_manager_kernel_1::node"},
      {"dlib::memory_manager_kernel_2::chunk_node *", "dlib::memory_manager_kernel_2::chunk_node"},
      {"dlib::memory_manager_kernel_2::node *", "dlib::memory_manager_kernel_2::node"},
      {"dlib::memory_manager_kernel_3::bst_of_arrays *", "dlib::memory_manager_kernel_3::bst_of_arrays"},
      {"dlib::memory_manager_kernel_3::chunk_node *", "dlib::memory_manager_kernel_3::chunk_node"},
      {"dlib::memory_manager_kernel_3::node *", "dlib::memory_manager_kernel_3::node"},
      {"dlib::mfp_kernel_1_base_class<0>::mfp_type", "dlib::mfp_kernel_1_base_class"},
      {"dlib::mfp_kernel_1_base_class<1>::mfp_type", "dlib::mfp_kernel_1_base_class"},
      {"dlib::mfp_kernel_1_base_class<2>::mfp_type", "dlib::mfp_kernel_1_base_class"},
      {"dlib::mfp_kernel_1_base_class<3>::mfp_type", "dlib::mfp_kernel_1_base_class"},
      {"dlib::mfp_kernel_1_base_class<4>::mfp_type", "dlib::mfp_kernel_1_base_class"},
      {"dlib::mfp_kernel_1_base_class::mfp_type", "dlib::mfp_kernel_1_base_class::mfp_type"},
      {"dlib::mfp_kernel_1_base_class::mp_impl_T::mfp_pointer_type",
       "dlib::mfp_kernel_1_base_class::mp_impl_T::mfp_pointer_type"},
      {"dlib::mfp_kernel_1_base_class::mp_null::mfp_pointer_type",
       "dlib::mfp_kernel_1_base_class::mp_null::mfp_pointer_type"},
      {"dlib::mmod_rect", "dlib::mmod_rect"},
      {"dlib::mmod_rect &", "dlib::mmod_rect"},
      {"dlib::momentum_filter", "dlib::momentum_filter"},
      {"dlib::momentum_filter &", "dlib::momentum_filter"},
      {"dlib::mt19937", "dlib::mt19937"},
      {"dlib::multiclass_linear_decision_function::scalar_matrix_type",
       "dlib::multiclass_linear_decision_function::scalar_matrix_type"},
      {"dlib::multiclass_linear_decision_function::scalar_vector_type",
       "dlib::multiclass_linear_decision_function::scalar_vector_type"},
      {"dlib::multithreaded_object &", "dlib::multithreaded_object"},
      {"dlib::mutex", "dlib::mutex"},
      {"dlib::mutex &", "dlib::mutex"},
      {"dlib::network_address", "dlib::network_address"},
      {"dlib::network_address &", "dlib::network_address"},
      {"dlib::oca_problem::scalar_type", "dlib::oca_problem::scalar_type"},
      {"dlib::oca_problem::scalar_type &", "dlib::oca_problem::scalar_type"},
      {"dlib::ordered_sample_pair &", "dlib::ordered_sample_pair"},
      {"dlib::outgoing_things", "dlib::outgoing_things"},
      {"dlib::outgoing_things &", "dlib::outgoing_things"},
      {"dlib::point", "dlib::point"},
      {"dlib::point &", "dlib::point"},
      {"dlib::point_rotator &", "dlib::point_rotator"},
      {"dlib::point_transform &", "dlib::point_transform"},
      {"dlib::point_transform_affine", "dlib::point_transform_affine"},
      {"dlib::point_transform_affine &", "dlib::point_transform_affine"},
      {"dlib::point_transform_affine3d &", "dlib::point_transform_affine3d"},
      {"dlib::point_transform_projective &", "dlib::point_transform_projective"},
      {"dlib::print_header_type", "dlib::print_header_type"},
      {"dlib::probabilistic_decision_function::scalar_type", "dlib::probabilistic_decision_function::scalar_type"},
      {"dlib::probabilistic_function::scalar_type", "dlib::probabilistic_function::scalar_type"},
      {"dlib::projection_function::result_type", "dlib::projection_function::result_type"},
      {"dlib::projection_function::sample_vector_type", "dlib::projection_function::sample_vector_type"},
      {"dlib::projection_function::scalar_matrix_type", "dlib::projection_function::scalar_matrix_type"},
      {"dlib::qr_decomposition::column_vector_type", "dlib::qr_decomposition::column_vector_type"},
      {"dlib::queue_kernel_1::node *", "dlib::queue_kernel_1::node"},
      {"dlib::queue_kernel_2::node *", "dlib::queue_kernel_2::node"},
      {"dlib::queue_kernel_c::T &", "dlib::queue_kernel_c::T"},
      {"dlib::rand", "dlib::rand"},
      {"dlib::rand &", "dlib::rand"},
      {"dlib::random_subset_selector::rand_type", "dlib::random_subset_selector::rand_type"},
      {"dlib::read_write_mutex &", "dlib::read_write_mutex"},
      {"dlib::rectangle", "dlib::rectangle"},
      {"dlib::rectangle &", "dlib::rectangle"},
      {"dlib::rectangle_transform &", "dlib::rectangle_transform"},
      {"dlib::rect_filter &", "dlib::rect_filter"},
      {"dlib::resizable_tensor", "dlib::resizable_tensor"},
      {"dlib::resizable_tensor &", "dlib::resizable_tensor"},
      {"dlib::resizable_tensor &&", "dlib::resizable_tensor"},
      {"dlib::rgb_alpha_pixel &", "dlib::rgb_alpha_pixel"},
      {"dlib::rgb_pixel &", "dlib::rgb_pixel"},
      {"dlib::rmutex", "dlib::rmutex"},
      {"dlib::rmutex &", "dlib::rmutex"},
      {"dlib::rmutex *", "dlib::rmutex"},
      {"dlib::rsignaler", "dlib::rsignaler"},
      {"dlib::rsignaler &", "dlib::rsignaler"},
      {"dlib::running_covariance::column_matrix", "dlib::running_covariance::column_matrix"},
      {"dlib::running_covariance::general_matrix", "dlib::running_covariance::general_matrix"},
      {"dlib::running_covariance::scalar_type", "dlib::running_covariance::scalar_type"},
      {"dlib::running_cross_covariance::column_matrix", "dlib::running_cross_covariance::column_matrix"},
      {"dlib::running_cross_covariance::general_matrix", "dlib::running_cross_covariance::general_matrix"},
      {"dlib::running_cross_covariance::scalar_type", "dlib::running_cross_covariance::scalar_type"},
      {"dlib::sample_pair &", "dlib::sample_pair"},
      {"dlib::sequence_kernel_1::node *", "dlib::sequence_kernel_1::node"},
      {"dlib::sequence_kernel_1::node *&", "dlib::sequence_kernel_1::node"},
      {"dlib::sequence_kernel_1::node **", "dlib::sequence_kernel_1::node"},
      {"dlib::sequence_kernel_2::node *", "dlib::sequence_kernel_2::node"},
      {"dlib::sequence_kernel_2::node *&", "dlib::sequence_kernel_2::node"},
      {"dlib::sequence_kernel_c::T &", "dlib::sequence_kernel_c::T"},
      {"dlib::server &", "dlib::server"},
      {"dlib::server_iostream::id_map", "dlib::server_iostream::id_map"},
      {"dlib::server::set_of_connections", "dlib::server::set_of_connections"},
      {"dlib::set_kernel_c::T &", "dlib::set_kernel_c::T"},
      {"dlib::signaler", "dlib::signaler"},
      {"dlib::signaler &", "dlib::signaler"},
      {"dlib::simd4f", "dlib::simd4f"},
      {"dlib::simd4f_bool", "dlib::simd4f_bool"},
      {"dlib::simd4f::type *", "dlib::simd4f::type"},
      {"dlib::simd4i", "dlib::simd4i"},
      {"dlib::simd4i::type *", "dlib::simd4i::type"},
      {"dlib::simd8f::type *", "dlib::simd8f::type"},
      {"dlib::simd8i::type *", "dlib::simd8i::type"},
      {"dlib::sockstreambuf", "dlib::sockstreambuf"},
      {"dlib::solve_qp2_using_smo::column_matrix", "dlib::solve_qp2_using_smo::column_matrix"},
      {"dlib::solve_qp3_using_smo::column_matrix", "dlib::solve_qp3_using_smo::column_matrix"},
      {"dlib::special_", "dlib::special_"},
      {"dlib::stack_kernel_1::node *", "dlib::stack_kernel_1::node"},
      {"dlib::stack_kernel_1::node *&", "dlib::stack_kernel_1::node"},
      {"dlib::stack_kernel_c::T &", "dlib::stack_kernel_c::T"},
      {"dlib::std_allocator::const_reference", "dlib::std_allocator::const_reference"},
      {"dlib::std_allocator::pointer", "dlib::std_allocator::pointer"},
      {"dlib::std_allocator::reference", "dlib::std_allocator::reference"},
      {"dlib::std_allocator::size_type", "dlib::std_allocator::size_type"},
      {"dlib::std_vector_c::iterator", "dlib::std_vector_c::iterator"},
      {"dlib::std_vector_c::size_type", "dlib::std_vector_c::size_type"},
      {"dlib::stop_condition", "dlib::stop_condition"},
      {"dlib::svd_u_mode", "dlib::svd_u_mode"},
      {"dlib::svm_c_linear_dcd_trainer::optimizer_state &", "dlib::svm_c_linear_dcd_trainer::optimizer_state"},
      {"dlib::svm_c_linear_dcd_trainer::scalar_type", "dlib::svm_c_linear_dcd_trainer::scalar_type"},
      {"dlib::svm_c_linear_dcd_trainer::scalar_vector_type", "dlib::svm_c_linear_dcd_trainer::scalar_vector_type"},
      {"dlib::svm_c_trainer::kernel_type", "dlib::svm_c_trainer::kernel_type"},
      {"dlib::svm_c_trainer::scalar_type", "dlib::svm_c_trainer::scalar_type"},
      {"dlib::svm_c_trainer::scalar_type &", "dlib::svm_c_trainer::scalar_type"},
      {"dlib::svm_nu_trainer::kernel_type", "dlib::svm_nu_trainer::kernel_type"},
      {"dlib::svm_nu_trainer::scalar_type", "dlib::svm_nu_trainer::scalar_type"},
      {"dlib::tensor &", "dlib::tensor"},
      {"dlib::threaded_object &", "dlib::threaded_object"},
      {"dlib::thread_function &", "dlib::thread_function"},
      {"dlib::thread_id_type", "dlib::thread_id_type"},
      {"dlib::thread_pool &", "dlib::thread_pool"},
      {"dlib::thread_pool_implementation &", "dlib::thread_pool_implementation"},
      {"dlib::thread_pool_implementation::bfp_type", "dlib::thread_pool_implementation::bfp_type"},
      {"dlib::threads_kernel_shared::threader &", "dlib::threads_kernel_shared::threader"},
      {"dlib::threads_kernel_shared::threader::registry_type", "dlib::threads_kernel_shared::threader::registry_type"},
      {"dlib::timeout::bind *", "dlib::timeout::bind"},
      {"dlib::timer::af_type", "dlib::timer::af_type"},
      {"dlib::timer_base *", "dlib::timer_base"},
      {"dlib::timer_global_clock::time_map", "dlib::timer_global_clock::time_map"},
      {"dlib::timer_heavy::af_type", "dlib::timer_heavy::af_type"},
      {"dlib::timer<timeout>", "dlib::timer"},
      {"dlib::timestamper", "dlib::timestamper"},
      {"dlib::tokenizer_kernel_1 &", "dlib::tokenizer_kernel_1"},
      {"dlib::uint16", "dlib::uint16"},
      {"dlib::uint16 &", "dlib::uint16"},
      {"dlib::uint16 *", "dlib::uint16"},
      {"dlib::uint32", "dlib::uint32"},
      {"dlib::uint32 &", "dlib::uint32"},
      {"dlib::uint32 *", "dlib::uint32"},
      {"dlib::uint64", "dlib::uint64"},
      {"dlib::unichar", "dlib::unichar"},
      {"dlib::unichar &", "dlib::unichar"},
      {"dlib::unserialize::mystreambuf", "dlib::unserialize::mystreambuf"},
      {"dlib::unserialize::mystreambuf::size_type", "dlib::unserialize::mystreambuf::size_type"},
      {"dlib::upper_bound_function", "dlib::upper_bound_function"},
      {"dlib::ustring &", "dlib::ustring"},
      {"dlib::vector<double, 2>", "dlib::vector"},
      {"dlib::vector<double, 3>", "dlib::vector"},
      {"dlib::vector_normalizer_pca::result_type", "dlib::vector_normalizer_pca::result_type"},
      {"dlib::vectorstream &&", "dlib::vectorstream"},
      {"dlib::vectorstream::vector_streambuf::size_type", "dlib::vectorstream::vector_streambuf::size_type"},
      {"dlib::vector<T, 2> &", "dlib::vector"},
      {"dlib::xml_parser &", "dlib::xml_parser"},
      {"dlib::xml_parser::attrib_list &", "dlib::xml_parser::attrib_list"},
      {"dlib::xml_parser::map", "dlib::xml_parser::map"},
      {"dlib::xml_parser::seq_dh", "dlib::xml_parser::seq_dh"},
      {"dlib::xml_parser::seq_eh", "dlib::xml_parser::seq_eh"},
      {"domain", "domain"},
      {"domain &", "domain"},
      {"double", "double"},
      {"double &", "double"},
      {"double *", "double"},
      {"edmk4::node *", "edmk4::node"},
      {"entropy_decoder &", "entropy_decoder"},
      {"entropy_decoder_model_kernel_1<alphabet_size, entropy_decoder, cc> &", "entropy_decoder_model_kernel_1"},
      {"entropy_decoder_model_kernel_2<alphabet_size, entropy_decoder, cc, ccbig> &", "entropy_decoder_model_kernel_2"},
      {"entropy_decoder_model_kernel_3<alphabet_size, entropy_decoder, cc, cc_high> &",
       "entropy_decoder_model_kernel_3"},
      {"entropy_decoder_model_kernel_4<alphabet_size, entropy_decoder, total_nodes, order> &",
       "entropy_decoder_model_kernel_4"},
      {"entropy_decoder_model_kernel_5<alphabet_size, entropy_decoder, total_nodes, order> &",
       "entropy_decoder_model_kernel_5"},
      {"entropy_decoder_model_kernel_6<alphabet_size, entropy_decoder> &", "entropy_decoder_model_kernel_6"},
      {"entropy_encoder &", "entropy_encoder"},
      {"entropy_encoder_model_kernel_1<alphabet_size, entropy_encoder, cc> &", "entropy_encoder_model_kernel_1"},
      {"entropy_encoder_model_kernel_2<alphabet_size, entropy_encoder, cc, ccbig> &", "entropy_encoder_model_kernel_2"},
      {"entropy_encoder_model_kernel_3<alphabet_size, entropy_encoder, cc, cc_high> &",
       "entropy_encoder_model_kernel_3"},
      {"entropy_encoder_model_kernel_4<alphabet_size, entropy_encoder, total_nodes, order> &",
       "entropy_encoder_model_kernel_4"},
      {"entropy_encoder_model_kernel_5<alphabet_size, entropy_encoder, total_nodes, order> &",
       "entropy_encoder_model_kernel_5"},
      {"entropy_encoder_model_kernel_6<alphabet_size, entropy_encoder> &", "entropy_encoder_model_kernel_6"},
      {"EXP1 &", "EXP1"},
      {"F", "F"},
      {"F &", "F"},
      {"FILE *", "FILE"},
      {"float", "float"},
      {"float &", "float"},
      {"float *", "float"},
      {"frobmetric_training_sample<matrix_type> &", "frobmetric_training_sample"},
      {"funct", "funct"},
      {"Funct &&", "Funct"},
      {"FuncT", "FuncT"},
      {"Function &&", "Function"},
      {"function_type", "function_type"},
      {"funct_type", "funct_type"},
      {"future<A1> &", "future"},
      {"future<A2> &", "future"},
      {"future<A3> &", "future"},
      {"future<A4> &", "future"},
      {"future<T> &", "future"},
      {"gopt_impl::outstanding_function_eval_request", "gopt_impl::outstanding_function_eval_request"},
      {"hdoc::types::Config &", "hdoc::types::Config"},
      {"hdoc::types::Config *", "hdoc::types::Config"},
      {"hdoc::types::EnumSymbol &", "hdoc::types::EnumSymbol"},
      {"hdoc::types::FunctionSymbol &", "hdoc::types::FunctionSymbol"},
      {"hdoc::types::Index", "hdoc::types::Index"},
      {"hdoc::types::Index &", "hdoc::types::Index"},
      {"hdoc::types::Index *", "hdoc::types::Index"},
      {"hdoc::types::RecordSymbol &", "hdoc::types::RecordSymbol"},
      {"hdoc::types::Symbol &", "hdoc::types::Symbol"},
      {"hdoc::types::SymbolID", "hdoc::types::SymbolID"},
      {"hdoc::types::TypeRef", "hdoc::types::TypeRef"},
      {"hessian_funct", "hessian_funct"},
      {"histogram_intersection_kernel<T> &", "histogram_intersection_kernel"},
      {"image_array_type &", "image_array_type"},
      {"image_type &", "image_type"},
      {"image_type *", "image_type"},
      {"image_type1 &", "image_type1"},
      {"image_type2 &", "image_type2"},
      {"image_view<dest_image_type> &", "image_view"},
      {"image_view<image_type> &", "image_view"},
      {"image_view<T> &", "image_view"},
      {"impl1::bsp_con *", "impl1::bsp_con"},
      {"impl1::map_id_to_con &", "impl1::map_id_to_con"},
      {"impl1::thread_safe_message_queue", "impl1::thread_safe_message_queue"},
      {"impl1::thread_safe_message_queue &", "impl1::thread_safe_message_queue"},
      {"InputIterator", "InputIterator"},
      {"int", "int"},
      {"int &", "int"},
      {"int *", "int"},
      {"int64_t", "int64_t"},
      {"iterator", "iterator"},
      {"j_common_ptr", "j_common_ptr"},
      {"jmp_buf", "jmp_buf"},
      {"jpeg_error_mgr", "jpeg_error_mgr"},
      {"K", "K"},
      {"kalman_filter<2, 1>", "kalman_filter"},
      {"kalman_filter<states, measurements> &", "kalman_filter"},
      {"kiss_fftnd_state<T>", "kiss_fftnd_state"},
      {"kiss_fftr_state<T>", "kiss_fftr_state"},
      {"kiss_fft_state<T>", "kiss_fft_state"},
      {"labeled_detection<detection_type_, label_type_> &", "labeled_detection"},
      {"label_type", "label_type"},
      {"linear_kernel<T> &", "linear_kernel"},
      {"llvm::StringRef", "llvm::StringRef"},
      {"llvm::ThreadPool &", "llvm::ThreadPool"},
      {"long", "long"},
      {"long &", "long"},
      {"long *", "long"},
      {"long *const", "long"},
      {"long double", "long double"},
      {"long double &", "long double"},
      {"long double *", "long double"},
      {"long long", "long long"},
      {"lz77_buffer_kernel_1<sliding_buffer> &", "lz77_buffer_kernel_1"},
      {"lz77_buffer_kernel_2<sliding_buffer> &", "lz77_buffer_kernel_2"},
      {"__m128", "__m128"},
      {"__m128i", "__m128i"},
      {"map_kernel_1<domain, range, bst_base, mem_manager> &", "map_kernel_1"},
      {"map_kernel_c<map_base> &", "map_kernel_c"},
      {"map<std::string, int>::kernel_1a_c", "map"},
      {"map<std::string, std::unique_ptr<auto_flush_container>>::kernel_1b_c", "map"},
      {"map<std::string, std::unique_ptr<level_container>>::kernel_1b_c", "map"},
      {"map<std::string, std::unique_ptr<logger_header_container>>::kernel_1b_c", "map"},
      {"map<std::string, std::unique_ptr<output_hook_container>>::kernel_1b_c", "map"},
      {"map<std::string, std::unique_ptr<output_streambuf_container>>::kernel_1b_c", "map"},
      {"map_string_string", "map_string_string"},
      {"map_string_void", "map_string_void"},
      {"map<thread_id_type, mfp, memory_manager<char>::kernel_2a>::kernel_1a", "map"},
      {"map<thread_id_type, uint64>::kernel_1b", "map"},
      {"matrix_dest_type &", "matrix_dest_type"},
      {"matrix<dlib::least_squares_function_model::type, 0, 1, dlib::least_squares_function_model::mem_manager_type, dlib::least_squares_function_model::layout_type>",
       "matrix"},
      {"matrix<dlib::least_squares_function_model::type, 0, NR, dlib::least_squares_function_model::mem_manager_type, dlib::least_squares_function_model::layout_type>",
       "matrix"},
      {"matrix<dlib::least_squares_lm_function_model::type, 0, 1, dlib::least_squares_lm_function_model::mem_manager_type, dlib::least_squares_lm_function_model::layout_type>",
       "matrix"},
      {"matrix<dlib::lu_decomposition::type, 0, 0, dlib::lu_decomposition::mem_manager_type, dlib::column_major_layout>",
       "matrix"},
      {"matrix<dlib::op_symm_cache::type, 0, 1, typename M::mem_manager_type>", "matrix"},
      {"matrix<dlib::qr_decomposition::type, 0, 0, dlib::qr_decomposition::mem_manager_type, dlib::column_major_layout>",
       "matrix"},
      {"matrix<dlib::vector_normalizer_frobmetric::scalar_type, 0, 0, dlib::vector_normalizer_frobmetric::mem_manager_type>",
       "matrix"},
      {"matrix<dlib::vector_normalizer_pca::scalar_type, 0, 0, dlib::vector_normalizer_pca::mem_manager_type>",
       "matrix"},
      {"matrix<dlib::vector_normalizer_pca::scalar_type, 0, 1, dlib::vector_normalizer_pca::mem_manager_type>",
       "matrix"},
      {"matrix<double>", "matrix"},
      {"matrix<double> &", "matrix"},
      {"matrix<double, 0, 0> &", "matrix"},
      {"matrix<double, 0, 0, dlib::vector_normalizer_frobmetric::mem_manager_type> &", "matrix"},
      {"matrix<double, 0, 1>", "matrix"},
      {"matrix<double, 0, 1> &", "matrix"},
      {"matrix<double, 2, 2>", "matrix"},
      {"matrix<double, 3, 3>", "matrix"},
      {"matrix<double, measurements, measurements>", "matrix"},
      {"matrix<double, measurements, states>", "matrix"},
      {"matrix<double, states, 1>", "matrix"},
      {"matrix<double, states, states>", "matrix"},
      {"matrix<std::complex<T>, NR, NC, MM, L> &", "matrix"},
      {"matrix<T> &", "matrix"},
      {"matrix<T, 0, 0, MM, L> &", "matrix"},
      {"matrix<T, 0, 1> &", "matrix"},
      {"matrix<T, Anr, 0, MM, L> &", "matrix"},
      {"matrix<T, NR2, NC2, MM> &", "matrix"},
      {"matrix<T, NR2, NC2, mm2, l2> &", "matrix"},
      {"matrix<T, NR2, NC2, MM, dlib::column_major_layout> &", "matrix"},
      {"matrix<T, NR2, NC2, MM, L> &", "matrix"},
      {"matrix<T, NR2, NC2, MM, layout> &", "matrix"},
      {"matrix<T, NRa, 1> &", "matrix"},
      {"matrix<T, NRb, 1> &", "matrix"},
      {"matrix<T, NR, NC, MM> &", "matrix"},
      {"matrix<T, NR, NC, MM, dlib::column_major_layout> &", "matrix"},
      {"matrix<T, NR, NC, mm, l> &", "matrix"},
      {"matrix<T, NR, NC, MM, L> &", "matrix"},
      {"matrix<T, NR, NC, mm, l1> &", "matrix"},
      {"matrix<T, num_rows, num_cols, mem_manager, layout> &", "matrix"},
      {"matrix<T, num_rows, num_cols, mem_manager, layout> &&", "matrix"},
      {"matrix<T, num_rows, num_cols, mem_manager, layout> *", "matrix"},
      {"matrix<T, R, C, MM, L> &", "matrix"},
      {"matrix<T, Unr, Unc, MM, L> &", "matrix"},
      {"matrix<T, Vnr, Vnc, MM, L> &", "matrix"},
      {"matrix<T, Wnr, Wnc, MM, L> &", "matrix"},
      {"matrix_type", "matrix_type"},
      {"matrix_type &", "matrix_type"},
      {"matrix<typename EXP::type, qN, qX, MM2, L1> &", "matrix"},
      {"matrix<typename EXP::type, uM, uM, MM1, L1> &", "matrix"},
      {"matrix<typename EXP::type, uM, uN, MM1, L1> &", "matrix"},
      {"matrix<typename EXP::type, vM, vN, MM3, L1> &", "matrix"},
      {"matrix<typename EXP::type, vN, vN, MM3, L1> &", "matrix"},
      {"matrix<typename matrix_exp<EXP>::type, uNR, uNC, MM1, L1> &", "matrix"},
      {"matrix<typename matrix_exp<EXP>::type, vN, vN, MM3, L1> &", "matrix"},
      {"matrix<typename matrix_exp<EXP>::type, wN, wN, MM2, L1> &", "matrix"},
      {"matrix<typename matrix_exp<EXP>::type, wN, wX, MM2, L1> &", "matrix"},
      {"matrix<unsigned long, 1, NC> &", "matrix"},
      {"member_function_pointer<>", "member_function_pointer"},
      {"member_function_pointer<long>", "member_function_pointer"},
      {"member_function_pointer<long, long>", "member_function_pointer"},
      {"member_function_pointer<T1, T2, T3, T4>", "member_function_pointer"},
      {"memory_manager_kernel_1<T, max_pool_size> &", "memory_manager_kernel_1"},
      {"memory_manager_kernel_2<T, chunk_size> &", "memory_manager_kernel_2"},
      {"memory_manager_kernel_3<T, chunk_size> &", "memory_manager_kernel_3"},
      {"memory_manager_stateless_kernel_1<T> &", "memory_manager_stateless_kernel_1"},
      {"mersenne_twister<UIntType, w, n, m, r, a, u, s, b, t, c, l, val> &", "mersenne_twister"},
      {"mfp_kernel_1_base_class<num_args> &", "mfp_kernel_1_base_class"},
      {"mio::basic_mmap::handle_type", "mio::basic_mmap::handle_type"},
      {"mio::basic_mmap::pointer", "mio::basic_mmap::pointer"},
      {"mio::basic_mmap::size_type", "mio::basic_mmap::size_type"},
      {"mio::basic_shared_mmap::mmap_type &&", "mio::basic_shared_mmap::mmap_type"},
      {"mmap_sink::size_type", "mmap_sink::size_type"},
      {"mmap_source::size_type", "mmap_source::size_type"},
      {"multiclass_linear_decision_function<K, result_type_> &", "multiclass_linear_decision_function"},
      {"nlohmann::crow *", "nlohmann::crow"},
      {"nlohmann::json", "nlohmann::json"},
      {"normalized_function<function_type, normalizer_type> &", "normalized_function"},
      {"normalizer_type", "normalizer_type"},
      {"offset_kernel<T> &", "offset_kernel"},
      {"out_image_type &", "out_image_type"},
      {"P &", "P"},
      {"P1 &", "P1"},
      {"PARAM1", "PARAM1"},
      {"PARAM2", "PARAM2"},
      {"PARAM3", "PARAM3"},
      {"PARAM4", "PARAM4"},
      {"parse_tree_element<T> &", "parse_tree_element"},
      {"png_bytep", "png_bytep"},
      {"png_bytep *", "png_bytep"},
      {"png_const_charp", "png_const_charp"},
      {"png_infop", "png_infop"},
      {"png_structp", "png_structp"},
      {"Point", "Point"},
      {"polynomial_kernel<T> &", "polynomial_kernel"},
      {"port_notify_function_type", "port_notify_function_type"},
      {"probabilistic_decision_function<K> &", "probabilistic_decision_function"},
      {"probabilistic_function<function_type> &", "probabilistic_function"},
      {"projection_function<K> &", "projection_function"},
      {"pthread_cond_t", "pthread_cond_t"},
      {"pthread_mutex_t", "pthread_mutex_t"},
      {"pthread_mutex_t *const", "pthread_mutex_t"},
      {"queue_base &", "queue_base"},
      {"queue_kernel_1<T, mem_manager> &", "queue_kernel_1"},
      {"queue_kernel_2<T, block_size, mem_manager> &", "queue_kernel_2"},
      {"queue_kernel_c<queue_base> &", "queue_kernel_c"},
      {"queue<mfp, memory_manager<char>::kernel_2a>::kernel_1a", "queue"},
      {"queue_of_dir &", "queue_of_dir"},
      {"queue_of_dirs &", "queue_of_dirs"},
      {"queue_of_files &", "queue_of_files"},
      {"queue_of_strings &", "queue_of_strings"},
      {"queue_sort_1<queue_base> &", "queue_sort_1"},
      {"radial_basis_kernel<T> &", "radial_basis_kernel"},
      {"ramdump_t<matrix<T, NR, NC, mm, l>> &&", "ramdump_t"},
      {"rand_gen &", "rand_gen"},
      {"random_subset_selector<T1, T2> &", "random_subset_selector"},
      {"random_subset_selector<T, rand_type> &", "random_subset_selector"},
      {"random_subset_selector<T, Rand_type> &", "random_subset_selector"},
      {"rand_type &", "rand_type"},
      {"range", "range"},
      {"range &", "range"},
      {"range *", "range"},
      {"range_set<T> &", "range_set"},
      {"reference_wrapper<T>", "reference_wrapper"},
      {"Rest &...", "Rest"},
      {"R (T::*)()", "R"},
      {"R (T::*)(U)", "R"},
      {"running_stats_decayed<T> &", "running_stats_decayed"},
      {"running_stats_decayed<U> &", "running_stats_decayed"},
      {"running_stats<U> &", "running_stats"},
      {"sbuf", "sbuf"},
      {"scalar_type &", "scalar_type"},
      {"scalar_vector_type2 &", "scalar_vector_type2"},
      {"search_strategy_type", "search_strategy_type"},
      {"selector<V>", "selector"},
      {"selector<void>", "selector"},
      {"seq_base &", "seq_base"},
      {"sequence_compare_1<seq_base> &", "sequence_compare_1"},
      {"sequence<data_helper>::kernel_2a", "sequence"},
      {"sequence_kernel_1<T, mem_manager> &", "sequence_kernel_1"},
      {"sequence_kernel_2<T, mem_manager> &", "sequence_kernel_2"},
      {"sequence_kernel_c<seq_base> &", "sequence_kernel_c"},
      {"sequence_sort_1<seq_base> &", "sequence_sort_1"},
      {"sequence_sort_2<seq_base> &", "sequence_sort_2"},
      {"set_compare_1<set_base> &", "set_compare_1"},
      {"set_kernel_1<T, bst_base, mem_manager> &", "set_kernel_1"},
      {"set_kernel_c<set_base> &", "set_kernel_c"},
      {"set<logger *>::kernel_1b", "set"},
      {"set<thread_id_type, memory_manager<char>::kernel_2b>::kernel_1b_c", "set"},
      {"short", "short"},
      {"short *", "short"},
      {"sigmoid_kernel<T> &", "sigmoid_kernel"},
      {"signed char", "signed char"},
      {"signed char *", "signed char"},
      {"size_t", "size_t"},
      {"size_t &", "size_t"},
      {"sliding_buffer", "sliding_buffer"},
      {"sliding_buffer_kernel_1<T> &", "sliding_buffer_kernel_1"},
      {"sliding_buffer_kernel_c<sb_base> &", "sliding_buffer_kernel_c"},
      {"sparse_histogram_intersection_kernel<T> &", "sparse_histogram_intersection_kernel"},
      {"sparse_linear_kernel<T> &", "sparse_linear_kernel"},
      {"sparse_polynomial_kernel<T> &", "sparse_polynomial_kernel"},
      {"sparse_radial_basis_kernel<T> &", "sparse_radial_basis_kernel"},
      {"sparse_sigmoid_kernel<T> &", "sparse_sigmoid_kernel"},
      {"stack_based_memory_block<mem_size> &", "stack_based_memory_block"},
      {"stack_based_memory_block<sizeof(dlib::bound_function_pointer::bf_null_type)>", "stack_based_memory_block"},
      {"stack_based_memory_block<sizeof(dlib::mfp_kernel_1_base_class::mp_null_impl) + 1>", "stack_based_memory_block"},
      {"stack_kernel_1<T, mem_manager> &", "stack_kernel_1"},
      {"stack_kernel_c<stack_base> &", "stack_kernel_c"},
      {"std_allocator<T, M> &", "std_allocator"},
      {"std::array<T, 0> &", "std::array"},
      {"std::array<T, N> &", "std::array"},
      {"std::atomic<uint32_t>", "std::atomic"},
      {"std::basic_streambuf<char>::char_type *", "std::basic_streambuf"},
      {"std::basic_streambuf<char>::int_type", "std::basic_streambuf"},
      {"std::basic_streambuf<char>::off_type", "std::basic_streambuf"},
      {"std::basic_streambuf<char>::pos_type", "std::basic_streambuf"},
      {"std::chrono::nanoseconds", "std::chrono::nanoseconds"},
      {"std::chrono::time_point<std::chrono::system_clock>", "std::chrono::time_point"},
      {"std::complex<T>", "std::complex"},
      {"std::complex<T> &", "std::complex"},
      {"std::complex<T> *", "std::complex"},
      {"std::deque<T, alloc> &", "std::deque"},
      {"std::error_code &", "std::error_code"},
      {"std::exception_ptr", "std::exception_ptr"},
      {"std::filesystem::path", "std::filesystem::path"},
      {"std::forward_list<T, alloc> &", "std::forward_list"},
      {"std::ifstream", "std::ifstream"},
      {"std::ifstream &", "std::ifstream"},
      {"std::initializer_list<long>", "std::initializer_list"},
      {"std::ios_base::openmode", "std::ios_base::openmode"},
      {"std::ios_base::seekdir", "std::ios_base::seekdir"},
      {"std::iostream", "std::iostream"},
      {"std::istream &", "std::istream"},
      {"std::istream *", "std::istream"},
      {"std::list<T, alloc> &", "std::list"},
      {"std::map<domain, range, compare, alloc> &", "std::map"},
      {"std::map<std::string, point>", "std::map"},
      {"std::map<T, U, Comp, Alloc> &", "std::map"},
      {"std::multimap<domain, range, compare, alloc> &", "std::multimap"},
      {"std::multiset<domain, compare, alloc> &", "std::multiset"},
      {"std::mutex", "std::mutex"},
      {"std::ostream", "std::ostream"},
      {"std::ostream &", "std::ostream"},
      {"std::ostream *", "std::ostream"},
      {"std::pair<first_type, second_type> &", "std::pair"},
      {"std::pair<T, U> &", "std::pair"},
      {"std::priority_queue<msg_wrap>", "std::priority_queue"},
      {"std::set<domain, compare, alloc> &", "std::set"},
      {"std::shared_ptr<float>", "std::shared_ptr"},
      {"std::shared_ptr<function_object_copy>", "std::shared_ptr"},
      {"std::shared_ptr<function_object_copy> &", "std::shared_ptr"},
      {"std::shared_ptr<gopt_impl::funct_info>", "std::shared_ptr"},
      {"std::shared_ptr<impl_type>", "std::shared_ptr"},
      {"std::shared_ptr<mmap_type>", "std::shared_ptr"},
      {"std::shared_ptr<std::mutex>", "std::shared_ptr"},
      {"std::shared_ptr<std::vector<char>>", "std::shared_ptr"},
      {"std::shared_ptr<std::vector<char>> &", "std::shared_ptr"},
      {"std::shared_ptr<T> &", "std::shared_ptr"},
      {"std::shared_ptr<thread_pool_implementation>", "std::shared_ptr"},
      {"std::shared_ptr<timer_global_clock>", "std::shared_ptr"},
      {"std::shared_ptr<void>", "std::shared_ptr"},
      {"std::streambuf &", "std::streambuf"},
      {"std::streambuf *", "std::streambuf"},
      {"std::streamsize", "std::streamsize"},
      {"std::string", "std::string"},
      {"std::string &", "std::string"},
      {"std::terminate_handler", "std::terminate_handler"},
      {"std::tuple<Tp...> &", "std::tuple"},
      {"std::tuple<Types...> &", "std::tuple"},
      {"std::uint64_t", "std::uint64_t"},
      {"std::unique_ptr<base>", "std::unique_ptr"},
      {"std::unique_ptr<base> &", "std::unique_ptr"},
      {"std::unique_ptr<base_funct>", "std::unique_ptr"},
      {"std::unique_ptr<clang::tooling::FrontendActionFactory>", "std::unique_ptr"},
      {"std::unique_ptr<connection>", "std::unique_ptr"},
      {"std::unique_ptr<connection> &", "std::unique_ptr"},
      {"std::unique_ptr<FileInfo>", "std::unique_ptr"},
      {"std::unique_ptr<LibpngData>", "std::unique_ptr"},
      {"std::unique_ptr<listener>", "std::unique_ptr"},
      {"std::unique_ptr<listener> &", "std::unique_ptr"},
      {"std::unique_ptr<PngBufferReaderState>", "std::unique_ptr"},
      {"std::unique_ptr<std::istream>", "std::unique_ptr"},
      {"std::unique_ptr<std::ostream>", "std::unique_ptr"},
      {"std::unique_ptr<Tbase<FT>> &", "std::unique_ptr"},
      {"std::unique_ptr<T, deleter> &", "std::unique_ptr"},
      {"std::unique_ptr<thread_function>", "std::unique_ptr"},
      {"std::unordered_map<domain, range, hash, keyEqual, alloc> &", "std::unordered_map"},
      {"std::unordered_map<hdoc::types::SymbolID, T>", "std::unordered_map"},
      {"std::unordered_multimap<domain, range, hash, keyEqual, alloc> &", "std::unordered_multimap"},
      {"std::unordered_multiset<domain, hash, keyEqual, alloc> &", "std::unordered_multiset"},
      {"std::unordered_set<domain, hash, keyEqual, alloc> &", "std::unordered_set"},
      {"std::vector<BaseRecord>", "std::vector"},
      {"std::vector<block_t>", "std::vector"},
      {"std::vector<bool>", "std::vector"},
      {"std::vector<bool, alloc> &", "std::vector"},
      {"std::vector<box>", "std::vector"},
      {"std::vector<bucket>", "std::vector"},
      {"std::vector<char>", "std::vector"},
      {"std::vector<char> &", "std::vector"},
      {"std::vector<char, alloc> &", "std::vector"},
      {"std::vector<CharType> &", "std::vector"},
      {"std_vector_c<std::string, alloc> &", "std_vector_c"},
      {"std_vector_c<T, alloc> &", "std_vector_c"},
      {"std_vector_c<T, Allocator> &", "std_vector_c"},
      {"std::vector<directory> &", "std::vector"},
      {"std::vector<double>", "std::vector"},
      {"std::vector<double> &", "std::vector"},
      {"std::vector<EnumMember>", "std::vector"},
      {"std::vector<funct> &", "std::vector"},
      {"std::vector<function_evaluation>", "std::vector"},
      {"std::vector<FunctionParam>", "std::vector"},
      {"std::vector<function_spec>", "std::vector"},
      {"std::vector<function_spec> &", "std::vector"},
      {"std::vector<hdoc::types::SymbolID>", "std::vector"},
      {"std::vector<image>", "std::vector"},
      {"std::vector<int>", "std::vector"},
      {"std::vector<int> &", "std::vector"},
      {"std::vector<int8_t>", "std::vector"},
      {"std::vector<int8_t> &", "std::vector"},
      {"std::vector<kiss_fft_state<T>>", "std::vector"},
      {"std::vector<long>", "std::vector"},
      {"std::vector<long> &", "std::vector"},
      {"std::vector<match_ending>", "std::vector"},
      {"std::vector<matrix<double, 0, 1>>", "std::vector"},
      {"std::vector<matrix<double, 0, 1>> &", "std::vector"},
      {"std::vector<matrix<rgb_pixel>> &", "std::vector"},
      {"std::vector<matrix<T, NR, NC, MM, L>> &", "std::vector"},
      {"std::vector<matrix_type>", "std::vector"},
      {"std::vector<matrix<unsigned char>> &", "std::vector"},
      {"std::vector<MemberVariable>", "std::vector"},
      {"std::vector<ordered_sample_pair, alloc2> &", "std::vector"},
      {"std::vector<outstanding_function_eval_request>", "std::vector"},
      {"std::vector<parse_tree_element<T>> &", "std::vector"},
      {"std::vector<result_type>", "std::vector"},
      {"std::vector<sample_pair, alloc> &", "std::vector"},
      {"std::vector<scalar_type>", "std::vector"},
      {"std::vector<std::complex<T>>", "std::vector"},
      {"std::vector<std::complex<T>, Alloc> &", "std::vector"},
      {"std::vector<std::filesystem::path>", "std::vector"},
      {"std::vector<std::future<std::string>>", "std::vector"},
      {"std::vector<std::pair<size_t, size_t>>", "std::vector"},
      {"std::vector<std::pair<T, U>> &", "std::vector"},
      {"std::vector<std::pair<T, U>, alloc> &", "std::vector"},
      {"std::vector<std::pair<unsigned long, unsigned long>, alloc2> &", "std::vector"},
      {"std::vector<std::shared_ptr<gopt_impl::funct_info>>", "std::vector"},
      {"std::vector<std::string>", "std::vector"},
      {"std::vector<std::string, alloc> &", "std::vector"},
      {"std::vector<std::thread>", "std::vector"},
      {"std::vector<std::unique_ptr< ::dlib::cuda::enable_peer_access>>", "std::vector"},
      {"std::vector<std::vector<function_evaluation>>", "std::vector"},
      {"std::vector<std::vector<function_evaluation>> &", "std::vector"},
      {"std::vector<std::vector<tensor *>>", "std::vector"},
      {"std::vector<T>", "std::vector"},
      {"std::vector<T, alloc> &", "std::vector"},
      {"std::vector<T, Allocator> &", "std::vector"},
      {"std::vector<tensor *>", "std::vector"},
      {"std::vector<typename EXP::type> &", "std::vector"},
      {"std::vector<uint8_t>", "std::vector"},
      {"std::vector<uint8_t> &", "std::vector"},
      {"std::vector<unsigned char *> &", "std::vector"},
      {"std::vector<unsigned char>", "std::vector"},
      {"std::vector<unsigned char, alloc> &", "std::vector"},
      {"std::vector<unsigned long> &", "std::vector"},
      {"std::wstring &", "std::wstring"},
      {"stop_strategy_type", "stop_strategy_type"},
      {"struct auto_flush_container", "auto_flush_container"},
      {"struct level_container", "level_container"},
      {"struct logger_header_container", "logger_header_container"},
      {"struct output_hook_container", "output_hook_container"},
      {"struct output_streambuf_container", "output_streambuf_container"},
      {"sub_image_proxy<T> &", "sub_image_proxy"},
      {"svm_c_trainer<K> &", "svm_c_trainer"},
      {"svm_nu_trainer<K> &", "svm_nu_trainer"},
      {"T", "T"},
      {"T &", "T"},
      {"T &&", "T"},
      {"T &&...", "T"},
      {"T (&)()", "T"},
      {"T *", "T"},
      {"T1", "T1"},
      {"T2", "T2"},
      {"T3", "T3"},
      {"T4", "T4"},
      {"T (&)(A0)", "T"},
      {"T (&)(A0, A1)", "T"},
      {"T (&)(A0, A1, A2)", "T"},
      {"T (&)(A0, A1, A2, A3)", "T"},
      {"T (&)(A0, A1, A2, A3, A4)", "T"},
      {"T [block_size]", "T"},
      {"thread_specific_data<T> &", "thread_specific_data"},
      {"time_t", "time_t"},
      {"T (&)[length]", "T"},
      {"T (&)[NR][NC]", "T"},
      {"to", "to"},
      {"tokenizer &", "tokenizer"},
      {"tokenizer::kernel_1a_c", "tokenizer::kernel_1a_c"},
      {"tokenizer_kernel_c<tokenizer> &", "tokenizer_kernel_c"},
      {"T (&)[size]", "T"},
      {"U", "U"},
      {"U &", "U"},
      {"uint32_t", "uint32_t"},
      {"uint64_t", "uint64_t"},
      {"UIntType", "UIntType"},
      {"UIntType [2 * n]", "UIntType"},
      {"U (&)[len]", "U"},
      {"unicode_helpers::basic_utf8_streambuf<charT>", "unicode_helpers::basic_utf8_streambuf"},
      {"union mem_block", "mem_block"},
      {"unordered_pair<T> &", "unordered_pair"},
      {"unsigned char", "unsigned char"},
      {"unsigned char &", "unsigned char"},
      {"unsigned char *", "unsigned char"},
      {"unsigned char [9]", "unsigned char"},
      {"unsigned int", "unsigned int"},
      {"unsigned int *", "unsigned int"},
      {"unsigned long", "unsigned long"},
      {"unsigned long &", "unsigned long"},
      {"unsigned long *", "unsigned long"},
      {"unsigned long [alphabet_size / 32 + 1]", "unsigned long"},
      {"unsigned long *const", "unsigned long"},
      {"unsigned long long", "unsigned long long"},
      {"unsigned short", "unsigned short"},
      {"unsigned short *", "unsigned short"},
      {"V &", "V"},
      {"vector<double>", "vector"},
      {"vector_normalizer_frobmetric<matrix_type> &", "vector_normalizer_frobmetric"},
      {"vector_normalizer_frobmetric<mt> &", "vector_normalizer_frobmetric"},
      {"vector_normalizer<matrix_type> &", "vector_normalizer"},
      {"vector_normalizer<mt> &", "vector_normalizer"},
      {"vector_normalizer_pca<matrix_type> &", "vector_normalizer_pca"},
      {"vector_normalizer_pca<T> &", "vector_normalizer_pca"},
      {"vector_streambuf<char>", "vector_streambuf"},
      {"vector_streambuf<int8_t>", "vector_streambuf"},
      {"vector_streambuf<uint8_t>", "vector_streambuf"},
      {"vector<T, 2> &", "vector"},
      {"vector<T, 3> &", "vector"},
      {"vector<T, NR> &", "vector"},
      {"vector_type &", "vector_type"},
      {"void (*)()", "void"},
      {"void *", "void"},
      {"void *const", "void"},
      {"void (T::*)()", "void"},
      {"void (*)(T1)", "void"},
      {"void (*)(T1, T2)", "void"},
      {"void (*)(T1, T2, T3)", "void"},
      {"void (*)(T1, T2, T3, T4)", "void"},
      {"void (T::*)(A1)", "void"},
      {"void (T::*)(A1, A2)", "void"},
      {"void (T::*)(A1, A2, A3)", "void"},
      {"void (T::*)(A1, A2, A3, A4)", "void"},
      {"void (T::*)(A1, A2, A3, A4) const", "void"},
      {"void (T::*)(A1, A2, A3) const", "void"},
      {"void (T::*)(A1, A2) const", "void"},
      {"void (T::*)(A1) const", "void"},
      {"void (T::*)() const", "void"},
      {"void (T::*)(const std::string &, const dlib::log_level &, const dlib::uint64, const char *)", "void"},
      {"void (T::*)(long)", "void"},
      {"void (T::*)(long, long)", "void"},
      {"void (T::*)(T1)", "void"},
      {"void (T::*)(T1) const", "void"},
      {"void (T::*)(T1, T2)", "void"},
      {"void (T::*)(T1, T2) const", "void"},
      {"void (T::*)(T1, T2, T3)", "void"},
      {"void (T::*)(T1, T2, T3) const", "void"},
      {"void (T::*)(T1, T2, T3, T4)", "void"},
      {"void (T::*)(T1, T2, T3, T4) const", "void"},
      {"void (T::*)(U)", "void"},
      {"void (*)(void *)", "void"},
      {"wchar_t", "wchar_t"},
      {"Y &", "Y"},
  };

  for (const auto& testCase : cases) {
    CHECK(hdoc::serde::getBareTypeName(testCase.input) == testCase.expected);
  }
}

TEST_CASE("Testing getHyperlinkedFunctionProto") {
  struct TestCase {
    const char*                                   input;
    const char*                                   output;
    const std::vector<hdoc::types::FunctionParam> params;
    const hdoc::types::TypeRef                    returnType;
  };

  const std::vector<TestCase> cases = {
      {
          "void f()",
          "void f()",
          {},
          hdoc::types::TypeRef(),
      },
      {
          "int f()",
          "int f()",
          {},
          {hdoc::types::SymbolID(), "int"},
      },
      {
          "A f()",
          R"(<a href="rB6589FC6AB0DC82C.html">A</a> f())",
          {},
          {hdoc::types::SymbolID("0"), "A"},
      },
      {
          "std::string f()",
          R"(<a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a> f())",
          {},
          {hdoc::types::SymbolID(), "std::string"},
      },
      {
          "std::vector<int> f()",
          R"(<a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;int&gt; f())",
          {},
          {hdoc::types::SymbolID(), "std::vector<int>"},
      },
      {
          "std::vector<int *> f()",
          R"(<a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;int*&gt; f())",
          {},
          {hdoc::types::SymbolID(), "std::vector<int *>"},
      },
      {
          "template <typename T> std::vector<T> f()",
          R"(template &lt;typename T&gt;
<a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;T&gt; f())",
          {},
          {hdoc::types::SymbolID(), "std::vector<T>"},
      },
      {
          "template <typename T> A<T> f()",
          R"(template &lt;typename T&gt;
<a href="rB6589FC6AB0DC82C.html">A</a>&lt;T&gt; f())",
          {},
          {hdoc::types::SymbolID("0"), "A<T>"},
      },
      {
          "void f(int i)",
          "void f(int i)",
          {
              {"i", {hdoc::types::SymbolID(), "int"}, "", ""},
          },
          hdoc::types::TypeRef(),
      },
      {
          "void f(const int i)",
          "void f(const int i)",
          {
              {"i", {hdoc::types::SymbolID(), "const int"}, "", ""},
          },
          hdoc::types::TypeRef(),
      },
      {
          "void f(const int & i)",
          "void f(const int&amp; i)",
          {
              {"i", {hdoc::types::SymbolID(), "const int &"}, "", ""},
          },
          hdoc::types::TypeRef(),
      },
      {
          "void f(A & i)",
          R"(void f(<a href="rB6589FC6AB0DC82C.html">A</a>&amp; i))",
          {
              {"i", {hdoc::types::SymbolID("0"), "A &"}, "", ""},
          },
          hdoc::types::TypeRef(),
      },
      {
          "void f(std::string i)",
          R"(void f(<a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a> i))",
          {
              {"i", {hdoc::types::SymbolID(), "std::string"}, "", ""},
          },
          hdoc::types::TypeRef(),
      },
      {
          "void f(std::vector<int> i)",
          R"(void f(<a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;int&gt; i))",
          {
              {"i", {hdoc::types::SymbolID(), "std::vector<int>"}, "", ""},
          },
          hdoc::types::TypeRef(),
      },
      {
          "template <typename T> void f(A<T> i)",
          R"(template &lt;typename T&gt;
void f(<a href="rB6589FC6AB0DC82C.html">A</a>&lt;T&gt; i))",
          {
              {"i", {hdoc::types::SymbolID("0"), "A<T>"}, "", ""},
          },
          hdoc::types::TypeRef(),
      },
  };

  for (const auto& testCase : cases) {
    hdoc::types::FunctionSymbol f;
    f.name           = "f";
    f.params         = testCase.params;
    f.returnType     = testCase.returnType;
    const auto proto = hdoc::serde::clangFormat(testCase.input);
    CHECK(hdoc::serde::getHyperlinkedFunctionProto(proto, f) == std::string(testCase.output));
  }
}
