<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>EnvDTE80</name>
	</assembly>
	<members>
		<member name="N:EnvDTE80">
			<summary>EnvDTE80 contains the objects and members for Visual Studio core automation. It extends and compliments the functionality provided by <see cref="N:EnvDTE"></see>.</summary>
		</member>
		<member name="T:EnvDTE80._CodeModelEvents">
			<summary>Refer to <see cref="T:EnvDTE80.CodeModelEvents"></see> for this functionality. Do not instantiate from this class.</summary>
		</member>
		<member name="T:EnvDTE80._CodeModelEventsRoot">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="P:EnvDTE80._CodeModelEventsRoot.CodeModelEvents(EnvDTE.CodeElement)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="__unnamed0"> </param>
		</member>
		<member name="T:EnvDTE80._DebuggerExpressionEvaluationEvents">
			<summary>Refer to <see cref="T:EnvDTE80.DebuggerExpressionEvaluationEvents"></see> for this functionality. Do not instantiate this class.</summary>
		</member>
		<member name="T:EnvDTE80._DebuggerExpressionEvaluationEventsRoot">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._DebuggerProcessEvents">
			<summary>Refer to <see cref="T:EnvDTE80.DebuggerProcessEvents"></see> for this functionality. Do not instantiate this class.</summary>
		</member>
		<member name="T:EnvDTE80._DebuggerProcessEventsRoot">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispCodeModelEvents">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents.ElementAdded(EnvDTE.CodeElement)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Element"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents.ElementChanged(EnvDTE.CodeElement,EnvDTE80.vsCMChangeKind)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Change"> </param>
			<param name="Element"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents.ElementDeleted(System.Object,EnvDTE.CodeElement)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Element"> </param>
			<param name="Parent"> </param>
		</member>
		<member name="T:EnvDTE80._dispCodeModelEvents_ElementAddedEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispCodeModelEvents_ElementChangedEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispCodeModelEvents_ElementDeletedEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispCodeModelEvents_Event">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispCodeModelEvents_Event.ElementAdded">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispCodeModelEvents_Event.ElementChanged">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispCodeModelEvents_Event.ElementDeleted">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_Event.add_ElementAdded(EnvDTE80._dispCodeModelEvents_ElementAddedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_Event.add_ElementChanged(EnvDTE80._dispCodeModelEvents_ElementChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_Event.add_ElementDeleted(EnvDTE80._dispCodeModelEvents_ElementDeletedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_Event.remove_ElementAdded(EnvDTE80._dispCodeModelEvents_ElementAddedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_Event.remove_ElementChanged(EnvDTE80._dispCodeModelEvents_ElementChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_Event.remove_ElementDeleted(EnvDTE80._dispCodeModelEvents_ElementDeletedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispCodeModelEvents_SinkHelper">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispCodeModelEvents_SinkHelper.m_dwCookie">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispCodeModelEvents_SinkHelper.m_ElementAddedDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispCodeModelEvents_SinkHelper.m_ElementChangedDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispCodeModelEvents_SinkHelper.m_ElementDeletedDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_SinkHelper.ElementAdded(EnvDTE.CodeElement)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_SinkHelper.ElementChanged(EnvDTE.CodeElement,EnvDTE80.vsCMChangeKind)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
			<param name="A_2"> </param>
		</member>
		<member name="M:EnvDTE80._dispCodeModelEvents_SinkHelper.ElementDeleted(System.Object,EnvDTE.CodeElement)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
			<param name="A_2"> </param>
		</member>
		<member name="T:EnvDTE80._dispDebuggerExpressionEvaluationEvents">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispDebuggerExpressionEvaluationEvents.OnExpressionEvaluation(EnvDTE.Process,EnvDTE.Thread,EnvDTE80.dbgExpressionEvaluationState)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Thread"> </param>
			<param name="processState"> </param>
			<param name="pProcess"> </param>
		</member>
		<member name="T:EnvDTE80._dispDebuggerExpressionEvaluationEvents_Event">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispDebuggerExpressionEvaluationEvents_Event.OnExpressionEvaluation">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispDebuggerExpressionEvaluationEvents_Event.add_OnExpressionEvaluation(EnvDTE80._dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispDebuggerExpressionEvaluationEvents_Event.remove_OnExpressionEvaluation(EnvDTE80._dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispDebuggerExpressionEvaluationEvents_SinkHelper">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispDebuggerExpressionEvaluationEvents_SinkHelper.m_dwCookie">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispDebuggerExpressionEvaluationEvents_SinkHelper.m_OnExpressionEvaluationDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispDebuggerExpressionEvaluationEvents_SinkHelper.OnExpressionEvaluation(EnvDTE.Process,EnvDTE.Thread,EnvDTE80.dbgExpressionEvaluationState)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
			<param name="A_2"> </param>
			<param name="A_3"> </param>
		</member>
		<member name="T:EnvDTE80._dispDebuggerProcessEvents">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispDebuggerProcessEvents.OnProcessStateChanged(EnvDTE.Process,EnvDTE80.dbgProcessState)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="processState"> </param>
			<param name="NewProcess"> </param>
		</member>
		<member name="T:EnvDTE80._dispDebuggerProcessEvents_Event">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispDebuggerProcessEvents_Event.OnProcessStateChanged">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispDebuggerProcessEvents_Event.add_OnProcessStateChanged(EnvDTE80._dispDebuggerProcessEvents_OnProcessStateChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispDebuggerProcessEvents_Event.remove_OnProcessStateChanged(EnvDTE80._dispDebuggerProcessEvents_OnProcessStateChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispDebuggerProcessEvents_OnProcessStateChangedEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispDebuggerProcessEvents_SinkHelper">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispDebuggerProcessEvents_SinkHelper.m_dwCookie">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispDebuggerProcessEvents_SinkHelper.m_OnProcessStateChangedDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispDebuggerProcessEvents_SinkHelper.OnProcessStateChanged(EnvDTE.Process,EnvDTE80.dbgProcessState)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
			<param name="A_2"> </param>
		</member>
		<member name="T:EnvDTE80._dispPublishEvents">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents.OnPublishBegin(System.Boolean@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Continue"> </param>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents.OnPublishDone(System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Success"> </param>
		</member>
		<member name="T:EnvDTE80._dispPublishEvents_Event">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispPublishEvents_Event.OnPublishBegin">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispPublishEvents_Event.OnPublishDone">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents_Event.add_OnPublishBegin(EnvDTE80._dispPublishEvents_OnPublishBeginEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents_Event.add_OnPublishDone(EnvDTE80._dispPublishEvents_OnPublishDoneEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents_Event.remove_OnPublishBegin(EnvDTE80._dispPublishEvents_OnPublishBeginEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents_Event.remove_OnPublishDone(EnvDTE80._dispPublishEvents_OnPublishDoneEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispPublishEvents_OnPublishBeginEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispPublishEvents_OnPublishDoneEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispPublishEvents_SinkHelper">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispPublishEvents_SinkHelper.m_dwCookie">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispPublishEvents_SinkHelper.m_OnPublishBeginDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispPublishEvents_SinkHelper.m_OnPublishDoneDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents_SinkHelper.OnPublishBegin(System.Boolean@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispPublishEvents_SinkHelper.OnPublishDone(System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispTextDocumentKeyPressEvents">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents.AfterKeyPress(System.String,EnvDTE.TextSelection,System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Keypress"> </param>
			<param name="InStatementCompletion"> </param>
			<param name="Selection"> </param>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents.BeforeKeyPress(System.String,EnvDTE.TextSelection,System.Boolean,System.Boolean@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Keypress"> </param>
			<param name="InStatementCompletion"> </param>
			<param name="CancelKeypress"> </param>
			<param name="Selection"> </param>
		</member>
		<member name="T:EnvDTE80._dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispTextDocumentKeyPressEvents_Event">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispTextDocumentKeyPressEvents_Event.AfterKeyPress">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispTextDocumentKeyPressEvents_Event.BeforeKeyPress">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents_Event.add_AfterKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents_Event.add_BeforeKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents_Event.remove_AfterKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents_Event.remove_BeforeKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispTextDocumentKeyPressEvents_SinkHelper">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispTextDocumentKeyPressEvents_SinkHelper.m_AfterKeyPressDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispTextDocumentKeyPressEvents_SinkHelper.m_BeforeKeyPressDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispTextDocumentKeyPressEvents_SinkHelper.m_dwCookie">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents_SinkHelper.AfterKeyPress(System.String,EnvDTE.TextSelection,System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
			<param name="A_2"> </param>
			<param name="A_3"> </param>
		</member>
		<member name="M:EnvDTE80._dispTextDocumentKeyPressEvents_SinkHelper.BeforeKeyPress(System.String,EnvDTE.TextSelection,System.Boolean,System.Boolean@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_4"> </param>
			<param name="A_1"> </param>
			<param name="A_2"> </param>
			<param name="A_3"> </param>
		</member>
		<member name="T:EnvDTE80._dispWindowVisibilityEvents">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents.WindowHiding(EnvDTE.Window)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pWindow"> </param>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents.WindowShowing(EnvDTE.Window)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pWindow"> </param>
		</member>
		<member name="T:EnvDTE80._dispWindowVisibilityEvents_Event">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispWindowVisibilityEvents_Event.WindowHiding">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80._dispWindowVisibilityEvents_Event.WindowShowing">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents_Event.add_WindowHiding(EnvDTE80._dispWindowVisibilityEvents_WindowHidingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents_Event.add_WindowShowing(EnvDTE80._dispWindowVisibilityEvents_WindowShowingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents_Event.remove_WindowHiding(EnvDTE80._dispWindowVisibilityEvents_WindowHidingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents_Event.remove_WindowShowing(EnvDTE80._dispWindowVisibilityEvents_WindowShowingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispWindowVisibilityEvents_SinkHelper">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispWindowVisibilityEvents_SinkHelper.m_dwCookie">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispWindowVisibilityEvents_SinkHelper.m_WindowHidingDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="F:EnvDTE80._dispWindowVisibilityEvents_SinkHelper.m_WindowShowingDelegate">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents_SinkHelper.WindowHiding(EnvDTE.Window)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80._dispWindowVisibilityEvents_SinkHelper.WindowShowing(EnvDTE.Window)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80._dispWindowVisibilityEvents_WindowHidingEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._dispWindowVisibilityEvents_WindowShowingEventHandler">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="T:EnvDTE80._PublishEvents">
			<summary>Refer to <see cref="T:EnvDTE80.PublishEvents"></see> for this functionality. Do not instantiate this class.</summary>
		</member>
		<member name="T:EnvDTE80._TextDocumentKeyPressEvents">
			<summary>Refer to <see cref="T:EnvDTE80.TextDocumentKeyPressEvents"></see> for this functionality. Do not instantiate this class.</summary>
		</member>
		<member name="T:EnvDTE80._TextDocumentKeyPressEventsRoot">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="P:EnvDTE80._TextDocumentKeyPressEventsRoot.TextDocumentKeyPressEvents(EnvDTE.TextDocument)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="__unnamed0"> </param>
		</member>
		<member name="T:EnvDTE80._WindowVisibilityEvents">
			<summary>Refer to <see cref="T:EnvDTE80.WindowVisibilityEvents"></see> for this functionality. Do not instantiate this class.</summary>
		</member>
		<member name="T:EnvDTE80.Breakpoint2">
			<summary>Contains the properties and methods used to programmatically manipulate a breakpoint.</summary>
		</member>
		<member name="M:EnvDTE80.Breakpoint2.Delete">
			<summary>Deletes the breakpoint.</summary>
		</member>
		<member name="M:EnvDTE80.Breakpoint2.Process(EnvDTE80.Process2@)">
			<summary>Receives a <see cref="T:EnvDTE80.Process2"></see> associated with the current breakpoint.</summary>
			<param name="ppProcess">A <see cref="T:EnvDTE80.Process2"></see> passed by reference.</param>
		</member>
		<member name="M:EnvDTE80.Breakpoint2.ResetHitCount">
			<summary>Resets the breakpoint hit count.</summary>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.BreakWhenHit">
			<summary>Gets or sets a value indicating whether the program breaks when a breakpoint is encountered.</summary>
			<returns>A boolean value that is true if the program breaks when a breakpoint is encountered, otherwise false.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Children">
			<summary>Gets a collection of all <see cref="T:EnvDTE80.Breakpoint2"></see> child objects.</summary>
			<returns>A <see cref="T:EnvDTE.Breakpoints"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Collection">
			<summary>Gets the collection containing all of the <see cref="T:EnvDTE80.Breakpoint2"></see> objects.</summary>
			<returns>A <see cref="T:EnvDTE.Breakpoints"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Condition">
			<summary>Gets the condition that triggers a breakpoint.</summary>
			<returns>A string containing the condition that triggers the breakpoint.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.ConditionType">
			<summary>Gets the condition type of the breakpoint, which can be either break when true, or break when changed.</summary>
			<returns>One of the <see cref="T:EnvDTE.dbgBreakpointConditionType"></see> values.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.CurrentHits">
			<summary>Gets the number of times this breakpoint has been hit during this debugging session.</summary>
			<returns>An integer containing the number of times a breakpoint is hit during the debugging session.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Enabled">
			<summary>Sets or returns the enabled state of the breakpoint.</summary>
			<returns>A boolean value that is true if the breakpoint is enabled, otherwise false.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.File">
			<summary>Gets the name of the file in which the breakpoint is contained.</summary>
			<returns>A string containing the name of the file in which the breakpoint is contained.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.FileColumn">
			<summary>Gets the character location within a line in a file where the breakpoint is set.</summary>
			<returns>An integer containing the character location.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.FileLine">
			<summary>Gets the line within a file where the breakpoint is set.</summary>
			<returns>An integer containing the source-code line number at which the breakpoint is set.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.FilterBy">
			<summary>Gets or sets a condition at which a breakpoint is set.</summary>
			<returns>A string containing a condition at which a breakpoint is set.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.FunctionColumnOffset">
			<summary>Gets the column offset from the name of a function breakpoint.</summary>
			<returns>An integer containing the column offset from the name of a function breakpoint.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.FunctionLineOffset">
			<summary>Gets the line offset from the name of a function breakpoint.</summary>
			<returns>An integer containing the line offset from the name of a function breakpoint.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.FunctionName">
			<summary>Gets the name of the function containing the breakpoint.</summary>
			<returns>A string containing the function name.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.HitCountTarget">
			<summary>Gets the hit count target for any type of breakpoint. It is interpreted based on the hit count type.</summary>
			<returns>An integer containing the hit count target for any type of breakpoint.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.HitCountType">
			<summary>Gets the hit count type, which describes how to interpret a hit count.</summary>
			<returns>One of the <see cref="T:EnvDTE.dbgHitCountType"></see> values.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Language">
			<summary>Gets the name of the programming language containing the breakpoint.</summary>
			<returns>A string containing the name of the programming language.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.LocationType">
			<summary>Gets the location type the breakpoint represents.</summary>
			<returns>One of the <see cref="T:EnvDTE.dbgBreakpointLocationType"></see> values.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Macro">
			<summary>Gets or sets a breakpoint macro.</summary>
			<returns>A string containing a breakpoint macro.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Message">
			<summary>Gets or sets a breakpoint message.</summary>
			<returns>A string containing a breakpoint message.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Name">
			<summary>Sets or returns the name of the breakpoint.</summary>
			<returns>A string containing the name of the breakpoint.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Parent">
			<summary>Gets the immediate parent object of the breakpoint.</summary>
			<returns>The <see cref="T:EnvDTE.Breakpoints"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Program">
			<summary>Gets the executable being managed by this process.</summary>
			<returns>A <see cref="T:EnvDTE.Program"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Tag">
			<summary>Sets or gets a user-defined string identifying this breakpoint.</summary>
			<returns>A string containing the breakpoint tag.</returns>
		</member>
		<member name="P:EnvDTE80.Breakpoint2.Type">
			<summary>Gets a constant specifying the type of breakpoint.</summary>
			<returns>One of the <see cref="T:EnvDTE.dbgBreakpointType"></see> values.</returns>
		</member>
		<member name="T:EnvDTE80.CodeAttribute2">
			<summary>Defines an attribute for a code element.</summary>
		</member>
		<member name="M:EnvDTE80.CodeAttribute2.AddArgument(System.String,System.Object,System.Object)">
			<summary>Adds an argument to the attribute.</summary>
			<returns>A <see cref="T:EnvDTE80.CodeAttributeArgument"></see> object.</returns>
			<param name="Position">Optional. If the argument is a named parameter, this parameter contains the name of the argument.</param>
			<param name="Name">Required. The value of the argument.</param>
			<param name="Value">Required. Default value is 0.The element after which to add the new element. If the value is a CodeElement, then the new element is added after the argument, CodeElement.  If the value is a Long data type, then it indicates the element after which to add the new one. Because collections are one-based, passing zero indicates that the new element should be placed at the beginning of the collection. A value of -1 means to put the argument at the end.</param>
		</member>
		<member name="M:EnvDTE80.CodeAttribute2.Delete">
			<summary>Removes all attributes in the code element.</summary>
		</member>
		<member name="M:EnvDTE80.CodeAttribute2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Returns a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end position of the attribute.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the attribute to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeAttribute2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Returns a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning position of the attribute.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the attribute to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Arguments">
			<summary>Gets a collection of <see cref="T:EnvDTE.CodeElement"></see> objects that contains the <see cref="T:EnvDTE80.CodeAttributeArgument"></see> objects associated with this attribute.</summary>
			<returns>A collection of <see cref="T:EnvDTE.CodeElement"></see> objects.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Children">
			<summary>Gets a collection of objects contained within this code construct.</summary>
			<returns>Returns a <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Collection">
			<summary>Gets a collection of <see cref="T:EnvDTE80.CodeAttribute2"></see> objects.</summary>
			<returns>A collection of <see cref="T:EnvDTE80.CodeAttribute2"></see> objects.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.EndPoint">
			<summary>Gets the edit point that is the end location of the code attribute.</summary>
			<returns>Returns a <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Extender(System.String)">
			<summary>Returns the requested Extender if it is available for this code attribute.</summary>
			<returns>A string value representing the name of the Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object.</summary>
			<returns>The GUID string value representing the CATID of the object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.ExtenderNames">
			<summary>Gets a list of names of available Extenders for the object.</summary>
			<returns>Returns the names of the currently applicable Extenders for this object by using the CATID as specified by its <see cref="P:EnvDTE80.CodeAttribute2.ExtenderCATID"></see> property.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>A string representing the full path and name of the object's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.InfoLocation">
			<summary>Gets the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.IsCodeType">
			<summary>Gets whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this object.</summary>
			<returns>A boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained, otherwise returns false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Kind">
			<summary>Gets an enumeration indicating the type of attribute.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value indicating the type of attribute.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Language">
			<summary>Gets a constant identifying the programming language used to author the attribute.</summary>
			<returns>Returns a <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Name">
			<summary>Sets or gets the name of the code attribute.</summary>
			<returns>A string representing the name of the code attribute.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Parent">
			<summary>Gets the immediate parent object of the code attribute.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object, representing the parent of the attribute.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> associated with the code attribute.</summary>
			<returns>Returns a <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> that defines the beginning of the attribute.</summary>
			<returns>Returns a <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Target">
			<summary>Sets or gets the target of the code attribute.</summary>
			<returns>A string value representing the target of the code attribute.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttribute2.Value">
			<summary>Sets or gets the data for the code attribute.</summary>
			<returns>A string value representing the data for the code attribute.</returns>
		</member>
		<member name="T:EnvDTE80.CodeAttributeArgument">
			<summary>Represents a single argument (name/value pair) in a code attribute.</summary>
		</member>
		<member name="M:EnvDTE80.CodeAttributeArgument.Delete">
			<summary>Removes a single argument from a code attribute.</summary>
		</member>
		<member name="M:EnvDTE80.CodeAttributeArgument.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Returns a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the attribute argument.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeAttributeArgument.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the start of the attribute argument.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.Children">
			<summary>Gets the collection of child attributes for the specified code attribute argument.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.Collection">
			<summary>Gets the collection containing the object that supports this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.DTE">
			<summary>Gets the top-level extensibility object, in this case the <see cref="T:EnvDTE80.DTE2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE80.DTE2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.EndPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object defining the end of the code attribute argument.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object defining the end of the code attribute argument.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.Extender(System.String)">
			<summary>Returns the Extender for the code attribute argument.</summary>
			<returns>A string value representing the name of the Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.ExtenderCATID">
			<summary>Gets the category ID (CATID) for the Extender of the code attribute argument.</summary>
			<returns>A string value representing the CATID for the Extender.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.ExtenderNames">
			<summary>Gets the names of the Extenders for the code attribute arguments.</summary>
			<returns>An object representing one or more Extender names.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.FullName">
			<summary>Gets the fully qualified name of the code attribute argument's definition.</summary>
			<returns>A string representing the fully qualified name of the code attribute argument's definition.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.InfoLocation">
			<summary>Gets a constant indicating the location of the code attribute argument.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this code attribute argument.</summary>
			<returns>A boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.Kind">
			<summary>Gets an enumeration value that defines the type of code element.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.Language">
			<summary>Gets the programming language that is used to author the code.</summary>
			<returns>A string representing a <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.Name">
			<summary>Gets or sets a string representing the name of the object.</summary>
			<returns>A string representing the name of the <see cref="T:EnvDTE80.CodeAttributeArgument"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.ProjectItem">
			<summary>Gets the associated <see cref="T:EnvDTE.ProjectItem"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object defining the start of the code attribute argument.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object defining the start of the code attribute argument.</returns>
		</member>
		<member name="P:EnvDTE80.CodeAttributeArgument.Value">
			<summary>Sets or gets the value of an attribute argument.</summary>
			<returns>A string representing the value of an attribute argument.</returns>
		</member>
		<member name="T:EnvDTE80.CodeClass2">
			<summary>Represents a class in source code.</summary>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the class in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then Position indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddBase(System.Object,System.Object)">
			<summary>Adds an item to the list of inherited objects.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new base.If the value is a Long data type, then Position indicates the element after which to add the new base. Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Base">Required. The class from which to derive implementation, either a <see cref="T:EnvDTE.CodeClass"></see> or a fully qualified type name. Visual C++ requires the colon-separated (::) format for its fully qualified type names. All other languages use the period-separated format.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new class in the specified code class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeClass"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element.If the value is a Long data type, then Position indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant specifying the access type.</param>
			<param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects, each representing an interface that the new class promises to implement.</param>
			<param name="Name">Required. The name of the class.</param>
			<param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass"></see> objects from which the new class inherits its implementations.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new delegate in the specified class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeDelegate"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a Long data type, then Position indicates the element after which to add the new element. Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant specifying the access type.</param>
			<param name="Name">Required. The name of the delegate to add.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new enumeration in the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeEnum"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then Position indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant specifying the enumeration's access type.</param>
			<param name="Name">Required. The name of the enumeration to add.</param>
			<param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType"></see> objects that specify the underlying type of the new enum.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddEvent(System.String,System.String,System.Boolean,System.Object,EnvDTE.vsCMAccess)">
			<summary>Adds a class event.</summary>
			<returns>Returns the class event handler that was created.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new event handler.If the value is a Long, then Position indicates the location of the element after which to add the new element.Because automation collections begin their count at 1, passing 0 indicates that the new event handler should be placed at the beginning of the class. A value of -1 means the function should be placed at the end.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. Name of the class event to add.</param>
			<param name="CreatePropertyStyleEvent">Optional. Creates an event that has a property style accessor. True indicates that the event should have an accessor, false indicates that it should not.</param>
			<param name="FullDelegateName">Required. Name of the delegate to base the event on. This acts as a template for the new event handler.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
			<summary>Creates a new function in the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new function.If the value is a Long, then Position indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the function should be placed at the end.</param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the new function.</param>
			<param name="Kind">Required. The vsCMFunction constant indicating the type of function, such as whether the function is a property getter, a method, and so forth.</param>
			<param name="Location">Optional. Location of the new function.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddImplementedInterface(System.Object,System.Object)">
			<summary>Adds an interface to the list of inherited objects.</summary>
			<returns>A <see cref="T:EnvDTE.CodeInterface"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new interface.If the value is a Long data type, then Position indicates the element after which to add the new element. Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Base">Required. The interface that the class will implement. This is either a <see cref="T:EnvDTE.CodeInterface"></see> object or a fully-qualified type name.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
			<summary>Creates a new property construct in the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeProperty"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element.If the value is a Long data type, then the Position method indicates the element after which to add the new element. Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> value, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant value indicating the access type.</param>
			<param name="GetterName">Required. The name of the function that gets the property's value.</param>
			<param name="Location">Optional. Location of the new function.</param>
			<param name="PutterName">Required. The name of the function that sets the property.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new structure in the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeStruct"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element.If the value is a Long data type, then the Position method indicates the element after which to add the new element. Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects representing interfaces that the new class promises to implement.</param>
			<param name="Name">Required. The name of the new structure.</param>
			<param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects from which the new struct derives.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
			<summary>Creates a new variable in the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeVariable"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element.If the value is a Long data type, then Position indicates the element after which to add the new element. Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the new variable.</param>
			<param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeClass2.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)"></see> fails.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the class.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the class to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the class.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the class to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.RemoveBase(System.Object)">
			<summary>Removes an object from the list of bases.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> or the name of one in the collection.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.RemoveInterface(System.Object)">
			<summary>Removes an interface from the list of implemented interfaces.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> or the name of one in the collection.</param>
		</member>
		<member name="M:EnvDTE80.CodeClass2.RemoveMember(System.Object)">
			<summary>Removes a member of the class.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of one in the collection.</param>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Access">
			<summary>Sets or gets the access attributes of this code class.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMAccess"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Attributes">
			<summary>Gets a collection of all of the attributes for the code class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Bases">
			<summary>Gets a collection of classes from which this code class derives.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Children">
			<summary>Gets a collection of objects contained within this code class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Collection">
			<summary>Gets the collection contained within the code class.</summary>
			<returns>A collection of <see cref="T:EnvDTE.CodeClass"></see> objects.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Comment">
			<summary>Sets or gets the comment associated with the code class.</summary>
			<returns>A string representing the comment.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.DataTypeKind">
			<summary>Sets of gets the relationship of this class with other classes.</summary>
			<returns>Returns value from the <see cref="T:EnvDTE80.vsCMDataTypeKind"></see> enumeration.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.DerivedTypes">
			<summary>Gets a collection of objects derived from the code class. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.DocComment">
			<summary>Gets or sets the document comment for the code class.</summary>
			<returns>A string representing the document comment.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.EndPoint">
			<summary>Gets the edit point that is the location of the end of the code class.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Extender(System.String)">
			<summary>Returns the requested Extender object if it is available for the code class. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A string representing the name of the Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeClass2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the code class. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A GUID string representing the CATID of the code class.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.ExtenderNames">
			<summary>Gets a list of available Extenders for the code class. Not implemented in Visual C# and Visual J#.</summary>
			<returns>An array of strings representing the list of available Extenders for the object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.FullName">
			<summary>Gets the full path and name of the file of the code class.</summary>
			<returns>A string representing the full path and name of the file of the code class.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.ImplementedInterfaces">
			<summary>Gets a collection of interfaces implemented by the code class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.InheritanceKind">
			<summary>Gets or sets a value indicating whether a class may be used to create a new class.</summary>
			<returns>A <see cref="T:EnvDTE80.vsCMInheritanceKind"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.IsAbstract">
			<summary>Sets or gets whether or not the code class is declared as abstract.</summary>
			<returns>A boolean value that is true if the code class is declared as abstract; false otherwise.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from the code class.</summary>
			<returns>A boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained, otherwise returns false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.IsDerivedFrom(System.String)">
			<summary>Gets a value indicating whether the code class has another code class as its base.</summary>
			<returns>A boolean value that is true if a code class has another code class as its base; false if otherwise.</returns>
			<param name="FullName">Required. The type to search for in the lineage of this type.</param>
		</member>
		<member name="P:EnvDTE80.CodeClass2.IsGeneric">
			<summary>Gets a value indicating whether the current class or struct is a generic.</summary>
			<returns>A boolean value that is true if the current class or struct is a generic, false if otherwise.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.IsShared">
			<summary>Gets or sets the shared (static) status of the class.</summary>
			<returns>true if the class is shared (not static), otherwise false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Kind">
			<summary>Gets an enumeration indicating the type of class.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Language">
			<summary>Gets the programming language used to author the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Members">
			<summary>Gets a collection of code elements contained by the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Name">
			<summary>Sets or gets the name of the class.</summary>
			<returns>A string representing the name of the class.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Namespace">
			<summary>Gets a <see cref="T:EnvDTE.CodeNamespace"></see> object defining the parent namespace of the class.</summary>
			<returns>A <see cref="T:EnvDTE.CodeNamespace"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Parent">
			<summary>Gets the immediate parent object of the class.</summary>
			<returns>An object representing the parent of the class.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.PartialClasses">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="P:EnvDTE80.CodeClass2.Parts">
			<summary>Gets parts of a class.</summary>
			<returns>Returns a list of partial classes associated with this class.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> associated with the given object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.CodeClass2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the class.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeDelegate2">
			<summary>Represents a delegate in source code.</summary>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If Value is a Long data type, then <see cref="M:EnvDTE80.CodeDelegate2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a list, separated by commas, of parameters for a property that has parameters.</param>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.AddBase(System.Object,System.Object)">
			<summary>Adds an item to the list of inherited delegates. This method is not implemented in Visual Basic.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element.If Value is a Long data type, then <see cref="M:EnvDTE80.CodeDelegate2.AddBase(System.Object,System.Object)"></see> indicates the element after which to add the new delegate.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Base">Required. The delegate from which to derive implementation.</param>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.AddParameter(System.String,System.Object,System.Object)">
			<summary>Creates a new parameter for the delegate and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeParameter"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the parameter. If Value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If Value is a Long data type, then <see cref="M:EnvDTE80.CodeDelegate2.AddParameter(System.String,System.Object,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Name">Required. The name of the parameter.</param>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Returns a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the delegate definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the delegate to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Returns a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the delegate definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the delegate to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.RemoveBase(System.Object)">
			<summary>Removes the delegate from the list of bases. This method is not implemented in Visual Basic.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> or the name of one in the collection.</param>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.RemoveMember(System.Object)">
			<summary>Removes a member from the delegate.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of one in the collection.</param>
		</member>
		<member name="M:EnvDTE80.CodeDelegate2.RemoveParameter(System.Object)">
			<summary>Removes a parameter from the delegate's argument list.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of one in the collection.</param>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Access">
			<summary>Sets and gets the access attributes for the specified code delegate.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMAccess"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Attributes">
			<summary>Gets a collection of all of the attributes for the delegate.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.BaseClass">
			<summary>Gets the class from which this <see cref="T:EnvDTE80.CodeDelegate2"></see> object is derived.</summary>
			<returns>A <see cref="T:EnvDTE.CodeClass"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Bases">
			<summary>Gets a collection of classes from which this item is derived.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Children">
			<summary>Gets a collection of objects contained within this <see cref="T:EnvDTE80.CodeDelegate2"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE80.CodeDelegate2"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Comment">
			<summary>Sets and gets the comment associated with the <see cref="T:EnvDTE80.CodeDelegate2"></see>.</summary>
			<returns>A string containing comments associated with the <see cref="T:EnvDTE80.CodeDelegate2"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.DerivedTypes">
			<summary>Gets a collection of objects derived from the <see cref="T:EnvDTE80.CodeDelegate2"></see> object. Currently not implemented in any of the Visual Studio languages.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.DocComment">
			<summary>Sets and gets the documentation comments for <see cref="T:EnvDTE.CodeDelegate"></see> element.</summary>
			<returns>A string containing the documentation comments.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.DTE">
			<summary>Gets the parent object of the delegate, namely a <see cref="T:EnvDTE80.CodeElement2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.EndPoint">
			<summary>Gets the text point that is the location of the end of the delegate.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Extender(System.String)">
			<summary>Returns the requested Extender for the delegate. Not implemented in Visual C# and Visual J#.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the <see cref="T:EnvDTE.CodeDelegate"></see> object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A string containing the GUID that represents the Extender CATID.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.ExtenderNames">
			<summary>Gets a list of available Extenders for the delegate. Not implemented in Visual C# and Visual J#.</summary>
			<returns>An object containing an automation-compliant array of strings. Each string is the name of an Extender for the delegate.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.FullName">
			<summary>Gets the full path and name of the delegate's file.</summary>
			<returns>A string representing the full path and name of the delegate's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.InfoLocation">
			<summary>Gets the capabilities of the code model for the delegate.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.IsCodeType">
			<summary>Gets whether or not a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this delegate.</summary>
			<returns>A Boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained, otherwise returns false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.IsDerivedFrom(System.String)">
			<summary>Indicates whether or not a <see cref="T:EnvDTE80.CodeDelegate2"></see> object has another object as a base.</summary>
			<returns>A Boolean value that is true if a delegate has another delegate as a base; otherwise returns false.</returns>
			<param name="FullName">Required. The type to search for in the lineage of this delegate.</param>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.IsGeneric">
			<summary>Gets whether or not the delegate is a generic.</summary>
			<returns>A Boolean value that is true if the delegate is a generic, false if not.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Kind">
			<summary>Gets an enumeration that defines the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Language">
			<summary>Gets the programming language used to author the delegate.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Members">
			<summary>Gets the collection of items this <see cref="T:EnvDTE80.CodeDelegate2"></see> element contains. Not implemented in Visual Basic.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Name">
			<summary>Sets and gets the name of the <see cref="T:EnvDTE80.CodeDelegate2"></see> object.</summary>
			<returns>A string containing the name of the <see cref="T:EnvDTE80.CodeDelegate2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Namespace">
			<summary>Gets an object defining the parent namespace of the delegate.</summary>
			<returns>A <see cref="T:EnvDTE.CodeNamespace"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Parameters">
			<summary>Gets a collection of parameters for this <see cref="T:EnvDTE80.CodeDelegate2"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection, each element representing a parameter for the delegate.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.CodeDelegate2"></see> object.</summary>
			<returns>The <see cref="P:EnvDTE80.CodeDelegate2.Parent"></see> property returns the immediate parent to the <see cref="T:EnvDTE80.CodeDelegate2"></see> object. To get the containing collection, use the <see cref="P:EnvDTE80.CodeDelegate2.Collection"></see> property.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE80.CodeDelegate2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object, representing the project containing the delegate.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Prototype(System.Int32)">
			<summary>Returns a string holding the stub definition of this delegate.</summary>
			<returns>A string holding the stub definition of this delegate.</returns>
			<param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype"></see> value that indicates what the string contents should be, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the delegate.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeDelegate2.Type">
			<summary>Sets or gets an object representing the programmatic type of the delegate.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeElement2">
			<summary>Represents a code element or construct in a source file.</summary>
		</member>
		<member name="M:EnvDTE80.CodeElement2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object specifying the end of the code element.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeElement2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the beginning of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object specifying the beginning of the portion of the code element.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeElement2.RenameSymbol(System.String)">
			<summary>Changes the declared name of an object and updates all code references to the object within the scope of the current project.</summary>
			<param name="NewName">Required. The name of the symbol to rename.</param>
		</member>
		<member name="P:EnvDTE80.CodeElement2.Children">
			<summary>Gets a collection of objects contained within this <see cref="T:EnvDTE80.CodeElement2"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.Collection">
			<summary>Gets the <see cref="T:EnvDTE.CodeElements"></see> collection containing the <see cref="T:EnvDTE80.CodeElement2"></see> that supports this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.ElementID">
			<summary>Gets a value that uniquely identifies the element. Not implemented in Visual C# or Visual J#.</summary>
			<returns>A string representing the unique value for the element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.EndPoint">
			<summary>Gets the text point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object representing the end of the code element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.Extender(System.String)">
			<summary>Returns the requested Extender if it is available for this <see cref="T:EnvDTE80.CodeElement2"></see> object. Not implemented in Visual C# or Visual J#.</summary>
			<returns>A string representing the name of an Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeElement2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the <see cref="T:EnvDTE80.CodeElement2"></see> object. Not implemented in Visual C# or Visual J#.</summary>
			<returns>A string representing the Extender category ID (CATID) for the <see cref="T:EnvDTE80.CodeElement2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.ExtenderNames">
			<summary>Gets a list of available Extenders for the <see cref="T:EnvDTE80.CodeElement2"></see> object. Not implemented in Visual C# or Visual J#.</summary>
			<returns>An object containing an automation-compliant array of strings, each representing the name of an Extender.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.FullName">
			<summary>Gets the full path and name of the <see cref="T:EnvDTE80.CodeElement2"></see> object's file.</summary>
			<returns>A string representing the full path and name of the <see cref="T:EnvDTE80.CodeElement2"></see> object's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.IsCodeType">
			<summary>Gets whether or not a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from the <see cref="T:EnvDTE80.CodeElement2"></see> object.</summary>
			<returns>A boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from the <see cref="T:EnvDTE.CodeElement"></see> object; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.Kind">
			<summary>Gets an enumeration that defines the type of code element.</summary>
			<returns>A <see cref="T:EnvDTE80.vsCMElement2"></see> value specifying the code element type.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.Language">
			<summary>Gets the programming language that is used to author the <see cref="T:EnvDTE80.CodeElement2"></see>.</summary>
			<returns>A string representing a <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant specifying the programming language.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.Name">
			<summary>Gets or sets the name of the <see cref="T:EnvDTE80.CodeElement2"></see> object.</summary>
			<returns>The name of the <see cref="T:EnvDTE80.CodeElement2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE.CodeElement"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object associated with the code element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeElement2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the <see cref="T:EnvDTE80.CodeElement2"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object defining the start position of the code element.</returns>
		</member>
		<member name="T:EnvDTE80.CodeEvent">
			<summary>Models a code event element.</summary>
		</member>
		<member name="M:EnvDTE80.CodeEvent.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. The position of the element after which to add the new element.If the value is zero, the new element is added at the beginning of the collection (default); if the value is -1, at the end.</param>
			<param name="Name">The name of the attribute.</param>
			<param name="Value">The value of the attribute, which may be a comma separated list of parameters for a parameterized property.</param>
		</member>
		<member name="M:EnvDTE80.CodeEvent.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code event element.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeEvent.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the beginning of the code event element.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Access">
			<summary>Gets or sets a value that determines how a code event element may be accessed by other code.</summary>
			<returns>One of the values of the <see cref="T:EnvDTE.vsCMAccess"></see> enumerator. </returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Adder">
			<summary>Gets or sets the event listeners.</summary>
			<returns>The <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Attributes">
			<summary>Gets a <see cref="T:EnvDTE.CodeElements"></see> collection of attributes for this code event element.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Children">
			<summary>Gets a collection of objects contained within this <see cref="T:EnvDTE80.CodeEvent"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Collection">
			<summary>Gets a <see cref="T:EnvDTE.CodeElements"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Comment">
			<summary>Gets or sets a header comment associated with the code event element.</summary>
			<returns>A string containing a header comment, or an empty string if no comment is provided.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.DocComment">
			<summary>Gets or sets a documentation comment associated with the code event element.</summary>
			<returns>A string containing a documentation comment associated with the code event element, or an empty string if no comment is provided.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.EndPoint">
			<summary>Gets the location in the source file marked as an end of the code event element.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Extender(System.String)">
			<summary>Gets the requested Extender if it is available for this <see cref="T:EnvDTE.CodeElement"></see> object.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeEvent.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object.</summary>
			<returns>A string containing the Extender category ID (CATID) for the object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.ExtenderNames">
			<summary>Gets a list of available Extenders for the object.</summary>
			<returns>An object containing an automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.FullName">
			<summary>Gets a fully-qualified name of the specified <see cref="T:EnvDTE80.CodeEvent"></see> object. </summary>
			<returns>A string containing a fully-qualified name of the specified <see cref="T:EnvDTE80.CodeEvent"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>One of the <see cref="T:EnvDTE.vsCMInfoLocation"></see> values.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.IsCodeType">
			<summary>Gets whether the <see cref="T:EnvDTE80.CodeEvent"></see> is a <see cref="T:EnvDTE.CodeType"></see>.</summary>
			<returns>A boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> can be obtained; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.IsPropertyStyleEvent">
			<summary>Gets a value indicating whether the event has separate methods for adding/ removing events and throwing exceptions.</summary>
			<returns>true if the event has separate methods for adding/removing events and throwing exceptions; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.IsShared">
			<summary>Gets of sets the shared (static) status of the event.</summary>
			<returns>true if the event is shared, else false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Kind">
			<summary>Gets the type of the code element.</summary>
			<returns>One of the <see cref="T:EnvDTE.vsCMElement"></see> values.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A string containing one of the <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> values.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Name">
			<summary>Gets or sets the name of the <see cref="T:EnvDTE80.CodeEvent"></see> object.</summary>
			<returns>The name of the <see cref="T:EnvDTE80.CodeEvent"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.OverrideKind">
			<summary>Gets of sets the override modifiers on a code event.</summary>
			<returns>Returns a value from the <see cref="T:EnvDTE80.vsCMOverrideKind"></see> enumeration describing how a code event can be overridden.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Parent">
			<summary>Gets the immediate parent object of the <see cref="T:EnvDTE80.CodeEvent"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE80.CodeClass2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE80.CodeEvent"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Prototype(System.Int32)">
			<summary>Gets a string containing the description of a code event element.</summary>
			<returns>A string containing the description of a code event element.</returns>
			<param name="Flags">Indicates the string content. For flags values, see <see cref="T:EnvDTE.vsCMPrototype"></see>.</param>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Remover">
			<summary>Gets or sets the event listeners.</summary>
			<returns>The <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.StartPoint">
			<summary>Gets the location in the source file marked as a beginning of the code event element.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Thrower">
			<summary>Gets or sets <see cref="T:EnvDTE.CodeFunction"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeEvent.Type">
			<summary>Gets or sets the type of the CodeTypeReference object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeFunction2">
			<summary>An object defining a function construct in a source file.</summary>
		</member>
		<member name="M:EnvDTE80.CodeFunction2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeFunction2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a comma-delimited list of parameters for a parameterized property.</param>
		</member>
		<member name="M:EnvDTE80.CodeFunction2.AddParameter(System.String,System.Object,System.Object)">
			<summary>Creates a new parameter code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeParameter"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeFunction2.AddParameter(System.String,System.Object,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Name">Required. The name of the parameter.</param>
		</member>
		<member name="M:EnvDTE80.CodeFunction2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeFunction2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeFunction2.RemoveParameter(System.Object)">
			<summary>Removes a parameter from the argument list.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of one in the collection.</param>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Access">
			<summary>Sets or gets the access attributes of this item.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMAccess"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Attributes">
			<summary>Gets a collection of all attributes for the <see cref="T:EnvDTE.CodeFunction"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.CanOverride">
			<summary>Gets or sets whether or not the function can be overridden.</summary>
			<returns>A Boolean value that is true if the function can be overridden; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Children">
			<summary>Gets a collection of objects contained within this code construct.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.CodeFunction"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Comment">
			<summary>Gets or sets the comment associated with the code element.</summary>
			<returns>A string representing the comment associated with the code element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.DocComment">
			<summary>Gets or sets the document comment for the current code model element.</summary>
			<returns>A string representing the document comment.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.EndPoint">
			<summary>Gets the text point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Extender(System.String)">
			<summary>Gets the requested Extender object if it is available for this object.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object.</summary>
			<returns>A string representing the CATID of the object in GUID form.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.ExtenderNames">
			<summary>Gets a list of available Extenders for the object.</summary>
			<returns>An object containing an automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>A string representing the full path and name of the object's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.FunctionKind">
			<summary>Gets an enumeration describing how a function is used.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMFunction"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this object.</summary>
			<returns>A Boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.IsGeneric">
			<summary>Gets a value indicating whether or not the function is a generic.</summary>
			<returns>A Boolean value that is true if the function is a generic; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.IsOverloaded">
			<summary>Gets whether or not a function is overloaded.</summary>
			<returns>A Boolean value that is true if a function is overloaded; false if otherwise.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.IsShared">
			<summary>Gets or sets whether or not the item is statically defined, that is, whether the item is common to all instances of this object type or only to this object specifically.</summary>
			<returns>A Boolean value that is true if the method is shared; false if otherwise.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Kind">
			<summary>Gets an enumeration indicating the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.MustImplement">
			<summary>Gets or sets a value indicating whether or not the item is declared abstract and thus requires an implementation.</summary>
			<returns>A Boolean that is true if the method is declared abstract and thus requires an implementation; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Name">
			<summary>Gets or sets the name of the object.</summary>
			<returns>A string representing the name of the <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Overloads">
			<summary>Gets a collection of overloaded methods for this item.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.OverrideKind">
			<summary>Sets or gets whether a CodeFunction object represents a parent class function that may be overridden, a child class function that is replacing the inherited behavior, or whether the function cannot be overridden.</summary>
			<returns>A <see cref="T:EnvDTE80.vsCMOverrideKind"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Parameters">
			<summary>Gets a collection of parameters for this item.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeFunction"></see> object.</summary>
			<returns>The parent object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE.CodeFunction"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Prototype(System.Int32)">
			<summary>Gets a string holding the stub definition of this object.</summary>
			<returns>The stub definition of this <see cref="T:EnvDTE.CodeFunction"></see>.</returns>
			<param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype"></see> value that indicates the contents of the string, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeFunction2.Type">
			<summary>Gets or sets an object representing the programmatic type.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeImport">
			<summary>Models the use of statements that import namespaces.</summary>
		</member>
		<member name="M:EnvDTE80.CodeImport.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeImport.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the beginning of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.CodeImport.Alias">
			<summary>Gets or sets a friendly name for the referenced namespace.</summary>
			<returns>A name for the referenced namespace.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Children">
			<summary>Gets a collection of objects contained within this <see cref="T:EnvDTE80.CodeImport"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Collection">
			<summary>Gets the <see cref="T:EnvDTE.CodeElements"></see> collection containing the CodeImport that supports this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.EndPoint">
			<summary>Gets the text point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Extender(System.String)">
			<summary>Gets the requested Extender if it is available for this CodeElement object.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeImport.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object.</summary>
			<returns>A string representing the Extender category ID (CATID) for the object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.ExtenderNames">
			<summary>Gets a list of available Extenders for the object.</summary>
			<returns>An object containing an automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.FullName">
			<summary>Gets a fully-qualified name of the specified code element. </summary>
			<returns>A string containing a fully-qualified name of the specified code element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.IsCodeType">
			<summary>Gets a value indicating whether or not a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from the <see cref="T:EnvDTE80.CodeImport"></see> object.</summary>
			<returns>A Boolean value that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from the <see cref="T:EnvDTE80.CodeImport"></see> object; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Kind">
			<summary>Gets an enumeration that defines the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Language">
			<summary>Gets the programming language that is used to author the <see cref="T:EnvDTE80.CodeImport"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Name">
			<summary>Gets or sets the name of the <see cref="T:EnvDTE80.CodeImport"></see> object.</summary>
			<returns>The name of the <see cref="T:EnvDTE80.CodeImport"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Namespace">
			<summary>Gets or sets the name of the imported namespace.</summary>
			<returns>The name of the imported namespace.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.Parent">
			<summary>Gets the object containing this import.</summary>
			<returns>The parent object of this import.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE.CodeElement"></see>  object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeImport.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the <see cref="T:EnvDTE80.CodeImport"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeInterface2">
			<summary>Object representing an interface in source code.</summary>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeInterface2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.AddBase(System.Object,System.Object)">
			<summary>Adds an item to the list of inherited objects.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeInterface2.AddBase(System.Object,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Base">Required. The class from which to derive implementation.</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.AddEvent(System.String,System.String,System.Boolean,System.Object,EnvDTE.vsCMAccess)">
			<summary>Adds an interface event.</summary>
			<returns>Returns the interface event created.</returns>
			<param name="Position">Optional. Location of the event in code.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. Name of the interface event to add.</param>
			<param name="CreatePropertyStyleEvent">Optional. Creates an event that has a property style accessor.</param>
			<param name="FullDelegateName">Required. Name of the delegate to base the event on.</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new function code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeInterface2.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the new function.</param>
			<param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction"></see> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
			<summary>Creates a new property code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeProperty"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeInterface2.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> value, or a fully qualified type name.</param>
			<param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess"></see> constant value.</param>
			<param name="GetterName">Required. The name of the function that gets the property's value.</param>
			<param name="Location">Optional. The location.</param>
			<param name="PutterName">Required. The name of the function that sets the property.</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.RemoveBase(System.Object)">
			<summary>Removes an object from the list of bases.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> or the name of one in the collection.</param>
		</member>
		<member name="M:EnvDTE80.CodeInterface2.RemoveMember(System.Object)">
			<summary>Removes a member code construct.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of one in the collection.</param>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Access">
			<summary>Sets or gets the access attributes of this item.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMAccess"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Attributes">
			<summary>Gets a collection of all of the attributes for the parent object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Bases">
			<summary>Gets a collection of classes from which this item is derived.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Children">
			<summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeInterface"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.CodeInterface"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Comment">
			<summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeInterface"></see>.</summary>
			<returns>The comment associated with the code element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.DataTypeKind">
			<summary>Sets of gets the relationship of this interface with other interfaces.</summary>
			<returns>Returns value from the vsCMDataTypeKind enumeration.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.DerivedTypes">
			<summary>Gets a collection of objects derived from this object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.DocComment">
			<summary>Gets or sets the document comment for the current code model element.</summary>
			<returns>The document comment.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.EndPoint">
			<summary>Gets the text point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Extender(System.String)">
			<summary>Gets the requested Extender object if it is available for this object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A string representing the CATID.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.ExtenderNames">
			<summary>Gets a list of available Extenders for the object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>An automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>A string representing the full path and name of the object's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this object.</summary>
			<returns>A Boolean that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.IsDerivedFrom(System.String)">
			<summary>Gets a value indicating whether an object has another object as a base.</summary>
			<returns>A Boolean that is true if an object has another object as a base; otherwise, false.</returns>
			<param name="FullName">Required. The type to search for in the lineage of this type.</param>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.IsGeneric">
			<summary>Gets a value indicating whether or not the interface is a generic.</summary>
			<returns>A Boolean that is true if the current interface is generic; otherwise false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Kind">
			<summary>Gets an enumeration indicating the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Members">
			<summary>Gets a collection of items contained by this <see cref="T:EnvDTE.CodeInterface"></see> element.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Name">
			<summary>Gets or sets the name of the object.</summary>
			<returns>A string representing the name of the object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Namespace">
			<summary>Gets an object defining the parent namespace.</summary>
			<returns>A <see cref="T:EnvDTE.CodeNamespace"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeInterface"></see> object.</summary>
			<returns>An object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.Parts">
			<summary>Gets parts of an interface.</summary>
			<returns>Returns a list of partial classes associated with this interface.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE.CodeInterface"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeInterface2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeModel2">
			<summary>Allows access to programmatic constructs in a source code file.</summary>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddAttribute(System.String,System.Object,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeModel2.AddAttribute(System.String,System.Object,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Location">Required. The path and file name for the new attribute. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddAttribute(System.String,System.Object,System.String,System.Object)"></see> fails.</param>
			<param name="Value">Required. The value of the attribute, which may be a comma-separated list of parameters for a parameterized property.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new class code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeClass"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeModel2.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="ImplementedInterfaces">Required. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects, each representing an interface that the new class promises to implement.</param>
			<param name="Name">Required. The name of the class.</param>
			<param name="Location">Required. The path and file name for the new class definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddClass(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> fails.</param>
			<param name="Bases">Required. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass"></see> objects from which the new class inherits its implementations.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeDelegate"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeModel2.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This value can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the delegate to add.</param>
			<param name="Location">Required. The path and file name for the new delegate definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddDelegate(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> fails.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeEnum"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeModel2.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the enum to add.</param>
			<param name="Location">Required. The path and file name for the new enum definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddEnum(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> fails.</param>
			<param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType"></see> objects that specify the underlying type of the new enum.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new function code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeModel2.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction"></see> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the new function.</param>
			<param name="Location">Required. The path and file name for the new function definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddFunction(System.String,System.Object,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> fails.</param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeInterface"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeModel2.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the interface to add.</param>
			<param name="Location">Required. The path and file name for the new interface definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddInterface(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> fails.</param>
			<param name="Bases">Optional. Default value is Nothing or null. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects from which the new interface derives.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddNamespace(System.String,System.Object,System.Object)">
			<summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeNamespace"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeModel2.AddNamespace(System.String,System.Object,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new namespace.</param>
			<param name="Location">Required. The path and file name for the new namespace definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddNamespace(System.String,System.Object,System.Object)"></see> fails.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeStruct"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeModel2.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or CodeInterfaces representing interfaces that the new class promises to implement.</param>
			<param name="Name">Required. The name of the new structure.</param>
			<param name="Location">Required. The path and file name for the new structure definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddStruct(System.String,System.Object,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> fails.</param>
			<param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects from which the new interface derives.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeVariable"></see> object.</returns>
			<param name="Position">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Type">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeModel2.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Access">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeModel2.AddVariable(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> fails.</param>
			<param name="Name">Required. The name of the new variable.</param>
			<param name="Location">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.CodeTypeFromFullName(System.String)">
			<summary>Returns a code element based on a fully qualified name.</summary>
			<returns>A <see cref="T:EnvDTE.CodeType"></see> object.</returns>
			<param name="Name">Required. A fully qualified symbol name, such as Namespace1.Namespace2.Class1.Member1.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.CreateCodeTypeRef(System.Object)">
			<summary>Returns a <see cref="T:EnvDTE.CodeTypeRef"></see> object based on the passed, data-type indicator.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.DotNetNameFromLanguageSpecific(System.String)">
			<summary>Converts a native language string to .Net format.</summary>
			<returns>The converted string.</returns>
			<param name="LanguageName">The string to convert.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.ElementFromID(System.String)">
			<summary>Returns a specific, existing code element.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="ID">The name of the element.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.IsValidID(System.String)">
			<summary>Returns whether a specified name is a valid programmatic identifier for the current language.</summary>
			<returns>A Boolean value that is true when the identifier is valid; false when it is not, such as if it is a keyword.</returns>
			<param name="Name">Required. The name of the identifier to check.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.LanguageSpecificNameFromDotNet(System.String)">
			<summary>Translates from the fully qualified Visual Studio name to an unmanaged namespace form.</summary>
			<returns>Returns a string containing an unmanaged namespace.</returns>
			<param name="DotNETName">The name of the fully qualified Visual Studio namespace.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.Remove(System.Object)">
			<summary>Removes the specified code element from the source file.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of a code element to remove from the source code.</param>
		</member>
		<member name="M:EnvDTE80.CodeModel2.Synchronize">
			<summary>Ensures that all current code model events have been raised and the model has finished being generated.</summary>
		</member>
		<member name="P:EnvDTE80.CodeModel2.CodeElements">
			<summary>Gets a collection of <see cref="T:EnvDTE.CodeElements"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeModel2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeModel2.IsCaseSensitive">
			<summary>Gets a value indicating whether the current language is case-sensitive.</summary>
			<returns>A Boolean that is true if the current language is case-sensitive; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeModel2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeModel2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeModel"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeModelEvents">
			<summary>Defines events supported by the CodeModel object. Refer to <see cref="T:EnvDTE80.CodeModelEventsClass"></see> for this object's documentation.</summary>
		</member>
		<member name="T:EnvDTE80.CodeModelEventsClass">
			<summary>Refer to <see cref="T:EnvDTE80.CodeModelEvents"></see> for this functionality. Do not instantiate from this class.</summary>
		</member>
		<member name="M:EnvDTE80.CodeModelEventsClass.#ctor">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80.CodeModelEventsClass.ElementAdded">
			<summary>Raised when a <see cref="T:EnvDTE.CodeElement"></see> object has been created. The new object is passed to the event handler.</summary>
		</member>
		<member name="E:EnvDTE80.CodeModelEventsClass.ElementChanged">
			<summary>Raised when a <see cref="T:EnvDTE.CodeElement"></see> object has been changed.</summary>
		</member>
		<member name="E:EnvDTE80.CodeModelEventsClass.ElementDeleted">
			<summary>Raised when a <see cref="T:EnvDTE.CodeElement"></see> is deleted.</summary>
		</member>
		<member name="M:EnvDTE80.CodeModelEventsClass.add_ElementAdded(EnvDTE80._dispCodeModelEvents_ElementAddedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.CodeModelEventsClass.add_ElementChanged(EnvDTE80._dispCodeModelEvents_ElementChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.CodeModelEventsClass.add_ElementDeleted(EnvDTE80._dispCodeModelEvents_ElementDeletedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.CodeModelEventsClass.remove_ElementAdded(EnvDTE80._dispCodeModelEvents_ElementAddedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.CodeModelEventsClass.remove_ElementChanged(EnvDTE80._dispCodeModelEvents_ElementChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.CodeModelEventsClass.remove_ElementDeleted(EnvDTE80._dispCodeModelEvents_ElementDeletedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80.CodeModelLanguageConstants2">
			<summary>A constant specifying the language used to author the code.</summary>
		</member>
		<member name="F:EnvDTE80.CodeModelLanguageConstants2.vsCMLanguageJSharp">
			<summary>Visual J# constant.</summary>
		</member>
		<member name="T:EnvDTE80.CodeParameter2">
			<summary>An object defining a parameter to a function, property, and so on.</summary>
		</member>
		<member name="M:EnvDTE80.CodeParameter2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeParameter2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a comma separated list of parameters for a parameterized property.</param>
		</member>
		<member name="M:EnvDTE80.CodeParameter2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeParameter2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Attributes">
			<summary>Gets a collection of the attributes for the parent object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Children">
			<summary>Gets a collection of objects contained within this code construct.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.CodeParameter"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.DefaultValue">
			<summary>Gets or sets the literal value that exists in the code.</summary>
			<returns>The literal value that exists in the code.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.DocComment">
			<summary>Gets or sets the document comment for the current code model element.</summary>
			<returns>A string representing the document comment.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.EndPoint">
			<summary>Gets the edit point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Extender(System.String)">
			<summary>Gets the requested Extender if it is available for the <see cref="T:EnvDTE.CodeParameter"></see> object.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the <see cref="T:EnvDTE.CodeParameter"></see> object.</summary>
			<returns>The GUID representing the CATID of the <see cref="T:EnvDTE.CodeParameter"></see> object as a string.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.ExtenderNames">
			<summary>Gets a list of available Extenders for the object.</summary>
			<returns>An automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>The full path and name of the <see cref="T:EnvDTE.CodeParameter"></see> object's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this <see cref="T:EnvDTE.CodeParameter"></see> object.</summary>
			<returns>A Boolean that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Kind">
			<summary>Gets an enumeration indicating the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Name">
			<summary>Gets or sets the name of the object.</summary>
			<returns>A string representing the name of the <see cref="T:EnvDTE.CodeParameter"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.ParameterKind">
			<summary>Gets or sets a value indicating whether the parameter is expected to have value or reference behavior</summary>
			<returns>A <see cref="T:EnvDTE80.vsCMParameterKind"></see> enumeration.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeParameter"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> associated with the given object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeParameter2.Type">
			<summary>Gets or sets an object representing the programmatic type.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeProperty2">
			<summary>An object defining a property construct in a source file.</summary>
		</member>
		<member name="M:EnvDTE80.CodeProperty2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeProperty2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas </param>
		</member>
		<member name="M:EnvDTE80.CodeProperty2.AddParameter(System.String,System.Object,System.Object)">
			<summary>Adds a parameter to a property definition.</summary>
			<returns>A <see cref="T:EnvDTE.CodeParameter"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeProperty2.AddParameter(System.String,System.Object,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Name">Required. The name of the parameter.</param>
		</member>
		<member name="M:EnvDTE80.CodeProperty2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeProperty2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeProperty2.RemoveParameter(System.Object)">
			<summary>Removes a parameter from the property's signature.</summary>
			<param name="Element">The parameter to remove,</param>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Access">
			<summary>Gets or sets the access attributes of this item.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMAccess"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Attributes">
			<summary>Gets a collection of all attributes for the parent object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Children">
			<summary>Gets a collection of objects contained within this <see cref="T:EnvDTE80.CodeProperty2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.CodeProperty"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Comment">
			<summary>Gets or sets the comment associated with the code element.</summary>
			<returns>The comment associated with the code element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.DocComment">
			<summary>Gets or sets the document comment for the current code model element.</summary>
			<returns>A string representing the document comment.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.EndPoint">
			<summary>Gets the edit point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Extender(System.String)">
			<summary>Gets the requested Extender if it is available for this object.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object.</summary>
			<returns>A GUID string representing the CATID of the object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.ExtenderNames">
			<summary>Gets a list of available Extenders for the object.</summary>
			<returns>An automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>The full path and name of the object's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Getter">
			<summary>Gets or sets an object defining the code to return a property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this object.</summary>
			<returns>A Boolean that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained, otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.IsDefault">
			<summary>Sets or gets whether this is the default property.</summary>
			<returns>true if this is the default property of the class or interface, otherwise false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.IsGeneric">
			<summary>Gets a value indicating whether or not the property is a generic.</summary>
			<returns>A Boolean that is true if the property is a generic; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.IsShared">
			<summary>Gets or sets the shared status of the property.</summary>
			<returns>true if the status of the property is shared (static), otherwise false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Kind">
			<summary>Gets an enumeration indicating the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Name">
			<summary>Gets or sets the name of the object.</summary>
			<returns>The name of the <see cref="T:EnvDTE.CodeProperty"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.OverrideKind">
			<summary>Gets or sets the override modifiers on a Property.</summary>
			<returns>Returns a value from the vsCMOverrideKind enumeration describing how a property can be overridden.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Parameters">
			<summary>Gets <see cref="T:EnvDTE80.CodeParameter2"></see> objects for any parameters to the property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeProperty"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeClass"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Parent2">
			<summary>Gets the parent of the element.</summary>
			<returns>Returns the class, interface, or struct containing the element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> associated with the given object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Prototype(System.Int32)">
			<summary>Returns a string holding the stub definition of this object.</summary>
			<returns>A string describing the element.</returns>
			<param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype"></see> value that indicates the contents of the string, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Setter">
			<summary>Gets or sets an object defining the code to set a property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeProperty2.Type">
			<summary>Gets or sets an object representing the programmatic type.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeStruct2">
			<summary>Object representing a structure in source code.</summary>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddBase(System.Object,System.Object)">
			<summary>Adds an item to the list of inherited objects.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddBase(System.Object,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Base">Required. The class from which to derive implementation.For <see cref="T:EnvDTE.CodeClass"></see> objects, this is either a <see cref="T:EnvDTE.CodeClass"></see> or a fully qualified type name. Visual C++ requires the colon-separated (::) format for its fully qualified type names. All other languages support the period-separated format.For <see cref="T:EnvDTE.CodeEnum"></see> objects, Base is a variant containing a fully qualified type name or <see cref="T:EnvDTE.CodeType"></see> object upon which the new enum is based. For C#, this is the underlying type of enum. </param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new class code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeClass"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long, then <see cref="M:EnvDTE80.CodeStruct2.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects, each representing an interface that the new class promises to implement.</param>
			<param name="Name">Required. The name of the class.</param>
			<param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass"></see> objects from which the new class inherits its implementations.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeDelegate"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the delegate to add.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeEnum"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the enum to add.</param>
			<param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType"></see> objects that specify the underlying type of the new enum.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddEvent(System.String,System.String,System.Boolean,System.Object,EnvDTE.vsCMAccess)">
			<summary>Adds a struct event.</summary>
			<returns>Returns the struct event created.</returns>
			<param name="Position">Optional. Location of the event in code.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. Name of the struct event to add.</param>
			<param name="CreatePropertyStyleEvent">Optional. Creates an event that has a property style accessor.</param>
			<param name="FullDelegateName">Required. Name of the delegate to base the event on.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
			<summary>Creates a new function code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the new function.</param>
			<param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction"></see> constant indicating the type of function, such as whether the function is a property-get, a method, and so forth.</param>
			<param name="Location">Optional. The location.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddImplementedInterface(System.Object,System.Object)">
			<summary>Adds an interface to the list of inherited objects.</summary>
			<returns>A <see cref="T:EnvDTE.CodeInterface"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddImplementedInterface(System.Object,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Base">Required. The interface the class implements. This is either a <see cref="T:EnvDTE.CodeInterface"></see> or a fully-qualified type name.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
			<summary>Creates a new property code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeProperty"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddProperty(System.String,System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. The type of property. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> value, or a fully qualified type name.</param>
			<param name="Access">Optional. The access. A <see cref="T:EnvDTE.vsCMAccess"></see> constant value.</param>
			<param name="GetterName">Required. The name of the function that gets the property's value.</param>
			<param name="Location">Optional. The location.</param>
			<param name="PutterName">Required. The name of the function that sets the property.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeStruct"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects, each representing interfaces that the new class promises to implement.</param>
			<param name="Name">Required. The name of the new structure.</param>
			<param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects from which the new interface derives.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)">
			<summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeVariable"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeStruct2.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
			<param name="Name">Required. The name of the new variable.</param>
			<param name="Location">Optional. The path and file name for the new variable definition. Depending on the language, the file name is either relative or absolute to the project file. The file is added to the project if it is not already a project item. If the file cannot be created and added to the project, then <see cref="M:EnvDTE80.CodeStruct2.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess,System.Object)"></see> fails.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.RemoveBase(System.Object)">
			<summary>Removes an object from the list of bases.</summary>
			<param name="Element">Removes an object from the list of bases.Required. A <see cref="T:EnvDTE.CodeElement"></see> or the name of one in the collection.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.RemoveInterface(System.Object)">
			<summary>Removes an interface from the list of implemented interfaces.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> or the name of one in the collection.</param>
		</member>
		<member name="M:EnvDTE80.CodeStruct2.RemoveMember(System.Object)">
			<summary>Removes a member code construct.</summary>
			<param name="Element">Removes a member code construct.Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of one in the collection.</param>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Access">
			<summary>Gets or sets the access attributes of this item.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMAccess"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Attributes">
			<summary>Gets a collection of <see cref="T:EnvDTE.CodeElements"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Bases">
			<summary>Gets a collection of classes from which this CodeStruct derives.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Children">
			<summary>Gets a collection of <see cref="T:EnvDTE.CodeElements"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Collection">
			<summary>Gets a <see cref="T:EnvDTE.CodeElements"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Comment">
			<summary>Gets or sets the comment associated with the <see cref="T:EnvDTE.CodeStruct"></see>.</summary>
			<returns>The comment associated with the <see cref="T:EnvDTE.CodeStruct"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.DataTypeKind">
			<summary>Sets of gets the relationship of this struct with other structs.</summary>
			<returns>Returns value from the vsCMDataTypeKind enumeration.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.DerivedTypes">
			<summary>Gets a collection of objects derived from this <see cref="T:EnvDTE.CodeStruct"></see>. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.DocComment">
			<summary>Gets or sets the document comment for the current <see cref="T:EnvDTE.CodeStruct"></see>.</summary>
			<returns>The document comment for the current <see cref="T:EnvDTE.CodeStruct"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.EndPoint">
			<summary>Gets the edit point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Extender(System.String)">
			<summary>Gets the requested Extender object if it is available for this object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>A GUID representing the CATID of the object as a string.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.ExtenderNames">
			<summary>Gets a list of available Extenders for the object. Not implemented in Visual C# and Visual J#.</summary>
			<returns>An automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>The full path and name of the <see cref="T:EnvDTE.CodeStruct"></see>'s file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.ImplementedInterfaces">
			<summary>Gets a collection of interfaces implemented by this <see cref="T:EnvDTE.CodeStruct"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.IsAbstract">
			<summary>Gets or sets a value indicating whether or not an item is declared as abstract.</summary>
			<returns>A Boolean that is true if the item is declared as abstract; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this object.</summary>
			<returns>A Boolean that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.IsDerivedFrom(System.String)">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeStruct"></see> has another object as a base.</summary>
			<returns>A Boolean that is true if an object has another object as a base; otherwise, false.</returns>
			<param name="FullName">Required. The type to search for in the lineage of this type.</param>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.IsGeneric">
			<summary>Gets a value indicating whether the current class or struct is a generic.</summary>
			<returns>A Boolean that is true if the current class or struct is a generic, false if otherwise.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Kind">
			<summary>Gets an enumeration indicating the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A string representing a <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Members">
			<summary>Gets a collection of <see cref="T:EnvDTE.CodeElements"></see> contained by this <see cref="T:EnvDTE.CodeStruct"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Name">
			<summary>Gets or sets the name of the <see cref="T:EnvDTE.CodeStruct"></see>.</summary>
			<returns>The name of the <see cref="T:EnvDTE.CodeStruct"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Namespace">
			<summary>Gets the <see cref="T:EnvDTE.CodeNamespace"></see> object defining the parent namespace.</summary>
			<returns>A <see cref="T:EnvDTE.CodeNamespace"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeStruct"></see> object.</summary>
			<returns>A parent object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.Parts">
			<summary>Gets partial classes associated with a struct.</summary>
			<returns>Returns a list of partial classes associated with this struct.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE.CodeStruct"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeStruct2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.CodeTypeRef2">
			<summary>Defines the type of a construct in a source file.</summary>
		</member>
		<member name="M:EnvDTE80.CodeTypeRef2.CreateArrayType(System.Int32)">
			<summary>Creates an array of specified type, and inserts it into the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
			<param name="Rank">Optional. Default value = 1. The number of dimensions in the type array.</param>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.AsFullName">
			<summary>Gets the fully qualified name of the <see cref="T:EnvDTE.CodeTypeRef"></see> object.</summary>
			<returns>The fully qualified name of the <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.AsString">
			<summary>Gets a string to use for displaying the <see cref="T:EnvDTE.CodeTypeRef"></see> object.</summary>
			<returns>A string used for displaying the <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.CodeType">
			<summary>Gets or sets information describing what kind of <see cref="T:EnvDTE.CodeTypeRef"></see> object this item is.</summary>
			<returns>A <see cref="T:EnvDTE.CodeType"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.ElementType">
			<summary>Gets or sets an object representing the programmatic type.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.IsGeneric">
			<summary>Gets a value indicating whether the current class or struct is a generic.</summary>
			<returns>A Boolean that is true if the current class or struct is a generic; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeTypeRef"></see> object.</summary>
			<returns>A parent object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.Rank">
			<summary>If this item is an array, gets or sets the number of dimensions in this array.</summary>
			<returns>An integer representing how many dimensions the array has if the <see cref="P:EnvDTE.CodeTypeRef.TypeKind"></see> is <see cref="F:EnvDTE.vsCMTypeRef.vsCMTypeRefArray"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.CodeTypeRef2.TypeKind">
			<summary>Gets the base type of the <see cref="T:EnvDTE.CodeTypeRef"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMTypeRef"></see> value.</returns>
		</member>
		<member name="T:EnvDTE80.CodeVariable2">
			<summary>Defines a variable construct in a source file.</summary>
		</member>
		<member name="M:EnvDTE80.CodeVariable2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.CodeVariable2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Name">Required. The name of the new attribute.</param>
			<param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas .</param>
		</member>
		<member name="M:EnvDTE80.CodeVariable2.GetEndPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.CodeVariable2.GetStartPoint(EnvDTE.vsCMPart)">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that marks the end of the code element definition.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
			<param name="Part">Optional. A <see cref="T:EnvDTE.vsCMPart"></see> constant specifying the portion of the code to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Access">
			<summary>Sets or gets the access attributes of this item.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMAccess"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Attributes">
			<summary>Gets a collection of all attributes for the parent object.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Children">
			<summary>Gets a collection of objects contained within this <see cref="T:EnvDTE.CodeVariable"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.CodeVariable"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Comment">
			<summary>Gets or sets the comment associated with the code element.</summary>
			<returns>The comment associated with the code element.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.ConstKind">
			<summary>Sets or gets when the variable is eligible to be changed.</summary>
			<returns>A vsCMConstKind enumeration.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.DocComment">
			<summary>Gets or sets the document comment for the current code model element.</summary>
			<returns>A string representing the document comment.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.EndPoint">
			<summary>Gets the edit point that is the location of the end of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Extender(System.String)">
			<summary>Returns the requested Extender object if it is available.</summary>
			<returns>An Extender.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object.</summary>
			<returns>A GUID representing the CATID.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.ExtenderNames">
			<summary>Gets a list of available Extenders for the object.</summary>
			<returns>An object containing an automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.FullName">
			<summary>Gets the full path and name of the <see cref="T:EnvDTE.CodeVariable"></see> object's file.</summary>
			<returns>The full path name of the <see cref="T:EnvDTE.CodeVariable"></see> object's file.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.InfoLocation">
			<summary>Gets the capabilities of the code model.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMInfoLocation"></see> constant value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.InitExpression">
			<summary>Gets or sets an object defining the initialization code for an element.</summary>
			<returns>An object defining the initialization expression for the code variable.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.IsCodeType">
			<summary>Gets a value indicating whether a <see cref="T:EnvDTE.CodeType"></see> object can be obtained from this object.</summary>
			<returns>A Boolean that is true if a <see cref="T:EnvDTE.CodeType"></see> object can be obtained; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.IsConstant">
			<summary>Gets or sets a value indicating whether or not the item is a constant.</summary>
			<returns>A Boolean that is true if the item is a constant; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.IsGeneric">
			<summary>Gets a value indicating whether the current class is a generic.</summary>
			<returns>A Boolean that is true if the current class or struct is a generic; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.IsShared">
			<summary>Gets or sets a value indicating whether or not the item is statically defined, that is, if the item is common to all instances of this object type or only to this object specifically.</summary>
			<returns>A Boolean that is true if the method is shared; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Kind">
			<summary>Gets an enumeration indicating the type of object.</summary>
			<returns>A <see cref="T:EnvDTE.vsCMElement"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Name">
			<summary>Gets or sets the name of the object.</summary>
			<returns>The name of the object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.CodeVariable"></see> object.</summary>
			<returns>A parent object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE.CodeVariable"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Prototype(System.Int32)">
			<summary>Gets a string holding the stub definition of this object.</summary>
			<returns>A string describing the element.</returns>
			<param name="Flags">Optional. A <see cref="T:EnvDTE.vsCMPrototype"></see> value that indicates the contents of the string, such as only parameter names, parameter types, whole unique signature, and so forth. All flags are set to Off by default.</param>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.StartPoint">
			<summary>Gets a <see cref="T:EnvDTE.TextPoint"></see> object that defines the beginning of the code item.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.CodeVariable2.Type">
			<summary>Gets or sets an object representing the programmatic type.</summary>
			<returns>A <see cref="T:EnvDTE.CodeTypeRef"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.Commands2">
			<summary>Contains all commands, in the form of <see cref="T:EnvDTE.Command"></see> objects, in the environment.</summary>
		</member>
		<member name="M:EnvDTE80.Commands2.Add(System.String,System.Int32,System.Object@)">
			<summary>Microsoft internal use only.</summary>
			<param name="ID"> </param>
			<param name="Control"> </param>
			<param name="Guid"> </param>
		</member>
		<member name="M:EnvDTE80.Commands2.AddCommandBar(System.String,EnvDTE.vsCommandBarType,System.Object,System.Int32)">
			<summary>Creates a command bar that is saved and available the next time the environment is started.</summary>
			<returns>A Microsoft.VisualStudio.CommandBars.CommandBar object.</returns>
			<param name="Position">Optional. The index position, starting at one, in the command bar to place the new command bar.</param>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCommandBarType"></see> constant that determines the type of command bar:</param>
			<param name="CommandBarParent">Optional. An Office Microsoft.VisualStudio.CommandBars.CommandBar object to which the new command bar is to be added. (This is required, however, if Type is <see cref="F:EnvDTE.vsCommandBarType.vsCommandBarTypeMenu"></see>.)</param>
			<param name="Name">Required. A name for the new command bar.</param>
		</member>
		<member name="M:EnvDTE80.Commands2.AddNamedCommand(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Int32,System.Object[]@,System.Int32)">
			<summary>Creates a named command that is saved by the environment and made available the next time the environment starts, even if the Add-in is not loaded on environment startup.</summary>
			<returns>A <see cref="T:EnvDTE.Command"></see> object.</returns>
			<param name="Bitmap">Optional. The ID of a bitmap to display on the button.</param>
			<param name="Tooltip">Required. The text displayed when a user hovers the mouse pointer over any control bound to the new command.</param>
			<param name="vsCommandDisabledFlagsValue">Optional. Determines whether the disabled state of the command is invisible or grey when you supply a ContextUIGUIDs and none are currently active.</param>
			<param name="AddInInstance">Required. The <see cref="T:EnvDTE.AddIn"></see> object is adding the new command.</param>
			<param name="ContextUIGUIDs">Optional. A SafeArray of GUIDs that determines which environment contexts (that is, debug mode, design mode, and so on) enable the command. See DisableFlags.</param>
			<param name="Name">Required. The short form of the name for your new command. <see cref="M:EnvDTE80.Commands2.AddNamedCommand(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Int32,System.Object[]@,System.Int32)"></see> prefaces this with "Addins.Progid." to create a unique name.</param>
			<param name="MSOButton">Required. Indicates whether the named command's button picture is an Office picture. True = button. If MSOButton is False, then Bitmap is the ID of a 16x16 bitmap resource (but not an icon resource) in a Visual C++ resource DLL that must reside in a folder with the language's locale identifier (1033 for English).</param>
			<param name="ButtonText">Required. The name to use if the command is bound to a button that is displayed by name rather than by icon.</param>
		</member>
		<member name="M:EnvDTE80.Commands2.AddNamedCommand2(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Object,System.Object[]@,System.Int32,System.Int32,EnvDTE80.vsCommandControlType)">
			<summary>Creates a named command that is saved by the environment and made available the next time the environment starts, even if the Add-in is not loaded on environment startup.</summary>
			<returns>The named command that was created.</returns>
			<param name="Bitmap">Optional. The ID of a bitmap to display on the button.</param>
			<param name="ContextUIGUIDs">Optional. A SafeArray of GUIDs that determines which environment contexts (that is, debug mode, design mode, and so on) enable the command. See DisableFlags.</param>
			<param name="Tooltip">Required. The text displayed when a user hovers the mouse pointer over any control bound to the new command.</param>
			<param name="ControlType">Defines the control type added when the UI is created.</param>
			<param name="CommandStyleFlags">Value from the vsCommandStyle enumeration. Controls the visual style of any UI added for this command.</param>
			<param name="vsCommandStatusValue">Optional. Determines whether the disabled state of the command is invisible or grey when you supply a ContextUIGUIDs and none are currently active.</param>
			<param name="AddInInstance">Required. The <see cref="T:EnvDTE.AddIn"></see> Object is adding the new command.</param>
			<param name="Name">Required. The short form of the name for your new command. <see cref="M:EnvDTE80.Commands2.AddNamedCommand2(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Object,System.Object[]@,System.Int32,System.Int32,EnvDTE80.vsCommandControlType)"></see> uses the preface, Addins.Progid., to create a unique name.</param>
			<param name="MSOButton">Required. Indicates whether the named command's button picture is an Office picture. True = button. If MSOButton is False, then Bitmap is the ID of a 16x16 bitmap resource (but not an icon resource) in a Visual C++ resource DLL that must reside in a folder with the language's locale identifier (1033 for English).</param>
			<param name="ButtonText">Required. The name to use if the command is bound to a button that is displayed by name rather than by icon.</param>
		</member>
		<member name="M:EnvDTE80.Commands2.CommandInfo(System.Object,System.String@,System.Int32@)">
			<summary>Returns the command GUID and ID associated with the given Microsoft.VisualStudio.CommandBars.CommandBar control.</summary>
			<param name="ID">Required. The command's ID.</param>
			<param name="CommandBarControl">Required. The Microsoft.VisualStudio.CommandBars.CommandBar control associated with the command.</param>
			<param name="Guid">Required. The command's GUID.</param>
		</member>
		<member name="M:EnvDTE80.Commands2.GetEnumerator">
			<summary>Gets an enumerator for items in the <see cref="T:EnvDTE.Commands"></see> collection.</summary>
			<returns>An enumerator.</returns>
		</member>
		<member name="M:EnvDTE80.Commands2.Item(System.Object,System.Int32)">
			<summary>Returns an indexed member of a collection.</summary>
			<returns>A <see cref="T:EnvDTE.Command"></see> object.</returns>
			<param name="ID">Optional. The command ID in the specified command set.</param>
			<param name="index">Required. An absolute index, GUID string, or the command's full name.</param>
		</member>
		<member name="M:EnvDTE80.Commands2.Raise(System.String,System.Int32,System.Object@,System.Object@)">
			<summary>Executes the specified command.</summary>
			<param name="CustomIn">Required. Arguments in a SafeArray passed in from the OLECommandTarget.</param>
			<param name="ID">Required. The command's ID.</param>
			<param name="CustomOut">Required. Arguments in a SafeArray passed out to be returned by the OLECommandTarget.</param>
			<param name="Guid">Required. The command's GUID.</param>
		</member>
		<member name="M:EnvDTE80.Commands2.RemoveCommandBar(System.Object)">
			<summary>Removes a command bar that was created with the <see cref="M:EnvDTE.Commands.AddCommandBar(System.String,EnvDTE.vsCommandBarType,System.Object,System.Int32)"></see> method.</summary>
			<param name="CommandBar">Required. The Microsoft.VisualStudio.CommandBars.CommandBar object to remove.</param>
		</member>
		<member name="M:EnvDTE80.Commands2.UpdateCommandUI(System.Boolean)">
			<summary>Forces a refresh of the command UI state.</summary>
			<param name="PerformImmediately">Optional. If true, then the update is performed before <see cref="M:EnvDTE80.Commands2.UpdateCommandUI(System.Boolean)"></see> returns. If false, then <see cref="M:EnvDTE80.Commands2.UpdateCommandUI(System.Boolean)"></see> returns and the update is performed during idle time.</param>
		</member>
		<member name="P:EnvDTE80.Commands2.Count">
			<summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE.Commands"></see> collection.</summary>
			<returns>The number of objects in the <see cref="T:EnvDTE.Commands"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Commands2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Commands2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Commands"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.ContextGuids">
			<summary>Contains context GUIDs, each of which represents a given IDE or tool window state, such as a debugging is in process, an empty solution is loaded, or the IDE is in design view. This enumeration is passed as an argument to <see cref="M:EnvDTE.Commands.AddNamedCommand(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Int32,System.Object[]@,System.Int32)"></see> and <see cref="M:EnvDTE80.Commands2.AddNamedCommand2(EnvDTE.AddIn,System.String,System.String,System.String,System.Boolean,System.Object,System.Object[]@,System.Int32,System.Int32,EnvDTE80.vsCommandControlType)"></see>.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidCodeWindow">
			<summary>Represents whether the code window is visible or not.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidDataSourceWindowAutoVisible">
			<summary>Represents whether the data source window is visible.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidDataSourceWindowSupported">
			<summary>Represents whether the data source window is supported.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidDebugging">
			<summary>Represents whether the IDE is in debug view.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidDesignMode">
			<summary>Represents whether the IDE is in design view.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidEmptySolution">
			<summary>Represents whether an empty solution is open in the IDE.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidFullScreenMode">
			<summary>Represents whether the IDE is in full screen view.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidNoSolution">
			<summary>Represents whether the IDE is open, but no solution is present.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidNotBuildingAndNotDebugging">
			<summary>Represents whether the IDE is not in the process of building or debugging.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidSolutionBuilding">
			<summary>Represents whether the IDE is currently building a solution.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidSolutionExists">
			<summary>Represents whether a solution exists in the IDE.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidSolutionExistsAndNotBuildingAndNotDebugging">
			<summary>Represents whether a solution exists, but is not currently being built or debugged.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidSolutionHasMultipleProjects">
			<summary>Represents whether the current solution contains more than one project.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidSolutionHasSingleProject">
			<summary>Represents whether the current solution contains only one project.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidSolutionOrProjectUpgrading">
			<summary>Represents whether the current solution, or project in the solution, is being upgraded.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidToolboxInitialized">
			<summary>Represents whether the Toolbox is being started and intialized.</summary>
		</member>
		<member name="F:EnvDTE80.ContextGuids.vsContextGuidWindowsFormsDesigner">
			<summary>Represents whether the Windows Forms Designer is displayed.</summary>
		</member>
		<member name="T:EnvDTE80.dbgEventReason2">
			<summary>Specifies the reason for most debugging events.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2AttachProgram">
			<summary>Program was attached.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2Breakpoint">
			<summary>Breakpoint was hit.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2ContextSwitch">
			<summary>User switched stackframes, threads, or processes.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2DetachProgram">
			<summary>Program was detached.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2EndProgram">
			<summary>Program ended.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2Evaluation">
			<summary>An evaluation occurred.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2ExceptionNotHandled">
			<summary>An exception was not handled.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2ExceptionThrown">
			<summary>An exception was thrown.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2Go">
			<summary>Debugging continued.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2LaunchProgram">
			<summary>Program was launched.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2None">
			<summary>Deprecated. Not in use.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2Step">
			<summary>Step into debugger occurred.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2StopDebugging">
			<summary>Process being debugged has been terminated or detached.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2UnwindFromException">
			<summary>After an exception has occurred, the state has been reset to the state prior to when the exception was thrown.</summary>
		</member>
		<member name="F:EnvDTE80.dbgEventReason2.dbgEventReason2UserBreak">
			<summary>User hits break.</summary>
		</member>
		<member name="T:EnvDTE80.dbgExpressionEvaluationState">
			<summary>Used whenever an expression is evaluated in the immediate window or the <see cref="M:EnvDTE80.Debugger2.GetExpression2(System.String,System.Boolean,System.Boolean,System.Int32)"></see> object in the debugger.</summary>
		</member>
		<member name="F:EnvDTE80.dbgExpressionEvaluationState.dbgExpressionEvaluationStateStart">
			<summary>Evaluation state of the expression has been started.</summary>
		</member>
		<member name="F:EnvDTE80.dbgExpressionEvaluationState.dbgExpressionEvaluationStateStop">
			<summary>Evaluation state of the expression has been stopped.</summary>
		</member>
		<member name="T:EnvDTE80.dbgMinidumpOption">
			<summary>Specifies whether heap information is written to the minidump.</summary>
		</member>
		<member name="F:EnvDTE80.dbgMinidumpOption.dbgMinidumpFull">
			<summary>Include heap information.</summary>
		</member>
		<member name="F:EnvDTE80.dbgMinidumpOption.dbgMinidumpNormal">
			<summary>Does not include heap informaiton.</summary>
		</member>
		<member name="T:EnvDTE80.dbgProcessState">
			<summary>Used by <see cref="T:EnvDTE80.DebuggerProcessEvents"></see> to specify the state of the debugger. </summary>
		</member>
		<member name="F:EnvDTE80.dbgProcessState.dbgProcessStateRun">
			<summary>The debugger is running.</summary>
		</member>
		<member name="F:EnvDTE80.dbgProcessState.dbgProcessStateStop">
			<summary>The debugger is stopped.</summary>
		</member>
		<member name="T:EnvDTE80.Debugger2">
			<summary>The <see cref="T:EnvDTE80.Debugger2"></see> object is used to interrogate and manipulate the state of the debugger and the program being debugged. The <see cref="T:EnvDTE80.Debugger2"></see> object supersedes the <see cref="T:EnvDTE.Debugger"></see> object.</summary>
		</member>
		<member name="M:EnvDTE80.Debugger2.Break(System.Boolean)">
			<summary>Causes the given process to pause its execution so that its current state can be analyzed.</summary>
			<param name="WaitForBreakMode">Set to true to return only when the debugger has entered break mode. Set to false to break and return immediately. See How to: Break Execution for more information.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.DetachAll">
			<summary>Detaches from all attached programs.</summary>
		</member>
		<member name="M:EnvDTE80.Debugger2.ExecuteStatement(System.String,System.Int32,System.Boolean)">
			<summary>Executes the specified statement. If the TreatAsExpression flag is true, then the string is interpreted as an expression, and output is sent to the Command Window.</summary>
			<param name="TreatAsExpression"> </param>
			<param name="Timeout"> </param>
			<param name="Statement"> </param>
		</member>
		<member name="M:EnvDTE80.Debugger2.GetExpression(System.String,System.Boolean,System.Int32)">
			<summary>Evaluates an expression based on the current stack frame. If the expression can be parsed but not evaluated, an object is returned but does not contain a valid value.</summary>
			<returns>An <see cref="T:EnvDTE.Expression"></see>.</returns>
			<param name="ExpressionText"> </param>
			<param name="UseAutoExpandRules"> </param>
			<param name="Timeout"> </param>
		</member>
		<member name="M:EnvDTE80.Debugger2.GetExpression2(System.String,System.Boolean,System.Boolean,System.Int32)">
			<summary>Evaluates an expression based on the current stack frame. If the expression can be parsed but not evaluated, an object is returned but does not contain a valid value.</summary>
			<returns>Always returns an expression.</returns>
			<param name="ExpressionText">The expression text to be evaluated.</param>
			<param name="UseAutoExpandRules">true if the auto-expand rules should be used; otherwise, false.</param>
			<param name="Timeout">The timeout period in milliseconds.</param>
			<param name="TreatAsStatement">true if the string is to be interpreted as a statement; otherwise false.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.GetProcesses(EnvDTE80.Transport,System.String)">
			<summary>Allows the caller to get a collection of processes from a remote machine.</summary>
			<returns>A <see cref="T:EnvDTE.Processes"></see> collection.</returns>
			<param name="TransportQualifier">A transport qualifier.</param>
			<param name="pTransport">A <see cref="T:EnvDTE80.Transport"></see>. </param>
		</member>
		<member name="M:EnvDTE80.Debugger2.Go(System.Boolean)">
			<summary>Starts executing the program from the current statement.</summary>
			<param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return, the debugger could be in Design, Break, or Run modes. See Execution Control for more information.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.RunToCursor(System.Boolean)">
			<summary>Executes the program to the current position of the source file cursor.</summary>
			<param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.See Code Stepping Overview for more information.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.SetNextStatement">
			<summary>Sets the next instruction to be executed, according to the cursor position in the current source file.</summary>
		</member>
		<member name="M:EnvDTE80.Debugger2.StepInto(System.Boolean)">
			<summary>Steps into the next function call, if possible.</summary>
			<param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run-mode.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.StepOut(System.Boolean)">
			<summary>Steps out of the current function.</summary>
			<param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.StepOver(System.Boolean)">
			<summary>Steps over the next function call.</summary>
			<param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.Stop(System.Boolean)">
			<summary>Stops debugging and terminates or detaches from all attached processes.</summary>
			<param name="WaitForDesignMode">Set to true if the debugging session should stop only when it reaches Design mode. Set to false if you intend to stop debugging, but you need to perform other tasks in the macro even before the debugger enters design mode.</param>
		</member>
		<member name="M:EnvDTE80.Debugger2.TerminateAll">
			<summary>Terminates all currently running debugging processes.</summary>
		</member>
		<member name="M:EnvDTE80.Debugger2.WriteMinidump(System.String,EnvDTE80.dbgMinidumpOption)">
			<summary>If debugging a program and in Break mode, this function creates a minidump of the current debugging session.</summary>
			<param name="FileName">The file name of the program being debugged.</param>
			<param name="Option">A <see cref="T:EnvDTE80.dbgMinidumpOption"></see> constant specifying whether a full or normal dump is written.</param>
		</member>
		<member name="P:EnvDTE80.Debugger2.AllBreakpointsLastHit">
			<summary>Gets a collection of bound breakpoints that were last simultaneously hit.</summary>
			<returns>A <see cref="T:EnvDTE.Breakpoints"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.BreakpointLastHit">
			<summary>Gets the last breakpoint hit.</summary>
			<returns>A <see cref="T:EnvDTE.Breakpoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.Breakpoints">
			<summary>Gets a collection of breakpoints.</summary>
			<returns>A <see cref="T:EnvDTE.Breakpoints"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.CurrentMode">
			<summary>Gets the current mode of the debugger within the context of the IDE.</summary>
			<returns>A <see cref="T:EnvDTE.dbgDebugMode"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.CurrentProcess">
			<summary>Gets or sets the active process.</summary>
			<returns>A <see cref="T:EnvDTE.Process"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.CurrentProgram">
			<summary>Sets or returns the active program.</summary>
			<returns>A <see cref="T:EnvDTE.Program"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.CurrentStackFrame">
			<summary>Gets or sets the current stack frame.</summary>
			<returns>A <see cref="T:EnvDTE.StackFrame"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.CurrentThread">
			<summary>Gets or sets the current thread being debugged.</summary>
			<returns>A <see cref="T:EnvDTE.Thread"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.DebuggedProcesses">
			<summary>Gets the list of processes currently being debugged.</summary>
			<returns>A <see cref="T:EnvDTE.Processes"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.HexDisplayMode">
			<summary>Gets or sets a value indicating whether the expressions are output in hexadecimal or decimal format.</summary>
			<returns>A Boolean that is true if hexadecimal format; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.HexInputMode">
			<summary>Gets or sets a value indicating whether the expressions are evaluated in hexadecimal or decimal format.</summary>
			<returns>A Boolean that is true if hexadecimal format; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.Languages">
			<summary>Gets a list of languages that the debugger supports.</summary>
			<returns>A <see cref="T:EnvDTE.Languages"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.LastBreakReason">
			<summary>Gets the last reason that a program was broken. If the program is running it returns DBG_REASON_NONE.</summary>
			<returns>A <see cref="T:EnvDTE.dbgEventReason"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.LocalProcesses">
			<summary>Gets the list of processes currently running on this machine.</summary>
			<returns>A <see cref="T:EnvDTE.Processes"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.Parent">
			<summary>Gets the immediate parent object of the Debugger2 object (<see cref="T:EnvDTE80.DTE2"></see>).</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Debugger2.Transports">
			<summary>Gets a collection of supported debugging transports.</summary>
			<returns>A <see cref="T:EnvDTE80.Transports"></see> collection.</returns>
		</member>
		<member name="T:EnvDTE80.DebuggerExpressionEvaluationEvents">
			<summary>The <see cref="T:EnvDTE80.DebuggerExpressionEvaluationEvents"></see> object defines events supported by the debugger. Use this object for functionality and refer to <see cref="T:EnvDTE80.DebuggerExpressionEvaluationEventsClass"></see> for this object's documentation.</summary>
		</member>
		<member name="T:EnvDTE80.DebuggerExpressionEvaluationEventsClass">
			<summary>This class supports the .NET Framework infrastructure and is not intended to be used directly from your code. Refer to <see cref="T:EnvDTE80.DebuggerExpressionEvaluationEvents"></see> for this functionality. Do not instantiate from this class.</summary>
		</member>
		<member name="M:EnvDTE80.DebuggerExpressionEvaluationEventsClass.#ctor">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80.DebuggerExpressionEvaluationEventsClass.OnExpressionEvaluation">
			<summary>Raised when an expression is evaluated from the immediate window or from automation.</summary>
		</member>
		<member name="M:EnvDTE80.DebuggerExpressionEvaluationEventsClass.add_OnExpressionEvaluation(EnvDTE80._dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.DebuggerExpressionEvaluationEventsClass.remove_OnExpressionEvaluation(EnvDTE80._dispDebuggerExpressionEvaluationEvents_OnExpressionEvaluationEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80.DebuggerProcessEvents">
			<summary>Represents the OnProcessStateChanged event. This changes when the debugger switches from run to stop or stop to run. Refer to <see cref="T:EnvDTE80.DebuggerProcessEventsClass"></see> for this object's documentation. Do not instantiate this class.</summary>
		</member>
		<member name="T:EnvDTE80.DebuggerProcessEventsClass">
			<summary>This class supports the .NET Framework infrastructure and is not intended to be used directly from your code. Refer to <see cref="T:EnvDTE80.DebuggerProcessEvents"></see> for this functionality. Do not instantiate from this class.</summary>
		</member>
		<member name="M:EnvDTE80.DebuggerProcessEventsClass.#ctor">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80.DebuggerProcessEventsClass.OnProcessStateChanged">
			<summary>Raised when a process switches from run to stop or stop to run.</summary>
		</member>
		<member name="M:EnvDTE80.DebuggerProcessEventsClass.add_OnProcessStateChanged(EnvDTE80._dispDebuggerProcessEvents_OnProcessStateChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.DebuggerProcessEventsClass.remove_OnProcessStateChanged(EnvDTE80._dispDebuggerProcessEvents_OnProcessStateChangedEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80.DTE2">
			<summary>The top-level object in the Visual Studio automation object model.</summary>
		</member>
		<member name="M:EnvDTE80.DTE2.ExecuteCommand(System.String,System.String)">
			<summary>Executes the specified command.</summary>
			<param name="CommandArgs">Optional. A string containing the same arguments you would supply if you were invoking the command from the Command window. If a string is supplied, it is passed to the command line as the command's first argument and is parsed to form the various arguments for the command. This is similar to how commands are invoked in the Command window. </param>
			<param name="CommandName">Required. The name of the command to invoke.</param>
		</member>
		<member name="M:EnvDTE80.DTE2.GetObject(System.String)">
			<summary>Gets an interface or object that is late-bound to the <see cref="T:EnvDTE.DTE"></see> object and can be accessed by name at run time.</summary>
			<returns>An interface or object that is late-bound to the <see cref="T:EnvDTE.DTE"></see> object.</returns>
			<param name="Name">Required. The name of the object to retrieve.</param>
		</member>
		<member name="M:EnvDTE80.DTE2.GetThemeColor(EnvDTE80.vsThemeColors)">
			<summary>Gets a color used to draw the user interface within Visual Studio.</summary>
			<returns>A color value representing a standard color defined by <see cref="T:EnvDTE80.vsThemeColors"></see>.</returns>
			<param name="Element">Standard color for UI.</param>
		</member>
		<member name="M:EnvDTE80.DTE2.LaunchWizard(System.String,System.Object[]@)">
			<summary>Runs a wizard with the supplied parameters.</summary>
			<returns>A <see cref="T:EnvDTE.wizardResult"></see> object.</returns>
			<param name="ContextParams">Required. The parameters for the wizard. The first parameter is a GUID that uniquely identifies the launch context as distinct from Add Item or Add Project or a custom GUID. The remaining arguments are user-defined and their number and values depend on the wizard.Wizards (or templates) that come with Visual Studio  such as Visual Basic Windows Application or Visual C# Console Application  have a required set of context parameters that you must pass to them. For details on these, see ContextParams Enum. Wizards that you create can have more or fewer parameters. </param>
			<param name="VSZFile">Required. The .Vsz (wizard) file containing the information required to launch the wizard.</param>
		</member>
		<member name="M:EnvDTE80.DTE2.OpenFile(System.String,System.String)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ViewKind"> </param>
			<param name="FileName"> </param>
		</member>
		<member name="M:EnvDTE80.DTE2.Quit">
			<summary>Closes the Visual Studio environment.</summary>
		</member>
		<member name="M:EnvDTE80.DTE2.SatelliteDllPath(System.String,System.String)">
			<summary>Returns the computed path to the satellite DLL when given the installation directory for an Add-in or wizard and the file name of the DLL containing localized resources.</summary>
			<returns>A string representing the computed path to the satellite DLL.</returns>
			<param name="Name">Required. The file name for the satellite DLL, such as "MyAddinUI.DLL."</param>
			<param name="Path">Required. Specifies the full path to the directory where the Add-in or wizard is installed.</param>
		</member>
		<member name="P:EnvDTE80.DTE2.ActiveDocument">
			<summary>Gets the active document.</summary>
			<returns>A <see cref="T:EnvDTE.Document"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.ActiveSolutionProjects">
			<summary>Gets an array of currently selected projects.</summary>
			<returns>An array of currently selected projects.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.ActiveWindow">
			<summary>Gets the currently active window, or the top-most window if no others are active. </summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object. Returns Nothing if no windows are open.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.AddIns">
			<summary>Gets the <see cref="T:EnvDTE.AddIns"></see> collection, which contains all currently available Add-ins.</summary>
			<returns>A <see cref="T:EnvDTE.AddIns"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.CommandBars">
			<summary>Gets a reference to the development environment's CommandBars object.</summary>
			<returns>A Microsoft.VisualStudio.CommandBars object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.CommandLineArguments">
			<summary>Gets a string representing the command line arguments.</summary>
			<returns>The command line arguments.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Commands">
			<summary>Gets the <see cref="T:EnvDTE.Commands"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.Commands"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.ContextAttributes">
			<summary>Gets a <see cref="T:EnvDTE.ContextAttributes"></see> collection which allows automation clients to add new attributes to the current selected items in the Dynamic Help window and provide contextual help for the additional attributes.</summary>
			<returns>A <see cref="T:EnvDTE.ContextAttributes"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Debugger">
			<summary>Gets the debugger objects.</summary>
			<returns>A <see cref="T:EnvDTE.Debugger"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.DisplayMode">
			<summary>Gets or sets the display mode, either MDI or Tabbed Documents.</summary>
			<returns>A <see cref="T:EnvDTE.vsDisplay"></see> constant representing the display mode.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Documents">
			<summary>Gets the collection of open documents in the development environment.</summary>
			<returns>A <see cref="T:EnvDTE.Documents"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Edition">
			<summary>Gets a description of the edition of the environment.</summary>
			<returns>The description of the environment edition.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Events">
			<summary>Gets a reference to the <see cref="T:EnvDTE.Events"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Events"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Find">
			<summary>Gets the <see cref="T:EnvDTE.Find"></see> object that represents global text find operations.</summary>
			<returns>A <see cref="T:EnvDTE.Find"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>The full path and name of the object's file.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Globals">
			<summary>Gets the <see cref="T:EnvDTE.Globals"></see> object that contains Add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.</summary>
			<returns>A <see cref="T:EnvDTE.Globals"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.IsOpenFile(System.String,System.String)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ViewKind"> </param>
			<param name="FileName"> </param>
		</member>
		<member name="P:EnvDTE80.DTE2.ItemOperations">
			<summary>Gets the <see cref="T:EnvDTE.ItemOperations"></see> object.</summary>
			<returns>An <see cref="T:EnvDTE.ItemOperations"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.LocaleID">
			<summary>Gets the ID of the locale in which the development environment is running.</summary>
			<returns>The ID of the locale in which the development environment is running.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Macros">
			<summary>Gets the <see cref="T:EnvDTE.Macros"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Macros"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.MacrosIDE">
			<summary>Gets the root of the Macros IDE's automation model.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.MainWindow">
			<summary>Gets a <see cref="T:EnvDTE.Window"></see> object representing the main development environment window.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Mode">
			<summary>Gets the mode of the development environment, either debug or design.</summary>
			<returns>A <see cref="T:EnvDTE.vsIDEMode"></see> value.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Name">
			<summary>Gets the name of the <see cref="T:EnvDTE.DTE"></see>.</summary>
			<returns>A string representing the name of the <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.ObjectExtenders">
			<summary>Gets the <see cref="T:EnvDTE.ObjectExtenders"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ObjectExtenders"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Properties(System.String,System.String)">
			<summary>Gets a <see cref="T:EnvDTE.Properties"></see> collection representing all available categories and subcategories contained in the Options dialog box on the Tools menu.</summary>
			<returns>A <see cref="T:EnvDTE.Properties"></see> collection containing all available categories and subcategories in the IDE.</returns>
			<param name="Page">Optional. The name of the property page within the given Category, such as Keyboard.</param>
			<param name="Category">Required. The name of the property category, such as General or Text Editor.</param>
		</member>
		<member name="P:EnvDTE80.DTE2.RegistryRoot">
			<summary>Gets a string with the path to the root of the Visual Studio registry settings.</summary>
			<returns>The path to the root of the Visual Studio registry settings.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.SelectedItems">
			<summary>Gets a collection containing the items currently selected in the environment.</summary>
			<returns>A <see cref="T:EnvDTE.SelectedItems"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Solution">
			<summary>Gets the <see cref="T:EnvDTE.Solution"></see> object that represents all open projects in the current instance of the environment and allows access to the build objects.</summary>
			<returns>A <see cref="T:EnvDTE.Solution"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.SourceControl">
			<summary>Gets a <see cref="T:EnvDTE.SourceControl"></see> object that allows you to manipulate the source code control state of the file behind the object.</summary>
			<returns>A <see cref="T:EnvDTE.SourceControl"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.StatusBar">
			<summary>Gets the <see cref="T:EnvDTE.StatusBar"></see> object, representing the status bar on the main development environment window.</summary>
			<returns>A <see cref="T:EnvDTE.StatusBar"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.SuppressUI">
			<summary>Gets or sets a value indicating whether user interface (UI) should be displayed during the execution of automation code.</summary>
			<returns>true if the UI is suppressed; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.ToolWindows">
			<summary>Gets a <see cref="T:EnvDTE80.ToolWindows"></see> object used as a shortcut for finding tool windows.</summary>
			<returns>A <see cref="T:EnvDTE80.ToolWindows"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.UndoContext">
			<summary>Gets the global <see cref="T:EnvDTE.UndoContext"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.UndoContext"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.UserControl">
			<summary>Gets a value indicating whether the environment was started by a user or by automation.</summary>
			<returns>true if the environment is running under user control; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Version">
			<summary>Gets the host application's version number.</summary>
			<returns>The host application's version number.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.WindowConfigurations">
			<summary>Gets the <see cref="T:EnvDTE.WindowConfigurations"></see> collection, representing all available window configurations.</summary>
			<returns>A <see cref="T:EnvDTE.WindowConfigurations"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.DTE2.Windows">
			<summary>Gets a <see cref="T:EnvDTE.Windows"></see> collection containing the windows that display in the object.</summary>
			<returns>A <see cref="T:EnvDTE.Windows"></see> collection.</returns>
		</member>
		<member name="T:EnvDTE80.EditPoint2">
			<summary>Allows you to manipulate text as data in text buffers.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.ChangeCase(System.Object,EnvDTE.vsCaseOptions)">
			<summary>Changes the case of the selected text.</summary>
			<param name="How">Required. A <see cref="T:EnvDTE.vsCaseOptions"></see> constant indicating the case of the text.</param>
			<param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint"></see> object or a number of characters.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.CharLeft(System.Int32)">
			<summary>Moves the edit point the specified number of characters to the left.</summary>
			<param name="Count">Optional. The number of characters to move to the left. The default is 1 character.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.CharRight(System.Int32)">
			<summary>Moves the edit point the specified number of characters to the right.</summary>
			<param name="Count">Optional. The number of characters to move to the right. The default is one character.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.ClearBookmark">
			<summary>Clears all unnamed bookmarks in the current text buffer line.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.Copy(System.Object,System.Boolean)">
			<summary>Copies the specified range of text to the clipboard.</summary>
			<param name="Append">Optional. Indicates whether to append the selected text to the clipboard. The default is false.</param>
			<param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint"></see> object or a number of characters.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.CreateEditPoint">
			<summary>Creates and returns an <see cref="T:EnvDTE.EditPoint"></see> object at the location of the calling object.</summary>
			<returns>A <see cref="T:EnvDTE.EditPoint"></see> object.</returns>
		</member>
		<member name="M:EnvDTE80.EditPoint2.Cut(System.Object,System.Boolean)">
			<summary>Copies the specified range of text to the clipboard and deletes it from the document.</summary>
			<param name="Append">Optional. Indicates whether to append the selected text to the clipboard. The default is false.</param>
			<param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint"></see> object or a number of characters.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.Delete(System.Object)">
			<summary>Deletes the specified range of text.</summary>
			<param name="PointOrCount">Required. Represents either a <see cref="T:EnvDTE.TextPoint"></see> object or a number of characters.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.DeleteWhitespace(EnvDTE.vsWhitespaceOptions)">
			<summary>Deletes the empty characters (white space) horizontally or vertically around the current location in the text buffer.</summary>
			<param name="Direction">Optional. A <see cref="T:EnvDTE.vsWhitespaceOptions"></see> constant that determines how and where to remove empty spaces.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.EndOfDocument">
			<summary>Moves the edit point to the end of the document.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.EndOfLine">
			<summary>Moves the edit point to the end of the current line in the buffer.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.EqualTo(EnvDTE.TextPoint)">
			<summary>Returns a value indicating whether the value of the given point object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset"></see> is equal to that of the calling <see cref="T:EnvDTE.EditPoint"></see> object.</summary>
			<returns>A Boolean that is true if Point has the same <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset"></see> property value as the calling <see cref="T:EnvDTE.EditPoint"></see> point object; otherwise, false. </returns>
			<param name="Point">Required. A <see cref="T:EnvDTE.TextPoint"></see> object to compare to the calling <see cref="T:EnvDTE.EditPoint"></see> point object.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.FindPattern(System.String,System.Int32,EnvDTE.EditPoint@,EnvDTE.TextRanges@)">
			<summary>Finds a given matching pattern in the selected text.</summary>
			<returns>true if the pattern is found; otherwise, false.</returns>
			<param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions"></see> constant indicating the type of search to perform. The <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchInHiddenText"></see> constant value does not apply to this method because <see cref="M:EnvDTE80.EditPoint2.FindPattern(System.String,System.Int32,EnvDTE.EditPoint@,EnvDTE.TextRanges@)"></see> searches all text, including hidden text.</param>
			<param name="Pattern">Required. The text you want to find.</param>
			<param name="Tags">Optional. If the matched pattern is a regular expression containing tagged sub-expressions, then the Tags argument contains a collection of <see cref="T:EnvDTE.TextRange"></see> objects, one for each tagged sub-expression.</param>
			<param name="EndPoint">Optional. An <see cref="T:EnvDTE.EditPoint"></see> object representing the point that is to be moved to the end of the matched pattern.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.GetLines(System.Int32,System.Int32)">
			<summary>Returns a string representing the text between two given lines.</summary>
			<returns>The text between two given lines.</returns>
			<param name="Start">Optional. The last line number to include the text.</param>
			<param name="ExclusiveEnd">Required. The first line number to include the text.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.GetText(System.Object)">
			<summary>Returns the text between the current location and the specified location in the buffer.</summary>
			<returns>A string of text located between the current location and the specified location in the buffer.</returns>
			<param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint"></see> object or a number of characters.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.GreaterThan(EnvDTE.TextPoint)">
			<summary>Returns whether the value of the <see cref="T:EnvDTE.EditPoint"></see> object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset"></see> property is greater than that of the given <see cref="T:EnvDTE.TextPoint"></see> object.</summary>
			<returns>true if Point has a smaller <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset"></see> property value compared to the calling <see cref="T:EnvDTE.EditPoint"></see> object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset"></see> property; otherwise, false.</returns>
			<param name="Point">Required. A <see cref="T:EnvDTE.TextPoint"></see> to compare to the calling point object.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.Indent(EnvDTE.TextPoint,System.Int32)">
			<summary>Indents the selected lines by the given number of indentation levels.</summary>
			<param name="Count">Optional. The number of displayed columns to indent the lines. The default value is 1.</param>
			<param name="Point">Optional. A <see cref="T:EnvDTE.TextPoint"></see> object endpoint for indentation. The default is the current line in the buffer, causing the current line in the buffer to be indented.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.Insert(System.String)">
			<summary>Inserts the given string at the edit point's current position in the buffer.</summary>
			<param name="Text">Required. The text to insert into the text buffer. It must be a Unicode string.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.InsertFromFile(System.String)">
			<summary>Inserts the contents of the specified file at the current location in the buffer.</summary>
			<param name="File">Required. The name of the file to insert into the text buffer.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.InsertNewLine(System.Int32)">
			<summary>Detects the line break type used at the line where <see cref="T:EnvDTE80.EditPoint2"></see> is located (carriage return, line feed, and so on) and will insert Count new lines at the location of the <see cref="T:EnvDTE80.EditPoint2"></see>.</summary>
			<param name="Count">The number of new lines to insert.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.LessThan(EnvDTE.TextPoint)">
			<summary>Returns whether the value of the called <see cref="T:EnvDTE.EditPoint"></see> object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset"></see> is less than that of the given <see cref="T:EnvDTE.TextPoint"></see> object.</summary>
			<returns>true if Point has a greater <see cref="P:EnvDTE.TextPoint.AbsoluteCharOffset"></see> property value than the calling point object's <see cref="P:EnvDTE.EditPoint.AbsoluteCharOffset"></see> property; otherwise, false.</returns>
			<param name="Point">Required. A <see cref="T:EnvDTE.TextPoint"></see> to compare to the calling point object.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.LineDown(System.Int32)">
			<summary>Moves the edit point down the specified number of lines.</summary>
			<param name="Count">Optional. The number of lines to move the edit point. The default is 1.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.LineUp(System.Int32)">
			<summary>Moves the edit point up the specified number of lines.</summary>
			<param name="Count">Optional. The number of lines to move the edit point. The default is 1.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.MoveToAbsoluteOffset(System.Int32)">
			<summary>Moves the active point to the given 1-based absolute character offset.</summary>
			<param name="Offset">Required. A character index from the start of the document, beginning at one.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.MoveToLineAndOffset(System.Int32,System.Int32)">
			<summary>Moves the document to the specified line and character offset position in that line.</summary>
			<param name="Offset">Required. The character index position in the line, starting at one.</param>
			<param name="Line">Required. The line number, starting at one. Line may also be one of the constants from <see cref="T:EnvDTE.vsGoToLineOptions"></see>.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.MoveToPoint(EnvDTE.TextPoint)">
			<summary>Moves the active point to the given position.</summary>
			<param name="Point">Required. A <see cref="T:EnvDTE.TextPoint"></see> object representing the location in which to move the character.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.NextBookmark">
			<summary>Moves to the location of the next bookmark in the document.</summary>
			<returns>true if the insertion point moves to the next bookmark; otherwise, false.</returns>
		</member>
		<member name="M:EnvDTE80.EditPoint2.OutlineSection(System.Object)">
			<summary>Creates an outlining section based on an edit point and the given text point or value.</summary>
			<param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint"></see> object or an integer representing the number of characters.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.PadToColumn(System.Int32)">
			<summary>Fills the current line in the buffer with empty characters (white space) to the given column.</summary>
			<param name="Column">Required. The number of columns to pad, starting at one.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.Paste">
			<summary>Inserts the clipboard contents at the current location.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.PreviousBookmark">
			<summary>Moves the edit point to the location of the previous bookmark in the document.</summary>
			<returns>true if the edit point moves to a previous bookmark; otherwise, false.</returns>
		</member>
		<member name="M:EnvDTE80.EditPoint2.ReadOnly(System.Object)">
			<summary>Returns a value indicating whether any of the specified range contains read-only text.</summary>
			<returns>true if the selection contains read-only text; otherwise, false.</returns>
			<param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint"></see> object or a number of characters.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.ReplacePattern(EnvDTE.TextPoint,System.String,System.String,System.Int32,EnvDTE.TextRanges@)">
			<summary>Finds a pattern in the specified range of text and replaces it with the specified text.</summary>
			<returns>true if replacement occurs successfully; otherwise, false.</returns>
			<param name="vsFindOptionsValue">Optional. A <see cref="T:EnvDTE.vsFindOptions"></see> constant indicating the type of search to perform.</param>
			<param name="Pattern">Required. The string to find.</param>
			<param name="Point">Required. The endpoint of the specified range of text. The edit point and Point are the boundaries for replacement.</param>
			<param name="Tags">Optional. If the matched pattern is a regular expression containing tagged sub-expressions, then Tags contains a collection of <see cref="T:EnvDTE.TextRange"></see> objects, one for each tagged sub-expression.</param>
			<param name="Replace">Required. The replacement string for Pattern.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.ReplaceText(System.Object,System.String,System.Int32)">
			<summary>Replaces the selected text with the given text.</summary>
			<param name="Text">Required. The text to insert.</param>
			<param name="Flags">Required. A <see cref="T:EnvDTE.vsEPReplaceTextOptions"></see> constant representing an editor action.</param>
			<param name="PointOrCount">Required. Either a <see cref="T:EnvDTE.TextPoint"></see> object or an integer that determines the text to replace.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.SetBookmark">
			<summary>Sets an unnamed bookmark on the current line in the buffer.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.SmartFormat(EnvDTE.TextPoint)">
			<summary>Formats the specified range of text based on the current language.</summary>
			<param name="Point">Required. A <see cref="T:EnvDTE.TextPoint"></see> object representing the end of the specified range of text.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.StartOfDocument">
			<summary>Moves the object to the beginning of the document.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.StartOfLine">
			<summary>Moves the edit point to the beginning of the current line in the buffer.</summary>
		</member>
		<member name="M:EnvDTE80.EditPoint2.TryToShow(EnvDTE.vsPaneShowHow,System.Object)">
			<summary>Attempts to display the text point's location.</summary>
			<returns>true if the span of text fits within the current code editor; otherwise, false.</returns>
			<param name="How">Optional. A <see cref="T:EnvDTE.vsPaneShowHow"></see> constant that determines how the code is displayed.</param>
			<param name="PointOrCount">Optional. The endpoint of the selected range of text to be displayed. Can be either a <see cref="T:EnvDTE.TextPoint"></see> or an integer.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.Unindent(EnvDTE.TextPoint,System.Int32)">
			<summary>Removes the indent characters from the selected lines by the given number of indentation levels.</summary>
			<param name="Count">Optional. The number of display columns to indent each line. The default is 1.</param>
			<param name="Point">Optional. The endpoint. Defaults to the endpoint, causing the current line in the buffer to be outdented. The default value is one indentation level.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.WordLeft(System.Int32)">
			<summary>Moves the object the specified number of words to the left.</summary>
			<param name="Count">Optional. Specifies how many words to move the edit point to the left of its current position in the buffer.</param>
		</member>
		<member name="M:EnvDTE80.EditPoint2.WordRight(System.Int32)">
			<summary>Moves the object the specified number of words to the right.</summary>
			<param name="Count">Optional. How many words to move the edit point to the right of its current position in the buffer.</param>
		</member>
		<member name="P:EnvDTE80.EditPoint2.AbsoluteCharOffset">
			<summary>Gets the one-based character offset from the beginning of the document to the <see cref="T:EnvDTE80.EditPoint2"></see> object.</summary>
			<returns>The one-based character offset from the beginning of the document to the <see cref="T:EnvDTE80.EditPoint2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.AtEndOfDocument">
			<summary>Gets a value indicating whether or not the object is at the end of the document.</summary>
			<returns>A Boolean that is true if you are at the end of the document; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.AtEndOfLine">
			<summary>Gets a value indicating whether or not the object is at the end of a line.</summary>
			<returns>A Boolean that is true if you are at the end of a line; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.AtStartOfDocument">
			<summary>Gets a value indicating whether or not the object is at the beginning of the document.</summary>
			<returns>A Boolean that is true if you are at the start of a document; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.AtStartOfLine">
			<summary>Gets a value indicating whether or not the <see cref="T:EnvDTE.EditPoint"></see> object is at the beginning of a line.</summary>
			<returns>A Boolean that is true if you are at the start of a line; otherwise, false if otherwise.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.CodeElement(EnvDTE.vsCMElement)">
			<summary>Gets the code element at the <see cref="T:EnvDTE.EditPoint"></see> location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="Scope">Required. A <see cref="T:EnvDTE.vsCMElement"></see> constant indicating the code element with the specified kind that contains the editor location.</param>
		</member>
		<member name="P:EnvDTE80.EditPoint2.DisplayColumn">
			<summary>Gets the number of the currently displayed column containing the <see cref="T:EnvDTE.EditPoint"></see> object.</summary>
			<returns>The number of the currently displayed column containing the <see cref="T:EnvDTE.EditPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.DTE">
			<summary>Returns the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.Line">
			<summary>Gets the line number of the <see cref="T:EnvDTE.EditPoint"></see> object.</summary>
			<returns>The line number of the <see cref="T:EnvDTE.EditPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.LineCharOffset">
			<summary>Gets the character offset of the <see cref="T:EnvDTE.EditPoint"></see> object.</summary>
			<returns>The character offset of the <see cref="T:EnvDTE.EditPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.LineLength">
			<summary>Gets the number of characters in a line containing the <see cref="T:EnvDTE.EditPoint"></see> object, excluding the new line character.</summary>
			<returns>The number of characters in a line containing the <see cref="T:EnvDTE.EditPoint"></see> object, excluding the new line character.</returns>
		</member>
		<member name="P:EnvDTE80.EditPoint2.Parent">
			<summary>Gets the immediate parent object of the <see cref="T:EnvDTE.EditPoint"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.TextDocument"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.Engine">
			<summary>A debug engine that is used to map to code type.</summary>
		</member>
		<member name="P:EnvDTE80.Engine.AttachResult">
			<summary>Gets a result indicating whether an attached engine failed or not.</summary>
			<returns>An integer.</returns>
		</member>
		<member name="P:EnvDTE80.Engine.Collection">
			<summary>Gets the <see cref="T:EnvDTE80.Engines"></see> collection. </summary>
			<returns>A <see cref="T:EnvDTE80.Engines"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Engine.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Engine.ID">
			<summary>Gets the ID GUID of the debugging engine.</summary>
			<returns>A string containing the debugging engine ID in GUID form.</returns>
		</member>
		<member name="P:EnvDTE80.Engine.Name">
			<summary>Gets the name of the <see cref="T:EnvDTE80.Engine"></see> object.</summary>
			<returns>A string containing the name of the debugging engine.</returns>
		</member>
		<member name="P:EnvDTE80.Engine.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Engine"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE80.Transport"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.Engines">
			<summary>A collection of debugging <see cref="T:EnvDTE80.Engine"></see> objects.</summary>
		</member>
		<member name="M:EnvDTE80.Engines.GetEnumerator">
			<summary>Gets an enumeration for items in a collection.</summary>
			<returns>An enumerator.</returns>
		</member>
		<member name="M:EnvDTE80.Engines.Item(System.Object)">
			<summary>Gets an indexed member of a <see cref="T:EnvDTE80.Engines"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE80.Engine"></see> object.</returns>
			<param name="Index">Required. The index of the item to return.</param>
		</member>
		<member name="P:EnvDTE80.Engines.Count">
			<summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE80.Engines"></see> collection.</summary>
			<returns>An integer representing the number of <see cref="T:EnvDTE80.Engine"></see> objects in the collection.</returns>
		</member>
		<member name="P:EnvDTE80.Engines.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Engines.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Engines"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.Debugger"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.ErrorItem">
			<summary>An error, warning, or message contained within the Error List window.</summary>
		</member>
		<member name="M:EnvDTE80.ErrorItem.Navigate">
			<summary>Moves the cursor to the location of the error.</summary>
		</member>
		<member name="P:EnvDTE80.ErrorItem.Collection">
			<summary>Gets the collection containing this <see cref="T:EnvDTE80.ErrorItem"></see> object.</summary>
			<returns>An <see cref="T:EnvDTE80.ErrorItems"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItem.Column">
			<summary>Gets an integer value indicating which column in the code document the <see cref="T:EnvDTE80.ErrorItem"></see> exists.</summary>
			<returns>A column number</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItem.Description">
			<summary>Gets a string describing the source of the <see cref="T:EnvDTE80.ErrorItem"></see>.</summary>
			<returns>A report of the source of the <see cref="T:EnvDTE80.ErrorItem"></see>.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItem.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItem.ErrorLevel">
			<summary>Gets an enumeration indicating the severity of the build error.</summary>
			<returns>A <see cref="T:EnvDTE80.vsBuildErrorLevel"></see> enumeration value.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItem.FileName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>A string representing the full path and name of the object's file.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItem.Line">
			<summary>Gets an integer value indicating which line in the code document the <see cref="T:EnvDTE80.ErrorItem"></see> exists.</summary>
			<returns>A line number.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItem.Project">
			<summary>Gets a string indicating the name of the project where the error occurred.</summary>
			<returns>The project name.</returns>
		</member>
		<member name="T:EnvDTE80.ErrorItems">
			<summary>A collection of <see cref="T:EnvDTE80.ErrorItem"></see> objects contained in an Error List window.</summary>
		</member>
		<member name="M:EnvDTE80.ErrorItems.Item(System.Object)">
			<summary>Gets an indexed member of a <see cref="T:EnvDTE80.ErrorItems"></see> collection.</summary>
			<returns>An <see cref="T:EnvDTE80.ErrorItem"></see> object.</returns>
			<param name="Index">Required. An absolute index.</param>
		</member>
		<member name="P:EnvDTE80.ErrorItems.Count">
			<summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE80.ErrorItems"></see> collection.</summary>
			<returns>The number of objects.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItems.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorItems.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.ErrorItems"></see> collection.</summary>
			<returns>An <see cref="T:EnvDTE80.ErrorList"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.ErrorList">
			<summary>A handle to a window containing errors, warnings, and messages related to the containing solution.</summary>
		</member>
		<member name="P:EnvDTE80.ErrorList.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorList.ErrorItems">
			<summary>Gets an <see cref="T:EnvDTE80.ErrorItems"></see> collection contained in the <see cref="T:EnvDTE80.ErrorList"></see> window.</summary>
			<returns>An <see cref="T:EnvDTE80.ErrorItems"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorList.Parent">
			<summary>Gets the immediate parent object of the <see cref="T:EnvDTE80.ErrorList"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE80.Window2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorList.SelectedItems">
			<summary>Gets error list items.</summary>
			<returns>Returns a list of items selected within the error list.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorList.ShowErrors">
			<summary>Gets or sets a value indicating whether errors are displayed in the Error List window.</summary>
			<returns>true if errors are displayed in the Error List window; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorList.ShowMessages">
			<summary>Gets or sets a value indicating whether messages are displayed in the Error List window.</summary>
			<returns>true if messages are displayed in the Error List window; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.ErrorList.ShowWarnings">
			<summary>Gets or sets a value indicating whether warnings are displayed in the Error List window.</summary>
			<returns>true if warnings are displayed in the Error List window; otherwise, false.</returns>
		</member>
		<member name="T:EnvDTE80.Events2">
			<summary>Allows access to all events in the extensibility model. Events may also be exposed from specific objects within the extensibility model.</summary>
		</member>
		<member name="M:EnvDTE80.Events2.GetObject(System.String)">
			<summary>Returns an interface or object that is late-bound to the <see cref="T:EnvDTE.DTE"></see> object and can be accessed by name at run time.</summary>
			<returns>An object.</returns>
			<param name="Name">Required. The name of the object to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.Events2.BuildEvents">
			<summary>Gets the <see cref="T:EnvDTE.BuildEvents"></see> object, which provides events for solution builds.</summary>
			<returns>A <see cref="T:EnvDTE.BuildEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.CodeModelEvents(EnvDTE.CodeElement)">
			<summary>Gets the <see cref="T:EnvDTE80.CodeModelEvents"></see> object which provides events for the code model.</summary>
			<param name="Reserved"> </param>
		</member>
		<member name="P:EnvDTE80.Events2.CommandBarEvents(System.Object)">
			<summary>Gets an object providing events fired when the supplied CommandBarControl object is clicked.</summary>
			<returns>A <see cref="T:EnvDTE.CommandBarEvents"></see> object.</returns>
			<param name="CommandBarControl">Required. The CommandBar control that causes the event to fire.</param>
		</member>
		<member name="P:EnvDTE80.Events2.CommandEvents(System.String,System.Int32)">
			<summary>Gets the <see cref="T:EnvDTE.CommandEvents"></see> for the specified command.</summary>
			<returns>A <see cref="T:EnvDTE.CommandEvents"></see> object.</returns>
			<param name="ID">Required. An index into the command group for the particular command. If ID is Null or Nothing, then <see cref="P:EnvDTE80.Events2.CommandEvents(System.String,System.Int32)"></see> returns a <see cref="P:EnvDTE80.Events2.CommandEvents(System.String,System.Int32)"></see> object representing all commands in the group.</param>
			<param name="Guid">Required. The GUID for the command group. If Guid is Null or Nothing, then <see cref="P:EnvDTE80.Events2.CommandEvents(System.String,System.Int32)"></see> returns a <see cref="P:EnvDTE80.Events2.CommandEvents(System.String,System.Int32)"></see> object representing all commands in the environment.</param>
		</member>
		<member name="P:EnvDTE80.Events2.DebuggerEvents">
			<summary>Gets the object that provides events from the debugger.</summary>
			<returns>A <see cref="T:EnvDTE.DebuggerEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.DebuggerExpressionEvaluationEvents">
			<summary>Gets an event object which can be used to be notified when the debugger starts or stops an expression evaluation.</summary>
			<returns>A <see cref="T:EnvDTE80.DebuggerExpressionEvaluationEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.DebuggerProcessEvents">
			<summary>Retrieves an event object which can be used to notify when a debugged process runs or stops.</summary>
			<returns>A <see cref="T:EnvDTE80.DebuggerProcessEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.DocumentEvents(EnvDTE.Document)">
			<summary>Gets the <see cref="T:EnvDTE.DocumentEvents"></see> that provides events for the document.</summary>
			<returns>A <see cref="T:EnvDTE.DocumentEvents"></see> object.</returns>
			<param name="Document">Optional. Specifies a particular document for which to provide events.</param>
		</member>
		<member name="P:EnvDTE80.Events2.DTEEvents">
			<summary>Gets the <see cref="T:EnvDTE.DTEEvents"></see> object that provides events for the development environment.</summary>
			<returns>A <see cref="T:EnvDTE.DTEEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.FindEvents">
			<summary>Gets the <see cref="T:EnvDTE.FindEvents"></see> for the Find operation.</summary>
			<returns>A <see cref="T:EnvDTE.FindEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.MiscFilesEvents">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItemsEvents"></see> for the solution.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItemsEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.OutputWindowEvents(System.String)">
			<summary>Gets the <see cref="T:EnvDTE.OutputWindowEvents"></see> for the window events.</summary>
			<returns>An <see cref="T:EnvDTE.OutputWindowEvents"></see> object.</returns>
			<param name="Pane">Optional. The name of an Output windowpane. If Pane is supplied, the <see cref="T:EnvDTE.OutputWindowEvents"></see> object only provides events for that pane.</param>
		</member>
		<member name="P:EnvDTE80.Events2.ProjectItemsEvents">
			<summary>Gets an event object which can be used to find events for all project items within the solution.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItemsEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.ProjectsEvents">
			<summary>Gets an event object which can be used to find events for all projects wihin the solution.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectsEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.PublishEvents">
			<summary>Gets an object to comment to publishing events.</summary>
			<returns>A <see cref="T:EnvDTE80.PublishEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.SelectionEvents">
			<summary>Gets the <see cref="T:EnvDTE.SelectionEvents"></see> for the selection.</summary>
			<returns>A <see cref="T:EnvDTE.SelectionEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.SolutionEvents">
			<summary>Gets the <see cref="T:EnvDTE.SolutionEvents"></see> object for the solution.</summary>
			<returns>A <see cref="T:EnvDTE.SolutionEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.SolutionItemsEvents">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItemsEvents"></see> object for the solution.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItemsEvents"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Events2.TaskListEvents(System.String)">
			<summary>Gets the <see cref="T:EnvDTE.TaskListEvents"></see> for the development environment.</summary>
			<returns>A <see cref="T:EnvDTE.TaskListEvents"></see> object.</returns>
			<param name="Filter">Optional. The name of the task category. If Filter is supplied, the <see cref="T:EnvDTE.TaskListEvents"></see> object only provides events for that category. If Filter does not supply a valid category, the <see cref="P:EnvDTE80.Events2.TaskListEvents(System.String)"></see> property fails.</param>
		</member>
		<member name="P:EnvDTE80.Events2.TextDocumentKeyPressEvents(EnvDTE.TextDocument)">
			<summary>Gets an event object which can be used to find key press events within a text editor.</summary>
			<returns>A <see cref="T:EnvDTE80.TextDocumentKeyPressEvents"></see> object.</returns>
			<param name="TextDocument">Optional. A <see cref="T:EnvDTE.TextDocument"></see> object that serves as the source for the events.</param>
		</member>
		<member name="P:EnvDTE80.Events2.TextEditorEvents(EnvDTE.TextDocument)">
			<summary>Gets the <see cref="T:EnvDTE.TextEditorEvents"></see> object for the IDE.</summary>
			<returns>A <see cref="T:EnvDTE.TextEditorEvents"></see> object.</returns>
			<param name="TextDocumentFilter">Optional. A <see cref="T:EnvDTE.TextDocument"></see> object that serves as the source for the events.</param>
		</member>
		<member name="P:EnvDTE80.Events2.WindowEvents(EnvDTE.Window)">
			<summary>Gets the <see cref="T:EnvDTE.WindowEvents"></see> object that provides events for windows in the development environment.</summary>
			<returns>A <see cref="T:EnvDTE.WindowEvents"></see> object.</returns>
			<param name="WindowFilter">Optional. If supplied, window events occur only for the specified <see cref="T:EnvDTE.Window"></see>.</param>
		</member>
		<member name="P:EnvDTE80.Events2.WindowVisibilityEvents(EnvDTE.Window)">
			<summary>Gets an event object which can be used to be notified when a tool window is showing or hiding.</summary>
			<param name="WindowFilter">Optional. If supplied, window events occur only for the specified <see cref="T:EnvDTE.Window"></see>.</param>
		</member>
		<member name="T:EnvDTE80.FileCodeModel2">
			<summary>Allows access to programmatic constructs in a source file.</summary>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddAttribute(System.String,System.String,System.Object)">
			<summary>Creates a new attribute code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeAttribute"></see> object.</returns>
			<param name="Value">Required. The value of the attribute, which may be a list of parameters for a parameterized property, separated by commas.</param>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddAttribute(System.String,System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new attribute.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new class code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeClass"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddClass(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the class.</param>
			<param name="ImplementedInterfaces">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects, each representing an interface that the new class promises to implement.</param>
			<param name="Bases">Optional. Default = 0. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeClass"></see> objects from which the new class inherits its implementations.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new delegate code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeDelegate"></see> object.</returns>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddDelegate(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the delegate to add.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new enumeration code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeEnum"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddEnum(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Name">Required. The name of the enum to add.</param>
			<param name="Bases">Optional. Default = Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeType"></see> objects that specify the underlying type of the new enumeration.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new function code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeFunction"></see> object.</returns>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddFunction(System.String,EnvDTE.vsCMFunction,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new function.</param>
			<param name="Kind">Required. The <see cref="T:EnvDTE.vsCMFunction"></see> constant indicating the type of function, such as a property-get, a method, and so forth.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddImport(System.String,System.Object,System.String)">
			<summary>Creates a new code import statement and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE80.CodeImport"></see> object.</returns>
			<param name="Alias">Optional. Used to give the namespace a different display name.</param>
			<param name="Position">Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Name">The name of the new import element.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new interface code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeInterface"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddInterface(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new interface.</param>
			<param name="Bases">Optional. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects from which the new interface derives.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddNamespace(System.String,System.Object)">
			<summary>Creates a new namespace code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeNamespace"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddNamespace(System.String,System.Object)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Name">Required. The name of the new namespace.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new structure code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeStruct"></see> object.</returns>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddStruct(System.String,System.Object,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end.</param>
			<param name="Name">Required. The name of the new structure.</param>
			<param name="ImplementedInterfaces">Required. Default value is Nothing. A SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects, each representing interfaces that the new class promises to implement.</param>
			<param name="Bases">Required. Default value is Nothing. A variant that holds a SafeArray of fully qualified type names or <see cref="T:EnvDTE.CodeInterface"></see> objects from which the new interface derives.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)">
			<summary>Creates a new variable code construct and inserts the code in the correct location.</summary>
			<returns>A <see cref="T:EnvDTE.CodeVariable"></see> object.</returns>
			<param name="Type">Required. A <see cref="T:EnvDTE.vsCMTypeRef"></see> constant indicating the data type that the function returns. This can be a <see cref="T:EnvDTE.CodeTypeRef"></see> object, a <see cref="T:EnvDTE.vsCMTypeRef"></see> constant, or a fully qualified type name.</param>
			<param name="Position">Optional. Default = 0. The code element after which to add the new element. If the value is a <see cref="T:EnvDTE.CodeElement"></see>, then the new element is added immediately after it.If the value is a Long data type, then <see cref="M:EnvDTE80.FileCodeModel2.AddVariable(System.String,System.Object,System.Object,EnvDTE.vsCMAccess)"></see> indicates the element after which to add the new element.Because collections begin their count at 1, passing 0 indicates that the new element should be placed at the beginning of the collection. A value of -1 means the element should be placed at the end. </param>
			<param name="Name">Required. The name of the new variable.</param>
			<param name="Access">Optional. A <see cref="T:EnvDTE.vsCMAccess"></see> constant.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.BeginBatch">
			<summary>Suspends the occurrence of edit events until all changes to the code model have been applied.</summary>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.CodeElementFromPoint(EnvDTE.TextPoint,EnvDTE.vsCMElement)">
			<summary>Returns a code element at a specific location in a source file.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="Point">Required. A <see cref="T:EnvDTE.TextPoint"></see> object representing the editor location for which you want a code element.</param>
			<param name="Scope">Required. A <see cref="T:EnvDTE.vsCMElement"></see> value representing the code element of the specified type that contains the editor location.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.ElementFromID(System.String)">
			<summary>Used to receive specific <see cref="T:EnvDTE.CodeElement"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElement"></see> object.</returns>
			<param name="ID">The string used to identify the element.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.EndBatch">
			<summary>Enables the suspended events to occur after the batch edit of the code model.</summary>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.Remove(System.Object)">
			<summary>Removes the specified code element from the source file.</summary>
			<param name="Element">Required. A <see cref="T:EnvDTE.CodeElement"></see> object or the name of a code element to remove from the source code.</param>
		</member>
		<member name="M:EnvDTE80.FileCodeModel2.Synchronize">
			<summary>Ensures that all current code model events have been raised and the model has finished being generated.</summary>
		</member>
		<member name="P:EnvDTE80.FileCodeModel2.CodeElements">
			<summary>Gets a collection of code elements.</summary>
			<returns>A <see cref="T:EnvDTE.CodeElements"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.FileCodeModel2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.FileCodeModel2.IsBatchOpen">
			<summary>Gets a value indicating whether a batch code model updates is currently open.</summary>
			<returns>true if a batch of code model updates is currently open; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.FileCodeModel2.Language">
			<summary>Gets the programming language used to author the code.</summary>
			<returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.FileCodeModel2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.FileCodeModel"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.FileCodeModel2.ParseStatus">
			<summary>Used when the code model is built to determine whether the parse operation completed or encountered an error.</summary>
			<returns>A <see cref="T:EnvDTE80.vsCMParseStatus"></see> enumeration.</returns>
		</member>
		<member name="T:EnvDTE80.Find2">
			<summary>Supports general text Find operations in the environment for documents and files.</summary>
		</member>
		<member name="M:EnvDTE80.Find2.Execute">
			<summary>Performs a search based on the options set for the <see cref="T:EnvDTE.Find"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.vsFindResult"></see> constant.</returns>
		</member>
		<member name="M:EnvDTE80.Find2.FindReplace(EnvDTE.vsFindAction,System.String,System.Int32,System.String,EnvDTE.vsFindTarget,System.String,System.String,EnvDTE.vsFindResultsLocation)">
			<summary>Performs a Find or Replace operation based on the arguments to the method, without affecting the options set for the <see cref="T:EnvDTE.Find"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.vsFindResult"></see> constant.</returns>
			<param name="vsFindOptionsValue">Optional. A bit field indicating several aspects of the search to perform.For matching, you can supply <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchCase"></see>, <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchWholeWord"></see>, or <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsMatchInHiddenText"></see>.Flags that can be turned on for files, project, and solution targets are <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsSearchSubfolders"></see> and <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsKeepModifiedDocumentsOpen"></see>.Flags for the <see cref="P:EnvDTE.Find.FindWhat"></see> property syntax are <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsRegularExpression"></see> and <see cref="F:EnvDTE.vsFindOptions.vsFindOptionsWildcards"></see>. If neither is supplied, then <see cref="P:EnvDTE.Find.FindWhat"></see> is matched literally.vsFindOptionsValue defaults to all flags turned off. </param>
			<param name="Target">Optional. A <see cref="T:EnvDTE.vsFindTarget"></see> constant that indicates the target for the search operation, such as the current document or find-in-files.</param>
			<param name="FilesOfType">Optional. A semicolon-separated list of file types to include in the search. Other file types encountered in the specified targets are ignored. The default value is "", which means that all files are searched.</param>
			<param name="FindWhat">Optional. The pattern to search for. The default is "".</param>
			<param name="SearchPath">Optional. A semicolon-separated list of directories and file names to search. The default value is "".</param>
			<param name="ResultsLocation">Optional. A <see cref="T:EnvDTE.vsFindResultsLocation"></see> constant. There are two possible result lists where <see cref="T:EnvDTE.Find"></see> results can display. You can perform two searches without overwriting the results of the first search. Using ResultsLocation, you can determine the result list in which to place the <see cref="T:EnvDTE.Find"></see> results.</param>
			<param name="Action">Required. A <see cref="T:EnvDTE.vsFindAction"></see> constant that indicates the search action to take.</param>
			<param name="ReplaceWith">Optional. A string with which to replace the matched text when Action is set to <see cref="F:EnvDTE.vsFindAction.vsFindActionReplace"></see> or <see cref="F:EnvDTE.vsFindAction.vsFindActionReplaceAll"></see>. Default value is "".</param>
		</member>
		<member name="P:EnvDTE80.Find2.Action">
			<summary>Gets or sets how to find, such as find next match, find all, replace and find, and so forth.</summary>
			<returns>A <see cref="T:EnvDTE.vsFindAction"></see> constant representing the type of find action.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.Backwards">
			<summary>Gets or sets a value indicating whether the search is performed backwards from the current position.</summary>
			<returns>true if search is performed backwards; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.FilesOfType">
			<summary>Gets or sets the file extension for the files to be searched.</summary>
			<returns>The file extension for the files to be searched.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.FindWhat">
			<summary>Gets or sets the text or pattern to find.</summary>
			<returns>The text or pattern to find.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.KeepModifiedDocumentsOpen">
			<summary>Gets or sets a value indicating whether or not modified documents remain open after a replace operation.</summary>
			<returns>true means the modified document was kept open; false means the modified document was closed.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.MatchCase">
			<summary>Gets or sets a value indicating whether the search is case-sensitive.</summary>
			<returns>true means the search was case-sensitive; false means the search was not case-sensitive.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.MatchInHiddenText">
			<summary>Gets or sets a value indicating whether hidden text is included in the search.</summary>
			<returns>true means the search was performed in hidden text; false means the search was not performed in hidden text.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.MatchWholeWord">
			<summary>Gets or sets a value indicating whether the search matches whole words only.</summary>
			<returns>true means the search matched entire words only; false means the search matched partial as well as entire words.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Find"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.PatternSyntax">
			<summary>Gets or sets the syntax used to specify the search pattern.</summary>
			<returns>A <see cref="T:EnvDTE.vsFindPatternSyntax"></see> constant representing the type of syntax used for the search pattern.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.ReplaceWith">
			<summary>Gets or sets the replacement text for a replacement operation.</summary>
			<returns>The text to be used in the replacement operation.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.ResultsLocation">
			<summary>Gets or sets the location where the results are shown in a bulk search operation.</summary>
			<returns>A <see cref="T:EnvDTE.vsFindResultsLocation"></see> constant.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.SearchPath">
			<summary>Gets or sets a list of directories to use for a find-in-files operation.</summary>
			<returns>The search paths to use for a find-in-files operation.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.SearchSubfolders">
			<summary>Gets or sets a value indicating whether subfolders are included in a search operation.</summary>
			<returns>true if the search includes subfolders; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:EnvDTE80.Find2.Target">
			<summary>Gets or sets the target of the search operation, such as all open docs, files, the active document, and so forth.</summary>
			<returns>A <see cref="T:EnvDTE.vsFindTarget"></see> constant that indicates the target for the search operation, such as the current document or files on disk (or, find-in-files).</returns>
		</member>
		<member name="P:EnvDTE80.Find2.WaitForFindToComplete">
			<summary>Gets or sets a value indicating whether a find result is returned before continuing execution.</summary>
			<returns>true if find operation is asynchronous; otherwise, false.</returns>
		</member>
		<member name="T:EnvDTE80.IInternalExtenderProvider">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.IInternalExtenderProvider.CanExtend(System.String,System.String,System.Object)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ExtenderName"> </param>
			<param name="ExtenderCATID"> </param>
			<param name="ExtendeeObject"> </param>
		</member>
		<member name="M:EnvDTE80.IInternalExtenderProvider.GetExtender(System.String,System.String,System.Object,EnvDTE.IExtenderSite,System.Int32)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Cookie"> </param>
			<param name="ExtenderSite"> </param>
			<param name="ExtenderName"> </param>
			<param name="ExtenderCATID"> </param>
			<param name="ExtendeeObject"> </param>
		</member>
		<member name="M:EnvDTE80.IInternalExtenderProvider.GetExtenderNames(System.String,System.Object)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ExtenderCATID"> </param>
			<param name="ExtendeeObject"> </param>
		</member>
		<member name="T:EnvDTE80.IncrementalSearch">
			<summary>Provides access to the incremental search (ISearch) capability of the text editor.</summary>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.AppendCharAndSearch(System.Int16)">
			<summary>Adds a character to the ISearch pattern and performs a search for the new string.</summary>
			<returns>A <see cref="T:EnvDTE80.vsIncrementalSearchResult"></see> enumeration.</returns>
			<param name="Character">A short integer that translates to a Unicode character.</param>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.DeleteCharAndBackup">
			<summary>Removes one character from the search pattern and moves the selection back to the previous match.</summary>
			<returns>A <see cref="T:EnvDTE80.vsIncrementalSearchResult"></see> enumeration.</returns>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.Exit">
			<summary>Stops the current ISearch and returns the editor to its basic behavior.</summary>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.SearchBackward">
			<summary>Searches for the current pattern from the current position to the beginning of the document.</summary>
			<returns>A <see cref="T:EnvDTE80.vsIncrementalSearchResult"></see> enumeration.</returns>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.SearchForward">
			<summary>Searches for the current pattern from the current position to the end of the document.</summary>
			<returns>A <see cref="T:EnvDTE80.vsIncrementalSearchResult"></see> enumeration.</returns>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.SearchWithLastPattern">
			<summary>Repeats the current ISearch without changing the pattern</summary>
			<returns>A <see cref="T:EnvDTE80.vsIncrementalSearchResult"></see> enumeration.</returns>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.StartBackward">
			<summary>Starts a backward search.</summary>
		</member>
		<member name="M:EnvDTE80.IncrementalSearch.StartForward">
			<summary>Starts a forward search.</summary>
		</member>
		<member name="P:EnvDTE80.IncrementalSearch.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.IncrementalSearch.IncrementalSearchModeOn">
			<summary>Gets a value indicating whether an ISearch is being performed.</summary>
			<returns>true if an ISearch has been started but not exited; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.IncrementalSearch.Pattern">
			<summary>Gets the characters being processed in the current ISearch.</summary>
			<returns>The characters being processed in the current ISearch.</returns>
		</member>
		<member name="T:EnvDTE80.IVsExtensibility2">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.BuildUIHierarchyFromTree(System.Int32,EnvDTE.Window)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="hwnd"> </param>
			<param name="pParent"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.EnterAutomationFunction">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.ExitAutomationFunction">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireCodeModelEvent(System.Int32,EnvDTE.CodeElement,EnvDTE80.vsCMChangeKind)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="changeKind"> </param>
			<param name="dispid"> </param>
			<param name="pElement"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireCodeModelEvent3(System.Int32,System.Object,EnvDTE.CodeElement,EnvDTE80.vsCMChangeKind)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="changeKind"> </param>
			<param name="dispid"> </param>
			<param name="pElement"> </param>
			<param name="pParent"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireMacroReset">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireProjectItemsEvent_ItemAdded(EnvDTE.ProjectItem)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ProjectItem"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireProjectItemsEvent_ItemRemoved(EnvDTE.ProjectItem)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ProjectItem"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireProjectItemsEvent_ItemRenamed(EnvDTE.ProjectItem,System.String)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="OldName"> </param>
			<param name="ProjectItem"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireProjectsEvent_ItemAdded(EnvDTE.Project)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Project"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireProjectsEvent_ItemRemoved(EnvDTE.Project)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Project"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.FireProjectsEvent_ItemRenamed(EnvDTE.Project,System.String)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="Project"> </param>
			<param name="OldName"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.get_Properties(EnvDTE.ISupportVSProperties,System.Object,EnvDTE.Properties@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ppProperties"> </param>
			<param name="pdispPropObj"> </param>
			<param name="pParent"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.Get_TextBuffer(System.Object,EnvDTE.IExtensibleObjectSite)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pVsTextStream"> </param>
			<param name="pParent"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.GetConfigMgr(System.Object,System.UInt32)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="itemid"> </param>
			<param name="pIVsProject"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.GetDocumentFromDocCookie(System.Int32)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="lDocCookie"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.GetGlobalsObject(System.Object)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="ExtractFrom"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.GetSuppressUI(System.Boolean@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pOut"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.GetUserControl(System.Boolean@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="fUserControl"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.IsFireCodeModelEventNeeded(System.Boolean@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="vbNeeded"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.IsMethodDisabled(System.Guid@,System.Int32)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="dispid"> </param>
			<param name="pGUID"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.LockServer(System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="__MIDL_0010"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.RunWizardFile(System.String,System.Int32,System.Object[]@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="vContextParams"> </param>
			<param name="hwndOwner"> </param>
			<param name="bstrWizFilename"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.RunWizardFileEx(System.String,System.Int32,System.Object[]@,System.Object[]@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="vContextParams"> </param>
			<param name="hwndOwner"> </param>
			<param name="bstrWizFilename"> </param>
			<param name="vCustomParams"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.SetSuppressUI(System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="In"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.SetUserControl(System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="fUserControl"> </param>
		</member>
		<member name="M:EnvDTE80.IVsExtensibility2.SetUserControlUnlatched(System.Boolean)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="fUserControl"> </param>
		</member>
		<member name="T:EnvDTE80.IVsProfferCommands2">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.AddCommandBar(System.String,EnvDTE.vsCommandBarType,System.Object,System.UInt32,System.Object@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="dwType"> </param>
			<param name="pszCmdBarName"> </param>
			<param name="pCmdBarParent"> </param>
			<param name="dwIndex"> </param>
			<param name="ppCmdBar"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.AddCommandBarControl(System.String,System.Object,System.UInt32,System.UInt32,System.Object@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pCmdBarParent"> </param>
			<param name="pszCmdNameCanonical"> </param>
			<param name="dwIndex"> </param>
			<param name="ppCmdBarCtrl"> </param>
			<param name="dwCmdType"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.AddNamedCommand(System.Guid@,System.Guid@,System.String,System.UInt32@,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Guid@)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="dwCmdFlagsDefault"> </param>
			<param name="rgguidUIContexts"> </param>
			<param name="pszBtnText"> </param>
			<param name="pszSatelliteDLL"> </param>
			<param name="pszCmdNameCanonical"> </param>
			<param name="dwBitmapResourceId"> </param>
			<param name="pszCmdNameLocalized"> </param>
			<param name="pguidPackage"> </param>
			<param name="pszCmdTooltip"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="cUIContexts"> </param>
			<param name="dwBitmapImageIndex"> </param>
			<param name="pdwCmdId"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.AddNamedCommand2(System.Guid@,System.Guid@,System.String,System.UInt32@,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Guid@,System.UInt32)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="dwCmdFlagsDefault"> </param>
			<param name="rgguidUIContexts"> </param>
			<param name="dwUIElementType"> </param>
			<param name="pszBtnText"> </param>
			<param name="pszSatelliteDLL"> </param>
			<param name="pszCmdNameCanonical"> </param>
			<param name="dwBitmapResourceId"> </param>
			<param name="pszCmdNameLocalized"> </param>
			<param name="pguidPackage"> </param>
			<param name="pszCmdTooltip"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="cUIContexts"> </param>
			<param name="dwBitmapImageIndex"> </param>
			<param name="pdwCmdId"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.FindCommandBar(System.IntPtr,System.Guid@,System.UInt32)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="dwMenuId"> </param>
			<param name="pToolbarSet"> </param>
			<param name="pguidCmdGroup"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.RemoveCommandBar(System.Object)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pCmdBar"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.RemoveCommandBarControl(System.Object)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pCmdBarCtrl"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.RemoveNamedCommand(System.String)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pszCmdNameCanonical"> </param>
		</member>
		<member name="M:EnvDTE80.IVsProfferCommands2.RenameNamedCommand(System.String,System.String,System.String)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="pszCmdNameCanonicalNew"> </param>
			<param name="pszCmdNameLocalizedNew"> </param>
			<param name="pszCmdNameCanonical"> </param>
		</member>
		<member name="T:EnvDTE80.LifetimeInformation">
			<summary>Used to determine if an object has been deleted but not discarded by the garbage collector.</summary>
		</member>
		<member name="P:EnvDTE80.LifetimeInformation.HasBeenDeleted">
			<summary>Gets a value indicating whether whether an object has been deleted but not yet discarded by the garbage collector.</summary>
			<returns>true if the object behind it has been deleted; otherwise, false.</returns>
		</member>
		<member name="T:EnvDTE80.Process2">
			<summary>The <see cref="T:EnvDTE80.Process2"></see> object is used to examine and manipulate processes. The <see cref="T:EnvDTE80.Process2"></see> object supersedes the <see cref="T:EnvDTE.Process"></see> object.</summary>
		</member>
		<member name="M:EnvDTE80.Process2.Attach">
			<summary>Causes the debugger to attach this process.</summary>
		</member>
		<member name="M:EnvDTE80.Process2.Attach2(System.Object)">
			<summary>Similar to <see cref="M:EnvDTE80.Process2.Attach"></see>, causes the debugger to attach this process, only it allows you to specify an engine or set of engines.</summary>
			<param name="Engines">A <see cref="T:EnvDTE80.Engines"></see> collection.</param>
		</member>
		<member name="M:EnvDTE80.Process2.Break(System.Boolean)">
			<summary>Causes the given process to pause its execution so that its current state can be analyzed.</summary>
			<param name="WaitForBreakMode">Set to true to return only when the debugger has entered break mode. Set to false to break and return immediately. See Breaking Execution for more information.</param>
		</member>
		<member name="M:EnvDTE80.Process2.Detach(System.Boolean)">
			<summary>Causes the debugger to detach from this process.</summary>
			<param name="WaitForBreakOrEnd">Set to true if the debugging session should stop only when it reaches a break or the end. Set to false if you intend to stop debugging, but you need to perform other tasks in the macro before the debugger breaks or ends. See Breaking Execution for more information.</param>
		</member>
		<member name="M:EnvDTE80.Process2.Terminate(System.Boolean)">
			<summary>Terminates this process.</summary>
			<param name="WaitForBreakOrEnd">Set to true if the debugging session should stop only when it reaches a break or the end. Set to false if you intend to stop debugging, but you need to perform other tasks in the macro before the debugger breaks or ends. See Breaking Execution for more information.</param>
		</member>
		<member name="P:EnvDTE80.Process2.Collection">
			<summary>Gets the collection containing the object supporting this property or contained within this code construct.</summary>
			<returns>A <see cref="T:EnvDTE.Processes"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.IsBeingDebugged">
			<summary>Gets a value indicating if the program is being debugged.</summary>
			<returns>true if the program is being debugged, otherwise false.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.Name">
			<summary>Gets the name of the process.</summary>
			<returns>A string representing the name of the process.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Process2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Debugger"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.ProcessID">
			<summary>Gets the ID number assigned to this process.</summary>
			<returns>An <see cref="F:System.Globalization.NumberStyles.Integer"></see> value representing the ID number of the process.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.Programs">
			<summary>Gets a collection of <see cref="T:EnvDTE.Program"></see> objects.</summary>
			<returns>A <see cref="T:EnvDTE.Programs"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.Threads">
			<summary>Gets a collection of <see cref="T:EnvDTE.Thread"></see> objects.</summary>
			<returns>A <see cref="T:EnvDTE.Threads"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.Transport">
			<summary>Gets the <see cref="T:EnvDTE80.Transport"></see> being used to debug this process.</summary>
			<returns>A <see cref="T:EnvDTE80.Transport"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Process2.TransportQualifier">
			<summary>A computer name or an IP address.</summary>
			<returns>A string containing a transport qualifier.</returns>
		</member>
		<member name="T:EnvDTE80.ProjectKinds">
			<summary>Used to determine if the folder node is a solution folder.</summary>
		</member>
		<member name="F:EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder">
			<summary>Returned when a project appears as a solution folder within Solution Explorer, and the <see cref="P:EnvDTE.Project.Kind"></see> property is invoked for that folder.</summary>
		</member>
		<member name="T:EnvDTE80.PublishEvents">
			<summary>Use this object for functionality and refer to <see cref="T:EnvDTE80.PublishEventsClass"></see> for this object's documentation.</summary>
		</member>
		<member name="T:EnvDTE80.PublishEventsClass">
			<summary>This class supports the .NET Framework infrastructure and is not intended to be used directly from your code. Refer to <see cref="T:EnvDTE80.PublishEvents"></see> for this functionality. Do not instantiate from this class.</summary>
		</member>
		<member name="M:EnvDTE80.PublishEventsClass.#ctor">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80.PublishEventsClass.OnPublishBegin">
			<summary>Event triggered when a publish operation is started.</summary>
		</member>
		<member name="E:EnvDTE80.PublishEventsClass.OnPublishDone">
			<summary>Event triggered when a publish operation has ended.</summary>
		</member>
		<member name="M:EnvDTE80.PublishEventsClass.add_OnPublishBegin(EnvDTE80._dispPublishEvents_OnPublishBeginEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.PublishEventsClass.add_OnPublishDone(EnvDTE80._dispPublishEvents_OnPublishDoneEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.PublishEventsClass.remove_OnPublishBegin(EnvDTE80._dispPublishEvents_OnPublishBeginEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.PublishEventsClass.remove_OnPublishDone(EnvDTE80._dispPublishEvents_OnPublishDoneEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80.Solution2">
			<summary>Represents all projects and solution-wide properties in the integrated development environment (IDE).</summary>
		</member>
		<member name="M:EnvDTE80.Solution2.AddFromFile(System.String,System.Boolean)">
			<summary>Adds a project to the solution that is based on a project file already stored in the system.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
			<param name="FileName">Required. The full path and file name of the project file.</param>
			<param name="Exclusive">Optional. Indicates whether the project loads in the current solution or its own solution; true if the current solution is closed and the project is added to a new solution, false if the project is added to the existing, open solution.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.AddFromTemplate(System.String,System.String,System.String,System.Boolean)">
			<summary>Copies an existing project file, and any items or subdirectories it contains, to the specified location and adds it to the solution.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
			<param name="Destination">Required. The full path of the directory in which to copy the contents of FileName.</param>
			<param name="FileName">Required. The full path and file name with extension of the template project file.</param>
			<param name="Exclusive">Optional. Indicates whether the project loads in the current solution or its own; true if the current solution is closed and the project is added to a new solution, false if the project is added to the existing, open solution.</param>
			<param name="ProjectName">Required. The name of the project file in the destination directory. This should include the extension. The displayed name is derived from ProjectName.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.AddSolutionFolder(System.String)">
			<summary>Adds a solution folder to a <see cref="T:EnvDTE.ProjectItems"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
			<param name="Name">The name of the solution folder.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.Close(System.Boolean)">
			<summary>Closes the current solution.</summary>
			<param name="SaveFirst">Optional. Indicates whether to save the solution before closing it; true if the solution should be saved prior to closing it, false if not.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.Create(System.String,System.String)">
			<summary>Creates an empty solution in the specified directory with the specified name.</summary>
			<param name="Destination">Required. The directory in which to create the .sln and .suo (solution) files.</param>
			<param name="Name">Required. The name to display in Solution Explorer. This is also the base name of the .sln and .suo files.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.FindProjectItem(System.String)">
			<summary>Locates an item in a project.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
			<param name="FileName">Required. The name of the project item.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.GetEnumerator">
			<summary>Returns an enumeration for items in a collection.</summary>
			<returns>An enumerator.</returns>
		</member>
		<member name="M:EnvDTE80.Solution2.GetProjectItemTemplate(System.String,System.String)">
			<summary>Returns a path to the indicated project item template.</summary>
			<returns>The full name of the project item template.</returns>
			<param name="TemplateName">The name of the template.</param>
			<param name="Language">The language used to write the template.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.GetProjectTemplate(System.String,System.String)">
			<summary>Returns a path to the indicated project template.</summary>
			<returns>The full name of the project template.</returns>
			<param name="TemplateName">The name of the template.</param>
			<param name="Language">The language used to write the template.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.Item(System.Object)">
			<summary>Returns an indexed member of a <see cref="T:EnvDTE.Projects"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
			<param name="index">Required. The index of the item to return.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.Open(System.String)">
			<summary>Opens a specified solution.</summary>
			<param name="FileName">Required. The file name of the file to open.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.ProjectItemsTemplatePath(System.String)">
			<summary>Superseded by <see cref="M:EnvDTE80.Solution2.GetProjectItemTemplate(System.String,System.String)"></see>.</summary>
			<returns>The path to the templates of the given project type.</returns>
			<param name="ProjectKind">Required. The EnvDTE.Constants.vsProjectKind* project template representing the project type.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.Remove(EnvDTE.Project)">
			<summary>Removes the specified project from the solution.</summary>
			<param name="proj">Required. The project to remove from the solution.</param>
		</member>
		<member name="M:EnvDTE80.Solution2.SaveAs(System.String)">
			<summary>Saves the solution.</summary>
			<param name="FileName">Required. The file name in which to save the solution. If the file exists, it is overwritten.</param>
		</member>
		<member name="P:EnvDTE80.Solution2.AddIns">
			<summary>Gets an <see cref="T:EnvDTE.AddIns"></see> collection, which contains all currently available Add-ins associated with the solution.</summary>
			<returns>An <see cref="T:EnvDTE.AddIns"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.Count">
			<summary>Gets a value indicating the number of projects in the solution.</summary>
			<returns>The number of projects in the solution.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.Extender(System.String)">
			<summary>Gets the requested Extender object if it is available for this object.</summary>
			<returns>An Extender object.</returns>
			<param name="ExtenderName">Required. The name of the Extender to return.</param>
		</member>
		<member name="P:EnvDTE80.Solution2.ExtenderCATID">
			<summary>Gets the Extender category ID (CATID) for the object.</summary>
			<returns>A GUID representing the CATID of the object.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.ExtenderNames">
			<summary>Gets a list of available Extenders for the object.</summary>
			<returns>An object containing an automation-compliant array of strings.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.FullName">
			<summary>Gets the full path and name of the object's file.</summary>
			<returns>The full path and name of the object's file.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.Globals">
			<summary>Gets the <see cref="T:EnvDTE.Globals"></see> object that contains any variable values that may be saved in the solution (.sln) file, the project file, or the user's profile data.</summary>
			<returns>A <see cref="T:EnvDTE.Globals"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.IsOpen">
			<summary>Gets a value which indicates whether a solution is open.</summary>
			<returns>true if a solution is open; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Solution2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.Projects">
			<summary>Gets a collection of the projects currently in the solution.</summary>
			<returns>A <see cref="T:EnvDTE.Projects"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.Properties">
			<summary>Gets a collection of all properties that pertain to the <see cref="T:EnvDTE80.Solution2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Properties"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.Saved">
			<summary>Gets or sets a value indicating whether a solution has not been modified since last being saved or opened.</summary>
			<returns>true if the object has not been modified since last being saved or opened; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.SolutionBuild">
			<summary>Gets the <see cref="T:EnvDTE.SolutionBuild"></see> object for the solution, which represents the root of the build automation model at the solution level.</summary>
			<returns>A <see cref="T:EnvDTE.SolutionBuild"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Solution2.TemplatePath(System.String)">
			<summary>Superseded by <see cref="M:EnvDTE80.Solution2.GetProjectTemplate(System.String,System.String)"></see>.</summary>
			<returns>The full path and name of the directory that contains templates for the specified type of project. </returns>
			<param name="ProjectType">Required. A GUID that identifies the type of project.</param>
		</member>
		<member name="T:EnvDTE80.SolutionBuild2">
			<summary>Represents the root of the build automation model at the solution level.</summary>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.Build(System.Boolean)">
			<summary>Causes the active solution configuration to begin building.</summary>
			<param name="WaitForBuildToFinish">Optional. Determines whether <see cref="M:EnvDTE80.SolutionBuild2.Build(System.Boolean)"></see> retains control until the build operation is complete. Default value is false.</param>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.BuildProject(System.String,System.String,System.Boolean)">
			<summary>Builds the specified project and its dependencies in the context of the specified solution configuration.</summary>
			<param name="SolutionConfiguration">Required. The name of the new solution configuration that provides the context in which to build the project.</param>
			<param name="WaitForBuildToFinish">Optional. Determines whether to wait for the build to complete. If true, then it waits, otherwise, it does not wait.</param>
			<param name="ProjectUniqueName">Required. The project to build.</param>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.Clean(System.Boolean)">
			<summary>Deletes all compiler-generated support files for marked projects.</summary>
			<param name="WaitForCleanToFinish">Optional. Determines whether <see cref="M:EnvDTE.SolutionBuild.Build(System.Boolean)"></see> retains control until the build operation is complete. Default value is false.</param>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.Debug">
			<summary>Starts debugging the solution.</summary>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.Deploy(System.Boolean)">
			<summary>Causes each project in the active solution configuration that is marked for deployment to deploy.</summary>
			<param name="WaitForDeployToFinish">Optional. Determines whether build retains control until the deployment operation is complete. Default value is false.</param>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.DeployProject(System.String,System.String,System.Boolean)">
			<summary>Deploys a project.</summary>
			<param name="SolutionConfiguration">The solution configuration to deploy.</param>
			<param name="ProjectUniqueName">The unique name of a project to deploy.</param>
			<param name="WaitForDeployToFinish">If true, the call waits until deployment has completed. If false, the call returns immediately.</param>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.Publish(System.Boolean)">
			<summary>Initiates a publish operation.</summary>
			<param name="WaitForPublishToFinish">Optional. Determines whether build retains control until the publish operation is complete. Default value is false.</param>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.PublishProject(System.String,System.String,System.Boolean)">
			<summary>Publishes a project.</summary>
			<param name="SolutionConfiguration">The solution configuration to publish.</param>
			<param name="WaitForPublishToFinish">If true, the call waits until publish has completed. If false, the call returns immediately.</param>
			<param name="ProjectUniqueName">The unique name of a project to publish.</param>
		</member>
		<member name="M:EnvDTE80.SolutionBuild2.Run">
			<summary>Causes the active solution configuration to execute.</summary>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.ActiveConfiguration">
			<summary>Gets the currently active <see cref="T:EnvDTE.SolutionConfiguration"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.SolutionConfiguration"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.BuildDependencies">
			<summary>Gets a <see cref="T:EnvDTE.BuildDependencies"></see> collection that allows you to specify which projects depend on which other projects.</summary>
			<returns>A <see cref="T:EnvDTE.BuildDependencies"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.BuildState">
			<summary>Gets whether a build has ever been started in the current environment session, whether a build is currently in progress, or whether a build has been completed.</summary>
			<returns>A <see cref="T:EnvDTE.vsBuildState"></see> value representing the status of the build operation.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.LastBuildInfo">
			<summary>Gets the number of projects that failed to build.</summary>
			<returns>The number of projects that failed to build.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.LastPublishInfo">
			<summary>Gets the number of items that were successfully published.</summary>
			<returns>An integer containing the count of successfully published items.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.SolutionBuild"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Solution"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.PublishState">
			<summary>Gets the state of a publish operation.</summary>
			<returns>Returns a value from the <see cref="T:EnvDTE80.SolutionConfiguration2"></see> enumeration indicating whether publish has completed, is in process, or has not begun.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.SolutionConfigurations">
			<summary>Gets a collection of <see cref="T:EnvDTE.SolutionConfiguration"></see> objects.</summary>
			<returns>A <see cref="T:EnvDTE.SolutionConfigurations"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionBuild2.StartupProjects">
			<summary>Gets or sets the names of projects that are entry points for the application.</summary>
			<returns>An object containing the names of projects that are the entry points for the application.</returns>
		</member>
		<member name="T:EnvDTE80.SolutionConfiguration2">
			<summary>Represents information about a particular way to build the solution.</summary>
		</member>
		<member name="M:EnvDTE80.SolutionConfiguration2.Activate">
			<summary>Moves the focus to the current item.</summary>
		</member>
		<member name="M:EnvDTE80.SolutionConfiguration2.Delete">
			<summary>Removes the <see cref="T:EnvDTE.SolutionConfiguration"></see> object from the collection.</summary>
		</member>
		<member name="P:EnvDTE80.SolutionConfiguration2.Collection">
			<summary>Gets the <see cref="T:EnvDTE.SolutionConfigurations"></see> collection containing the <see cref="T:EnvDTE.SolutionConfiguration"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.SolutionConfigurations"></see> collections.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionConfiguration2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionConfiguration2.Name">
			<summary>Gets the name of the object.</summary>
			<returns>The name of the object.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionConfiguration2.PlatformName">
			<summary>Gets the target platform CPU for configuration.</summary>
			<returns>The name of the CPU platform.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionConfiguration2.SolutionContexts">
			<summary>Gets a collection of <see cref="T:EnvDTE.SolutionContext"></see> objects.</summary>
			<returns>A <see cref="T:EnvDTE.SolutionContexts"></see> collection.</returns>
		</member>
		<member name="T:EnvDTE80.SolutionFolder">
			<summary>Solution folders are project containers that allow developers to better organize large applications.</summary>
		</member>
		<member name="M:EnvDTE80.SolutionFolder.AddFromFile(System.String)">
			<summary>Adds an existing project to the solution folder.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
			<param name="FileName">The full path of the project.</param>
		</member>
		<member name="M:EnvDTE80.SolutionFolder.AddFromTemplate(System.String,System.String,System.String)">
			<summary>Adds a new project to the solution folder based on a project template.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
			<param name="Destination">This is the full path to a directory in which to copy the FileName contents.</param>
			<param name="FileName">The full path of the project template.</param>
			<param name="ProjectName">The name of the new project to be created.</param>
		</member>
		<member name="M:EnvDTE80.SolutionFolder.AddSolutionFolder(System.String)">
			<summary>Adds a solution folder to a <see cref="T:EnvDTE.ProjectItems"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
			<param name="Name">The name of the solution folder.</param>
		</member>
		<member name="P:EnvDTE80.SolutionFolder.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionFolder.Hidden">
			<summary>Sets or gets the hidden attribute of the solution.</summary>
			<returns>Determines if a solution is hidden from view in the solution explorer.</returns>
		</member>
		<member name="P:EnvDTE80.SolutionFolder.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.Find"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.SourceControl2">
			<summary>Used to interact with current source control system.</summary>
		</member>
		<member name="M:EnvDTE80.SourceControl2.CheckOutItem(System.String)">
			<summary>Checks the specified item out of source control.</summary>
			<returns>true if the item was successfully checked out; otherwise, false.</returns>
			<param name="ItemName">The full pathname to the file to check out.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.CheckOutItem2(System.String,EnvDTE80.vsSourceControlCheckOutOptions)">
			<summary>Checks the specified item out of source control.</summary>
			<returns>true if the item was successfully checked out; otherwise, False.</returns>
			<param name="Flags">Provides version checkout options with the <see cref="T:EnvDTE80.vsSourceControlCheckOutOptions"></see>.</param>
			<param name="ItemName">The full pathname to the file to check out.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.CheckOutItems(System.Object[]@)">
			<summary>Checks the specified items out of source control.</summary>
			<returns>true if the items were successfully checked out; otherwise, false.</returns>
			<param name="ItemNames">An array of strings that identify the items to be checked out.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.CheckOutItems2(System.Object[]@,EnvDTE80.vsSourceControlCheckOutOptions)">
			<summary>Checks the specified items out of source control.</summary>
			<returns>true if the items were successfully checked out; otherwise, false.</returns>
			<param name="Flags">Provides version checkout options with the <see cref="T:EnvDTE80.vsSourceControlCheckOutOptions"></see>.</param>
			<param name="ItemNames">An array of strings that identify the items to be checked out.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.ExcludeItem(System.String,System.String)">
			<summary>Excludes the specified item from the source control project.</summary>
			<param name="ItemName">The name of the item.</param>
			<param name="ProjectFile">The name of the project file that references the item.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.ExcludeItems(System.String,System.Object[]@)">
			<summary>Excludes the specified items from the specified project.</summary>
			<param name="ItemNames">An array of strings that identifies the items to be excluded.</param>
			<param name="ProjectFile">The name of the project file that references the files to be excluded.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.GetBindings(System.String)">
			<summary>Gets the source control bindings object of the specified project or solution.</summary>
			<returns>A <see cref="T:EnvDTE80.SourceControlBindings"></see> object.</returns>
			<param name="ItemPath">File path to a file under source control.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.IsItemCheckedOut(System.String)">
			<summary>Retrieves a Boolean value that indicates whether the specified item is checked out.</summary>
			<returns>true if the specified file is checked out; otherwise, false.</returns>
			<param name="ItemName">The name of the file to check for checked-out status.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.IsItemUnderSCC(System.String)">
			<summary>Retrieves a Boolean value that indicates whether the specified item is under source control.</summary>
			<returns>true if the item is under source control; otherwise, false.</returns>
			<param name="ItemName">The name of the file.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.UndoExcludeItem(System.String,System.String)">
			<summary>Include back an item into source code control.</summary>
			<param name="ItemName">An array of strings that identifies the item to be included.</param>
			<param name="ProjectFile">The name of the project file that references the file to be included.</param>
		</member>
		<member name="M:EnvDTE80.SourceControl2.UndoExcludeItems(System.String,System.Object[]@)">
			<summary>Include back the specified items into source code control.</summary>
			<param name="ItemNames">An array of strings that identifies the items to be included.</param>
			<param name="ProjectFile">The name of the project files that reference the file to be included.</param>
		</member>
		<member name="P:EnvDTE80.SourceControl2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SourceControl2.Parent">
			<summary>Gets- the immediate parent object of a <see cref="T:EnvDTE.SourceControl"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.SourceControlBindings">
			<summary>Used to define source control bindings for objects.</summary>
		</member>
		<member name="P:EnvDTE80.SourceControlBindings.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SourceControlBindings.LocalBinding">
			<summary>Gets the local path to the project or solution's connection root.</summary>
			<returns>A path.</returns>
		</member>
		<member name="P:EnvDTE80.SourceControlBindings.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.SourceControlBindings"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE80.SourceControl2"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.SourceControlBindings.ProviderName">
			<summary>Gets the name adopted by the provider.</summary>
			<returns>A name. </returns>
		</member>
		<member name="P:EnvDTE80.SourceControlBindings.ProviderRegKey">
			<summary>Gets the registry path to the provider settings.</summary>
			<returns>A registry path.</returns>
		</member>
		<member name="P:EnvDTE80.SourceControlBindings.ServerBinding">
			<summary>Gets the location inside the source control store where the project or solution's connection root is bound.</summary>
			<returns>The location inside the source control store where the project or solution's connection root is bound.</returns>
		</member>
		<member name="P:EnvDTE80.SourceControlBindings.ServerName">
			<summary>Gets the path to the source control server.</summary>
			<returns>A path.</returns>
		</member>
		<member name="T:EnvDTE80.TaskItems2">
			<summary>The <see cref="T:EnvDTE.TaskItems"></see> collection contains all of the tasks in the Task List window.</summary>
		</member>
		<member name="M:EnvDTE80.TaskItems2.Add(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean)">
			<summary>Adds a new task item to the <see cref="T:EnvDTE.TaskList"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.TaskItem"></see> object.</returns>
			<param name="SubCategory">Required. Represents the subcategory name of the task item.</param>
			<param name="Icon">Optional. Determines the type of icon that represents the new task item. The setting must be either <see cref="T:EnvDTE.vsTaskIcon"></see> or an IPictureDisp.</param>
			<param name="Checkable">Optional. Indicates whether or not you want the task item to provide a checkbox that users can check to indicate the task is complete. The default value is false.</param>
			<param name="Category">Required. Represents the category name of the task item.</param>
			<param name="File">Optional. Indicates the file or path associated with the new task item. The default value is an empty string (""), and if this is used, <see cref="P:EnvDTE.TaskItem.IsSettable(EnvDTE.vsTaskListColumn)"></see>(<see cref="F:EnvDTE.vsTaskListColumn.vsTaskListColumnFile"></see>) returns false. The file name can be a full path, a relative path, or simply a file name. Note that associating a file or path with an item does not necessarily mean that it performs any actions.</param>
			<param name="Description">Required. Describes the task item.</param>
			<param name="Line">Optional. Indicates the line in the source code associated with the new task item. The default value is 0, and if this is used, <see cref="P:EnvDTE.TaskItem.IsSettable(EnvDTE.vsTaskListColumn)"></see>(<see cref="F:EnvDTE.vsTaskListColumn.vsTaskListColumnLine"></see>) returns false. Note that associating a line number with an item does not necessarily mean that it performs any actions.</param>
			<param name="FlushItem">Optional. Indicates whether a new item is immediately visible in the Task List. When FlushItem is set to true, the Task List is updated immediately after Add is called. When FlushItem is set to false, the Task List is updated later after all updates are made. A false setting is used primarily to enhance performance when you are adding many items at a time to the Task List. The default value is true.</param>
			<param name="Priority">Optional. A <see cref="T:EnvDTE.vsTaskPriority"></see> constant denoting the priority of the task item: high, medium, or low. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityHigh"></see>, an exclamation point icon is displayed in the first column of the Task List. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium"></see>, nothing is displayed. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityLow"></see>, a down arrow icon is displayed.</param>
			<param name="CanUserDelete">Optional. Indicates whether a user can delete the new task item by pressing DELETE when the item is selected in the environment. The default value is true.</param>
		</member>
		<member name="M:EnvDTE80.TaskItems2.Add2(System.String,System.String,System.String,System.Int32,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
			<summary>Adds a new task item to the <see cref="T:EnvDTE.TaskList"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.TaskItem"></see> object.</returns>
			<param name="SubCategory">Required. Represents the subcategory name of the task item.</param>
			<param name="Icon">Optional. Determines the type of icon that represents the new task item. The setting must be either <see cref="T:EnvDTE.vsTaskIcon"></see> or an IPictureDisp.</param>
			<param name="Checkable">Optional. Indicates whether or not you want the task item to provide a checkbox that users can check to indicate the task is complete. The default value is false.</param>
			<param name="Category">Required. Represents the category name of the task item.</param>
			<param name="File">Optional. Indicates the file or path associated with the new task item. The default value is an empty string (""), and if this is used, <see cref="P:EnvDTE.TaskItem.IsSettable(EnvDTE.vsTaskListColumn)"></see>(<see cref="F:EnvDTE.vsTaskListColumn.vsTaskListColumnFile"></see>) returns false. The file name can be a full path, a relative path, or simply a file name. Note that associating a file or path with an item does not necessarily mean that it performs any actions.</param>
			<param name="AutoNavigate">Optional. Indicates whether the <see cref="T:EnvDTE.TaskItem"></see> has the AutoNavigate feature enabled. AutoNavigate is on when this is set to true; otherwise, false.</param>
			<param name="Description">Required. Describes the task item.</param>
			<param name="Line">Optional. Indicates the line in the source code associated with the new task item. The default value is 0, and if this is used, <see cref="P:EnvDTE.TaskItem.IsSettable(EnvDTE.vsTaskListColumn)"></see>(<see cref="F:EnvDTE.vsTaskListColumn.vsTaskListColumnLine"></see>) returns false. Note that associating a line number with an item does not necessarily mean that it performs any actions.</param>
			<param name="FlushItem">Optional. Indicates whether a new item is immediately visible in the Task List. When FlushItem is set to true, the Task List is updated immediately after Add is called. When FlushItem is set to false, the Task List is updated later after all updates are made. A false setting is used primarily to enhance performance when you are adding a large number of items at a time to the Task List. The default value is true.</param>
			<param name="Priority">Optional. A <see cref="T:EnvDTE.vsTaskPriority"></see> constant denoting the priority of the task item: high, medium, or low. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityHigh"></see>, an exclamation point icon is displayed in the first column of the Task List. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium"></see>, nothing is displayed. If the value is <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityLow"></see>, a down arrow icon is displayed.</param>
			<param name="CanUserDelete">Optional. Indicates whether a user can delete the new task item by pressing DELETE when the item is selected in the environment. The default value is true.</param>
		</member>
		<member name="M:EnvDTE80.TaskItems2.ForceItemsToTaskList">
			<summary>Sends all task items to the Task List that haven't been added.</summary>
		</member>
		<member name="M:EnvDTE80.TaskItems2.GetEnumerator">
			<summary>Gets an enumeration for items in a collection.</summary>
			<returns>An enumerator.</returns>
		</member>
		<member name="M:EnvDTE80.TaskItems2.Item(System.Object)">
			<summary>Returns an indexed member of a <see cref="T:EnvDTE.TaskItems"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.TaskItem"></see> object.</returns>
			<param name="index">Required. The index of the item to return. </param>
		</member>
		<member name="P:EnvDTE80.TaskItems2.Count">
			<summary>Gets a value indicating the number of objects in the collection.</summary>
			<returns>The number of objects in the <see cref="T:EnvDTE.TaskItems"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.TaskItems2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.TaskItems2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE.TaskItems"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.TaskList"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.TextDocumentKeyPressEvents">
			<summary>Defines events associated with a key press. Use this object for functionality and refer to <see cref="T:EnvDTE80.TextDocumentKeyPressEventsClass"></see> for this object's member documentation.</summary>
		</member>
		<member name="T:EnvDTE80.TextDocumentKeyPressEventsClass">
			<summary>This class supports the .NET Framework infrastructure and is not intended to be used directly from your code. Refer to <see cref="T:EnvDTE80.TextDocumentKeyPressEvents"></see> for this functionality. Do not instantiate from this class.</summary>
		</member>
		<member name="M:EnvDTE80.TextDocumentKeyPressEventsClass.#ctor">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80.TextDocumentKeyPressEventsClass.AfterKeyPress">
			<summary>Raised after a key press has been handled and the editor has processed the entered text.</summary>
		</member>
		<member name="E:EnvDTE80.TextDocumentKeyPressEventsClass.BeforeKeyPress">
			<summary>Raised for all key presses that add or remove characters in the Text Editor.</summary>
		</member>
		<member name="M:EnvDTE80.TextDocumentKeyPressEventsClass.add_AfterKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.TextDocumentKeyPressEventsClass.add_BeforeKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.TextDocumentKeyPressEventsClass.remove_AfterKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_AfterKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.TextDocumentKeyPressEventsClass.remove_BeforeKeyPress(EnvDTE80._dispTextDocumentKeyPressEvents_BeforeKeyPressEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80.TextPane2">
			<summary>Represents a pane within a text editor window.</summary>
		</member>
		<member name="M:EnvDTE80.TextPane2.Activate">
			<summary>Moves the focus to the current item.</summary>
		</member>
		<member name="M:EnvDTE80.TextPane2.IsVisible(EnvDTE.TextPoint,System.Object)">
			<summary>Returns a value indicating whether the character or specified characters are visible in the text pane.</summary>
			<returns>true if the point is visible; otherwise, false.</returns>
			<param name="PointOrCount">Optional. Another point that works with the first Point argument to indicate a range of text. <see cref="M:EnvDTE80.TextPane2.IsVisible(EnvDTE.TextPoint,System.Object)"></see> determines whether or not this range of text is visible. PointOrCount can also be set to a number of characters that follow Point to indicate the range of text.If a value is not supplied to the PointOrCount argument, <see cref="M:EnvDTE80.TextPane2.IsVisible(EnvDTE.TextPoint,System.Object)"></see> checks for the visibility of the character immediately to the right of Point, because PointOrCount has a default value of 1. </param>
			<param name="Point">Required. A <see cref="T:EnvDTE.TextPoint"></see> location used to determine if a character is visible. Since a Point is situated between two characters, the default interpretation (that is, when no value is given for the PointOrCount argument) is the first character immediately to the right of the text point. If the character after the text point is visible, then the Point is visible as well.</param>
		</member>
		<member name="M:EnvDTE80.TextPane2.TryToShow(EnvDTE.TextPoint,EnvDTE.vsPaneShowHow,System.Object)">
			<summary>Adjusts the location of the view in the text buffer so that the indicated range of text is shown in the text pane, if possible. You can control where the text displays in the pane.</summary>
			<returns>true if the text can be displayed; otherwise, false.</returns>
			<param name="How">Required. A <see cref="T:EnvDTE.vsPaneShowHow"></see> constant indicating how to display the text.</param>
			<param name="PointOrCount">Optional. A variant representing the end of a range of text to show. If PointOrCount is a number of characters, the characters follow Point. If PointOrCount is a point before Point, then it is at the top of the text pane if How is set to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowTop"></see>.If How is set to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowCentered"></see>, and the number of lines in the selected text is greater than the height of the pane, then the top line of the selected text is placed at the top of the pane. </param>
			<param name="Point">Required. The <see cref="T:EnvDTE.TextPoint"></see> location you want to show.</param>
		</member>
		<member name="P:EnvDTE80.TextPane2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.TextPane"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.TextPanes"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.TextPane2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.TextPane2.Height">
			<summary>Gets the height of the text pane in character units.</summary>
			<returns>The height of the text pane in character units.</returns>
		</member>
		<member name="P:EnvDTE80.TextPane2.IncrementalSearch">
			<summary>Provides access to the incremental search (ISearch) capability of the text editor.</summary>
			<returns>An <see cref="T:EnvDTE80.IncrementalSearch"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.TextPane2.Selection">
			<summary>Gets an object representing the current selection on the <see cref="T:EnvDTE.TextPane"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.TextSelection"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.TextPane2.StartPoint">
			<summary>Gets the <see cref="T:EnvDTE.TextPoint"></see> object representing the first displayed character of the pane.</summary>
			<returns>A <see cref="T:EnvDTE.TextPoint"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.TextPane2.Width">
			<summary>Gets the width of the pane in character units.</summary>
			<returns>The width of the pane in character units.</returns>
		</member>
		<member name="P:EnvDTE80.TextPane2.Window">
			<summary>Gets the <see cref="T:EnvDTE.Window"></see> object that contains the pane.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.ToolBoxItem2">
			<summary>Represents an item in the Toolbox.</summary>
		</member>
		<member name="M:EnvDTE80.ToolBoxItem2.Delete">
			<summary>Removes the <see cref="T:EnvDTE.ToolBoxItem"></see> object from the collection.</summary>
		</member>
		<member name="M:EnvDTE80.ToolBoxItem2.Select">
			<summary>Causes this item to become active in the integrated development environment (IDE).</summary>
		</member>
		<member name="P:EnvDTE80.ToolBoxItem2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.ToolBoxItem"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.ToolBoxItems"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxItem2.Data">
			<summary>Gets an object containing the IDataObject of the <see cref="T:EnvDTE.ToolBoxItem"></see> on the tool box.</summary>
			<returns>An object containing the data a tool box item contains.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxItem2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxItem2.Name">
			<summary>Gets or sets the name of the <see cref="T:EnvDTE.ToolBoxItem"></see> object.</summary>
			<returns>The name of the <see cref="T:EnvDTE.ToolBoxItem"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.ToolBoxTab2">
			<summary>Represents a tab in the Toolbox, along with any objects the tab contains.</summary>
		</member>
		<member name="M:EnvDTE80.ToolBoxTab2.Activate">
			<summary>Moves the focus to the current item.</summary>
		</member>
		<member name="M:EnvDTE80.ToolBoxTab2.Delete">
			<summary>Removes the <see cref="T:EnvDTE.ToolBoxTab"></see> from a collection.</summary>
		</member>
		<member name="P:EnvDTE80.ToolBoxTab2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.ToolBoxTab"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.ToolBoxTabs"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxTab2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxTab2.ListView">
			<summary>Gets or sets a value indicating whether items in a particular ToolBox tab display in List view or Icon view format.</summary>
			<returns>true if the ToolBox tab is in List view; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxTab2.Name">
			<summary>Gets or sets the name of the ToolBoxTab2 object.</summary>
			<returns>A string containing the name of the object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxTab2.ToolBoxItems">
			<summary>Gets the collection of <see cref="T:EnvDTE.ToolBoxItems"></see> associated with a <see cref="T:EnvDTE.ToolBoxTab"></see>.</summary>
			<returns>A <see cref="T:EnvDTE.ToolBoxItems"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.ToolBoxTab2.UniqueID">
			<summary>Sets or gets a unique ID for the specified tab.</summary>
			<returns>A unique ID.</returns>
		</member>
		<member name="T:EnvDTE80.ToolWindows">
			<summary>Improves discoverability and usability of tool windows in the object model by providing easy access to the shells tool windows in their native types.</summary>
		</member>
		<member name="M:EnvDTE80.ToolWindows.GetToolWindow(System.String)">
			<summary>Allows the user to retrieve a window by its title.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
			<param name="Name">The title of the window to retrieve.</param>
		</member>
		<member name="P:EnvDTE80.ToolWindows.CommandWindow">
			<summary>Gets the <see cref="T:EnvDTE.CommandWindow"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.CommandWindow"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolWindows.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolWindows.ErrorList">
			<summary>Gets the list of errors displayed in the IDE.</summary>
			<returns>An error list that can be enumerated for individual errors.</returns>
		</member>
		<member name="P:EnvDTE80.ToolWindows.OutputWindow">
			<summary>Gets the <see cref="T:EnvDTE.OutputWindow"></see> object.</summary>
			<returns>An <see cref="T:EnvDTE.OutputWindow"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolWindows.SolutionExplorer">
			<summary>Gets a <see cref="T:EnvDTE.UIHierarchy"></see> object representing Solution Explorer.</summary>
			<returns>A <see cref="T:EnvDTE.UIHierarchy"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolWindows.TaskList">
			<summary>Gets the <see cref="T:EnvDTE.TaskList"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.TaskList"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.ToolWindows.ToolBox">
			<summary>Gets the <see cref="T:EnvDTE.ToolBox"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ToolBox"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.Transport">
			<summary>Specifies the protocol the debugger uses to communicate to the machine owning the debuggee.</summary>
		</member>
		<member name="P:EnvDTE80.Transport.Collection">
			<summary>Gets the <see cref="T:EnvDTE80.Transports"></see> collection to which this <see cref="T:EnvDTE80.Transport"></see> object belongs (if any).</summary>
			<returns>A <see cref="T:EnvDTE80.Transports"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Transport.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Transport.Engines">
			<summary>Gets the <see cref="T:EnvDTE80.Engines"></see> collection. </summary>
			<returns>A <see cref="T:EnvDTE80.Engines"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Transport.ID">
			<summary>Gets the ID of the Transport as a GUID.</summary>
			<returns>A string representing the transport ID in GUID form.</returns>
		</member>
		<member name="P:EnvDTE80.Transport.Name">
			<summary>Gets or sets the name of the <see cref="T:EnvDTE80.Transport"></see> object.</summary>
			<returns>A string representing the name of the object.</returns>
		</member>
		<member name="P:EnvDTE80.Transport.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Transport"></see> object, in this case, a <see cref="T:EnvDTE80.Debugger2"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE80.Debugger2"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.Transports">
			<summary>A collection of <see cref="T:EnvDTE80.Transport"></see> objects.</summary>
		</member>
		<member name="M:EnvDTE80.Transports.GetEnumerator">
			<summary>Gets an enumeration for items in a collection.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see>.</returns>
		</member>
		<member name="M:EnvDTE80.Transports.Item(System.Object)">
			<summary>Gets an indexed member of a <see cref="T:EnvDTE80.Transports"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE80.Transport"></see> object.</returns>
			<param name="Index">Required. The index of the <see cref="T:EnvDTE80.Transport"></see> to return.</param>
		</member>
		<member name="P:EnvDTE80.Transports.Count">
			<summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE80.Transports"></see> collection.</summary>
			<returns>An integer representing the number of <see cref="T:EnvDTE80.Transport"></see> objects in the collection.</returns>
		</member>
		<member name="P:EnvDTE80.Transports.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Transports.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Transports"></see> collection, in this case the <see cref="T:EnvDTE.Debugger"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Debugger"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.vsBuildErrorLevel">
			<summary>Defines the error level of an item listed in the Error List tool window.</summary>
		</member>
		<member name="F:EnvDTE80.vsBuildErrorLevel.vsBuildErrorLevelHigh">
			<summary>Error level is High</summary>
		</member>
		<member name="F:EnvDTE80.vsBuildErrorLevel.vsBuildErrorLevelLow">
			<summary>Error level is Low.</summary>
		</member>
		<member name="F:EnvDTE80.vsBuildErrorLevel.vsBuildErrorLevelMedium">
			<summary>Error level is Medium.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMChangeKind">
			<summary>Defines the types of change events that may be fired in the <see cref="T:EnvDTE80.CodeModelEvents"></see> object.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMChangeKind.vsCMChangeKindArgumentChange">
			<summary>The arguments for an attribute have changed.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMChangeKind.vsCMChangeKindBaseChange">
			<summary>The base types for the element have changed.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMChangeKind.vsCMChangeKindRename">
			<summary>An element has been renamed.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMChangeKind.vsCMChangeKindSignatureChange">
			<summary>The parameters to the object have changed.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMChangeKind.vsCMChangeKindTypeRefChange">
			<summary>The objects type (or return type) has changed.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMChangeKind.vsCMChangeKindUnknown">
			<summary>An unknown change has occurred.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMClassKind">
			<summary>Represents a value defining the kind of class definition represented by the object.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMClassKind.vsCMClassKindBlueprint">
			<summary>Object represents a class defined in a blueprint.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMClassKind.vsCMClassKindMainClass">
			<summary>This object contains a primary class definition.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMClassKind.vsCMClassKindModule">
			<summary>Object represents a module. (Only supported in Visual Basic.)</summary>
		</member>
		<member name="F:EnvDTE80.vsCMClassKind.vsCMClassKindPartialClass">
			<summary>Object represents a partial class definition.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMConstKind">
			<summary>Defines when the variable is eligible to be changed.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMConstKind.vsCMConstKindConst">
			<summary>Object may only be changed in its declaration.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMConstKind.vsCMConstKindNone">
			<summary>Variable can always be changed.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMConstKind.vsCMConstKindReadOnly">
			<summary>Object may only be changed in the class constructor.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMDataTypeKind">
			<summary>Represents the kind of data type of the code element.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMDataTypeKind.vsCMDataTypeKindBlueprint">
			<summary>A blueprint.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMDataTypeKind.vsCMDataTypeKindMain">
			<summary>A Main() procedure.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMDataTypeKind.vsCMDataTypeKindModule">
			<summary>A module.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMDataTypeKind.vsCMDataTypeKindPartial">
			<summary>A partial class.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMElement2">
			<summary>Indicates the type of code element.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMElement2.vsCMElementAttributeArgument">
			<summary>An attribute argument element.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMElement2.vsCMElementUnknown">
			<summary>An unknown element.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMFunction2">
			<summary>A constant indicating the type of function.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMFunction2.vsCMFunctionAddHandler">
			<summary>An add handler function.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMFunction2.vsCMFunctionRaiseEvent">
			<summary>A raise event function.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMFunction2.vsCMFunctionRemoveHandler">
			<summary>A remove handler function.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMInheritanceKind">
			<summary>Represents the type of inheritance.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMInheritanceKind.vsCMInheritanceKindAbstract">
			<summary>This type must be used to define another type. (This is equivalent to the MustOverride keyword in Visual Basic.)</summary>
		</member>
		<member name="F:EnvDTE80.vsCMInheritanceKind.vsCMInheritanceKindNew">
			<summary>This type is not inherited from another function or property.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMInheritanceKind.vsCMInheritanceKindNone">
			<summary>No inheritance.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMInheritanceKind.vsCMInheritanceKindSealed">
			<summary>This type may not be used as a base type.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMOverrideKind">
			<summary>Defines the modifier applied to a method to describe how the method may be overridden.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMOverrideKind.vsCMOverrideKindAbstract">
			<summary>The parent class requires this method to be overridden. (This is equivalent to the MustOverride keyword in Visual Basic.)</summary>
		</member>
		<member name="F:EnvDTE80.vsCMOverrideKind.vsCMOverrideKindNew">
			<summary>This function replaces a function in the parent class. (This is equivalent with the Shadow keyword in Visual Basic.)</summary>
		</member>
		<member name="F:EnvDTE80.vsCMOverrideKind.vsCMOverrideKindNone">
			<summary>This function does not have a modifier.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMOverrideKind.vsCMOverrideKindOverride">
			<summary>This function overrides a virtual function.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMOverrideKind.vsCMOverrideKindSealed">
			<summary>This function may not be overridden.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMOverrideKind.vsCMOverrideKindVirtual">
			<summary>This function may be overridden in derived classes. (This is equivalent with the Overrideable keyword in Visual Basic.)</summary>
		</member>
		<member name="T:EnvDTE80.vsCMParameterKind">
			<summary>Specifies expected parameter behavior.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParameterKind.vsCMParameterKindIn">
			<summary>The parameter has been specified as an in parameter. (This is the equivalent of ByVal in Visual Basic.)</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParameterKind.vsCMParameterKindNone">
			<summary>The parameter has no specified keywords.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParameterKind.vsCMParameterKindOptional">
			<summary>An optional parameter.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParameterKind.vsCMParameterKindOut">
			<summary>An out parameter.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParameterKind.vsCMParameterKindParamArray">
			<summary>A parameter array.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParameterKind.vsCMParameterKindRef">
			<summary>A ref parameter. (This is the equivalent of ByRef in Visual Basic.)</summary>
		</member>
		<member name="T:EnvDTE80.vsCMParseStatus">
			<summary>Informs the code model whether the current parse has completed and if it had errors.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParseStatus.vsCMParseStatusComplete">
			<summary>Parsing has completed with no errors.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMParseStatus.vsCMParseStatusError">
			<summary>An error occurred while parsing this file.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMPropertyKind">
			<summary>Returns the Get/Set status for the specified property.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMPropertyKind.vsCMPropertyKindReadOnly">
			<summary>Returned if the property has only a Get statement. </summary>
		</member>
		<member name="F:EnvDTE80.vsCMPropertyKind.vsCMPropertyKindReadWrite">
			<summary>Returned if the property has both Get and Set statements.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMPropertyKind.vsCMPropertyKindWriteOnly">
			<summary>Returned if the property has only a Set statement.</summary>
		</member>
		<member name="T:EnvDTE80.vsCMTypeRef2">
			<summary>The data type that the function returns.</summary>
		</member>
		<member name="F:EnvDTE80.vsCMTypeRef2.vsCMTypeRefMCBoxedReference">
			<summary>Visual C++ Boxed Reference</summary>
		</member>
		<member name="F:EnvDTE80.vsCMTypeRef2.vsCMTypeRefReference">
			<summary>Reference</summary>
		</member>
		<member name="F:EnvDTE80.vsCMTypeRef2.vsCMTypeRefSByte">
			<summary>Signed byte</summary>
		</member>
		<member name="F:EnvDTE80.vsCMTypeRef2.vsCMTypeRefUnsignedChar">
			<summary>Unsigned Char</summary>
		</member>
		<member name="F:EnvDTE80.vsCMTypeRef2.vsCMTypeRefUnsignedInt">
			<summary>Unsigned Int</summary>
		</member>
		<member name="F:EnvDTE80.vsCMTypeRef2.vsCMTypeRefUnsignedLong">
			<summary>Unsigned Long</summary>
		</member>
		<member name="F:EnvDTE80.vsCMTypeRef2.vsCMTypeRefUnsignedShort">
			<summary>Unsigned Short</summary>
		</member>
		<member name="T:EnvDTE80.vsCommandControlType">
			<summary>Describes the kind of control that should be used for a command.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandControlType.vsCommandControlTypeButton">
			<summary>A button control.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandControlType.vsCommandControlTypeDropDownCombo">
			<summary>A Drop- down combo box control.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandControlType.vsCommandControlTypeMRUCombo">
			<summary>A Most Recently Used combo box control.</summary>
		</member>
		<member name="T:EnvDTE80.vsCommandStyle">
			<summary>Defines command style options.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandStyle.vsCommandStyleComboCaseSensitive">
			<summary>This combo box is case-sensitive.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandStyle.vsCommandStyleComboNoAutoComplete">
			<summary>This option specifies that combo boxes will not use AutoComplete.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandStyle.vsCommandStylePict">
			<summary>This command displays an icon only when placed on a toolbar. It displays an icon and text on a menubar.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandStyle.vsCommandStylePictAndText">
			<summary>This command displays both an icon and text on both toolbars and menubars.</summary>
		</member>
		<member name="F:EnvDTE80.vsCommandStyle.vsCommandStyleText">
			<summary>This command displays text on a toolbar. It displays both icon and text on a menubar.</summary>
		</member>
		<member name="T:EnvDTE80.vsFindOptions2">
			<summary>Represents the behavior of the ReplacePattern method, such as how to search, where to begin the search, whether to search forward or backward, and whether to apply case sensitivity.</summary>
		</member>
		<member name="F:EnvDTE80.vsFindOptions2.vsFindOptionsWaitForFindToComplete">
			<summary>Represents whether the find operation is asynchronous.</summary>
		</member>
		<member name="T:EnvDTE80.vsIncrementalSearchResult">
			<summary>Describes the status of the search result.</summary>
		</member>
		<member name="F:EnvDTE80.vsIncrementalSearchResult.vsIncrementalSearchResultFailed">
			<summary>Did not successfully find the pattern. The selection was not changed.</summary>
		</member>
		<member name="F:EnvDTE80.vsIncrementalSearchResult.vsIncrementalSearchResultFound">
			<summary>Found the pattern and moved the selection.</summary>
		</member>
		<member name="F:EnvDTE80.vsIncrementalSearchResult.vsIncrementalSearchResultPassedEOB">
			<summary>Found the pattern and moved the selection past the end of the buffer.</summary>
		</member>
		<member name="F:EnvDTE80.vsIncrementalSearchResult.vsIncrementalSearchResultPassedStart">
			<summary>Found the pattern and moved the selection past the beginning of the buffer.</summary>
		</member>
		<member name="T:EnvDTE80.vsPublishState">
			<summary>Indicates the publish state of a solution.</summary>
		</member>
		<member name="F:EnvDTE80.vsPublishState.vsPublishStateDone">
			<summary>Publish is complete.</summary>
		</member>
		<member name="F:EnvDTE80.vsPublishState.vsPublishStateInProgress">
			<summary>Publish is in progress.</summary>
		</member>
		<member name="F:EnvDTE80.vsPublishState.vsPublishStateNotStarted">
			<summary>Publish has not started.</summary>
		</member>
		<member name="T:EnvDTE80.vsSourceControlCheckOutOptions">
			<summary>Indicates document control checkout options.</summary>
		</member>
		<member name="F:EnvDTE80.vsSourceControlCheckOutOptions.vsSourceControlCheckOutOptionLatestVersion">
			<summary>Check out the latest version.</summary>
		</member>
		<member name="F:EnvDTE80.vsSourceControlCheckOutOptions.vsSourceControlCheckOutOptionLocalVersion">
			<summary>Check out a local version.</summary>
		</member>
		<member name="T:EnvDTE80.vsThemeColors">
			<summary>A set of color standards for consistent UI design.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorAccentBorder">
			<summary>Accent Border.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorAccentDark">
			<summary>Accent Dark.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorAccentLight">
			<summary>Accent Light.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorAccentMedium">
			<summary>Accent Medium.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorAccentPale">
			<summary>Accent Pale.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarBorder">
			<summary>Command bar border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarDraghandle">
			<summary>Command bar drag handle</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarDraghandleShadow">
			<summary>Command bar drag handle shadow</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarGradientBegin">
			<summary>Command bar gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarGradientEnd">
			<summary>Command bar gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarGradientMiddle">
			<summary>Command bar gradient middle</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarHover">
			<summary>Command bar hover</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarHoveroverSelected">
			<summary>Command bar hover over selected</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarHoveroverSelectedicon">
			<summary>Command bar hover over selected icon</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarSelected">
			<summary>Command bar selected</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarShadow">
			<summary>Command bar shadow</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarTextActive">
			<summary>Command bar text active</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarTextHover">
			<summary>Command bar text hover</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarTextInactive">
			<summary>Command bar text inactive</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorCommandbarTextSelected">
			<summary>Command bar text selected</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorControlEditHintText">
			<summary>Control edit hint text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorControlEditRequiredBackground">
			<summary>Control edit required background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorControlEditRequiredHintText">
			<summary>Control edit required hint text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorControlLinkText">
			<summary>Control link text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorControlLinkTextHover">
			<summary>Control link text hover</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorControlLinkTextPressed">
			<summary>Control link text pressed</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorControlOutline">
			<summary>Control Outline.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipActiveBackground">
			<summary>Debugger data tip active background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipActiveBorder">
			<summary>Debugger data tip active border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipActiveHighlight">
			<summary>Debugger data tip active highlight</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipActiveHighlightText">
			<summary>Debugger data tip highlight text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipActiveSeparator">
			<summary>Debugger data tip active separator</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipActiveText">
			<summary>Debugger data tip active text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipInactiveBackground">
			<summary>Debugger data tip inactive background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipInactiveBorder">
			<summary>Debugger data tip inactive border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipInactiveHighlight">
			<summary>Debugger data tip inactive highlight</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipInactiveHighlightText">
			<summary>Debugger data tip inactive highlight text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipInactiveSeparator">
			<summary>Debugger data tip inactive separator</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDebuggerDatatipInactiveText">
			<summary>Debugger data tip inactive text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDesignerBackground">
			<summary>Designer background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDesignerSelectionDots">
			<summary>Designer selection dots</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDesignerTray">
			<summary>Designer tray</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorDesignerWatermark">
			<summary>Designer watermark</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorEnvironmentBackground">
			<summary>Environment background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorEnvironmentBackgroundGradientBegin">
			<summary>Environment background gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorEnvironmentBackgroundGradientEnd">
			<summary>Environment background gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabBorder">
			<summary>File Tab Border.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabChannelBackground">
			<summary>File Tab Channel Background.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabGradientDark">
			<summary>File Tab Gradient Dark.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabGradientLight">
			<summary>File Tab Gradient Light.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabSelectedBackground">
			<summary>File Tab Selected Background.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabSelectedBorder">
			<summary>File Tab Selected Border.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabSelectedText">
			<summary>File tab selected text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFileTabText">
			<summary>File tab text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFormSmartTagActiontagBorder">
			<summary>Form smart tag action tag border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFormSmartTagActiontagFill">
			<summary>Form smart tag action tag fill</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFormSmartTagObjecttagBorder">
			<summary>Form smart tag object tag border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorFormSmartTagObjecttagFill">
			<summary>Form smart tag object tag fill</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorGridHeadingBackground">
			<summary>Grid heading background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorGridHeadingText">
			<summary>Grid heading text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorGridLine">
			<summary>Grid line</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpHowDoIPaneBackground">
			<summary>Help how do I pane background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpHowDoIPaneBorder">
			<summary>Help how do I pane border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpHowDoIPaneLink">
			<summary>Help how do I pane link</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpHowDoIPaneText">
			<summary>Help how do I pane text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpHowDoITaskBackground">
			<summary>Help how do I task background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpHowDoITaskLink">
			<summary>Help how do I task link</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpHowDoITaskText">
			<summary>Help how do I task text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchBackground">
			<summary>Help search background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchBorder">
			<summary>Help search border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchFitlerBackground">
			<summary>Help search background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchFitlerBorder">
			<summary>Help search border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchGradientBegin">
			<summary>Help search gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchGradientEnd">
			<summary>Help search gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchNavigationDisabled">
			<summary>Help search navigation disabled</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchNavigationEnabled">
			<summary>Help search navigation enabled</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchPanelRules">
			<summary>Help search panel rules</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchProviderBackground">
			<summary>Help search provider background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchProviderIcon">
			<summary>Help search provider icon</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchProviderText">
			<summary>Help search provider text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchResultLinkSelected">
			<summary>Help search result link selected</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchResultLinkUnselected">
			<summary>Help search result link unselected</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchResultSelectedBackground">
			<summary>Help search result selected background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchResultSelectedText">
			<summary>Help search result selected text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorHelpSearchText">
			<summary>Help search text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelBorder">
			<summary>Panel Border.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelGradientDark">
			<summary>Panel Gradient Dark.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelGradientLight">
			<summary>Panel Gradient Light.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelHoveroverCloseBorder">
			<summary>Panel hover over close border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelHoveroverCloseFill">
			<summary>Panel hover over close fill</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelHyperlink">
			<summary>Panel Hyperlink.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelHyperlinkHover">
			<summary>Panel hyperlink hover</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelHyperlinkPressed">
			<summary>Panel hyperlink pressed</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelSeparator">
			<summary>Panel Separator.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelSubGroupSeparator">
			<summary>Panel subgroup separator</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelText">
			<summary>Panel text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelTitlebar">
			<summary>Panel title bar</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelTitlebarText">
			<summary>Panel title bar text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorPanelTitlebarUnselected">
			<summary>Panel title bar unselected</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerBackgroundGradientBegin">
			<summary>Project designer background gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerBackgroundGradientEnd">
			<summary>Project designer background gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerBorderInside">
			<summary>Project designer border inside</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerBorderOutside">
			<summary>Project designer border outside</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerContentsBackground">
			<summary>Project designer contents background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabBackgroundGradientBegin">
			<summary>Project designer tab background gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabBackgroundGradientEnd">
			<summary>Project designer tab background gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSelectedBackground">
			<summary>Project designer tab selected background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSelectedBorder">
			<summary>Project designer tab selected border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSelectedHighlight1">
			<summary>Project designer tab selected highlight 1</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSelectedHighlight2">
			<summary>Project designer tab selected highlight selected 2</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSelectedInsideborder">
			<summary>Project designer tab selected inside border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSepBottomGradientBegin">
			<summary>Project designer tab sep bottom gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSepBottomGradientEnd">
			<summary>Project designer tab sep gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSepTopGradientBegin">
			<summary>Project designer tab sep top gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorProjectDesignerTabSepTopGradientEnd">
			<summary>Project designer tab sep top gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorScreentipBackground">
			<summary>Screen tip background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorScreentipBorder">
			<summary>Screen tip border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorScreentipText">
			<summary>Screen tip text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSidebarBackground">
			<summary>Sidebar Background.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSidebarGradientdark">
			<summary>Sidebar gradient dark</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSidebarGradientlight">
			<summary>Sidebar gradient light</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSidebarText">
			<summary>Sidebar text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSmartTagBorder">
			<summary>Smart tag border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSmartTagFill">
			<summary>Smart tag fill</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSmartTagHoverBorder">
			<summary>Smart Tag Hover Border.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSmartTagHoverFill">
			<summary>Smart Tag Hover Fill.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSmartTagHoverText">
			<summary>Smart tag hover text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSmartTagText">
			<summary>Smart tag text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSnaplines">
			<summary>Snap lines</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorSnaplinesTextBaseline">
			<summary>Snap lines text baseline</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTasklistGridlines">
			<summary>Task list gridlines</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarActive">
			<summary>Title bar active</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarActiveGradientBegin">
			<summary>Title bar active gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarActiveGradientEnd">
			<summary>Title bar active gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarActiveText">
			<summary>Title bar text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarInactive">
			<summary>Title bar inactive</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarInactiveGradientBegin">
			<summary>Title bar inactive gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarInactiveGradientEnd">
			<summary>Title bar inactive end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorTitlebarInactiveText">
			<summary>Title bar inactive text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxBackground">
			<summary>Toolbox background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxDivider">
			<summary>Toolbox divider</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxGradientDark">
			<summary>Tool Box Gradient Dark.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxGradientLight">
			<summary>Tool Box Gradient Light.</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxHeadingAccent">
			<summary>Toolbox heading accent</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxHeadingBegin">
			<summary>Toolbox heading begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxHeadingEnd">
			<summary>Toolbox heading end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxIconHighlight">
			<summary>Toolbox icon highlight</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolboxIconShadow">
			<summary>Toolbox icon shadow</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowBackground">
			<summary>Tool window background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowBorder">
			<summary>Tool window border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowTabBorder">
			<summary>Tool window tab border</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowTabGradientBegin">
			<summary>Tool window tab gradient begin</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowTabGradientEnd">
			<summary>Tool window tab gradient end</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowTabSelectedtab">
			<summary>Tool window tab selected tab</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowTabSelectedtext">
			<summary>Tool window tab selected text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorToolWindowTabText">
			<summary>Tool window tab text</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorWizardOrientationPanelBackground">
			<summary>Wizard orientation panel background</summary>
		</member>
		<member name="F:EnvDTE80.vsThemeColors.vsThemeColorWizardOrientationPanelText">
			<summary>Wizard orientation panel text</summary>
		</member>
		<member name="T:EnvDTE80.Window2">
			<summary>The <see cref="T:EnvDTE.Window"></see> object represents a window in the environment.</summary>
		</member>
		<member name="M:EnvDTE80.Window2.Activate">
			<summary>Moves the focus to the current item.</summary>
		</member>
		<member name="M:EnvDTE80.Window2.Attach(System.Int32)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="lWindowHandle"> </param>
		</member>
		<member name="M:EnvDTE80.Window2.Close(EnvDTE.vsSaveChanges)">
			<summary>Closes the open document and optionally saves it, or closes and destroys the window.</summary>
			<param name="SaveChanges">Optional. A <see cref="T:EnvDTE.vsSaveChanges"></see> constant that determines whether to save an item or items.</param>
		</member>
		<member name="M:EnvDTE80.Window2.Detach">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.Window2.SetFocus">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.Window2.SetKind(EnvDTE.vsWindowType)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="eKind"> </param>
		</member>
		<member name="M:EnvDTE80.Window2.SetSelectionContainer(System.Object[]@)">
			<summary>Allows setting objects to be active in the Properties Window when this window is active.</summary>
			<param name="Objects">Required. An array of objects for the Properties window.</param>
		</member>
		<member name="M:EnvDTE80.Window2.SetTabPicture(System.Object)">
			<summary>Loads a bitmap into a tabbed picture on a tab-linked tool window.</summary>
			<param name="Picture">A path to a bitmap.</param>
		</member>
		<member name="P:EnvDTE80.Window2.AutoHides">
			<summary>Gets or sets whether the tool window is able to be hidden.</summary>
			<returns>true if the tool window can be hidden; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Caption">
			<summary>Gets or sets the title of the window.</summary>
			<returns>The title of the window.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Collection">
			<summary>Gets the collection containing the <see cref="T:EnvDTE.Window"></see> object supporting this property.</summary>
			<returns>A <see cref="T:EnvDTE.Windows"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.CommandBars">
			<summary>Gets a collection of Microsoft.VisualStudio.CommandBars contained in the current window.</summary>
			<returns>A Microsoft.VisualStudio.CommandBars collection.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.ContextAttributes">
			<summary>Gets a <see cref="T:EnvDTE.ContextAttributes"></see> collection which allows automation clients to add new attributes to the current, selected items in the Dynamic Help window and provide contextual help for additional attributes.</summary>
			<returns>A <see cref="T:EnvDTE.ContextAttributes"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Document">
			<summary>Gets the <see cref="T:EnvDTE.Document"></see> object associated with the item, if one exists.</summary>
			<returns>A <see cref="T:EnvDTE.Document"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.DocumentData(System.String)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="bstrWhichData"> </param>
		</member>
		<member name="P:EnvDTE80.Window2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Height">
			<summary>Gets or sets a value indicating the dimensions of the window in pixels.</summary>
			<returns>The height dimension of the window in pixels.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.IsFloating">
			<summary>Gets or sets a value indicating whether the tool window floats over other windows.</summary>
			<returns>true if the window is a tool window; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Left">
			<summary>Gets or sets the horizontal distance between the internal left edge of an object and the left edge of its container.</summary>
			<returns>An int containing the distance between the left edge of an object and the left edge of its container.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Linkable">
			<summary>Gets or sets a value indicating whether the tool window can be docked with other tool windows.</summary>
			<returns>true if the window can be docked with other windows; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.LinkedWindowFrame">
			<summary>Gets a <see cref="T:EnvDTE.Window"></see> object representing the window frame containing the window.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.LinkedWindows">
			<summary>Gets a collection of all linked windows contained in the linked window frame.</summary>
			<returns>A <see cref="T:EnvDTE.LinkedWindows"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Object">
			<summary>Gets an object that can be accessed by name at run time.</summary>
			<returns>An object.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.ObjectKind">
			<summary>Gets the type of the <see cref="P:EnvDTE.Window.Object"></see> object, which is a GUID string representing the tool contained in the window.</summary>
			<returns>A string containing a GUID representing the tool contained in the window.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Project">
			<summary>Gets the <see cref="T:EnvDTE.Project"></see> object associated with the <see cref="T:EnvDTE.Window"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.Project"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.ProjectItem">
			<summary>Gets the <see cref="T:EnvDTE.ProjectItem"></see> object associated with the <see cref="T:EnvDTE.Window"></see> object.</summary>
			<returns>A <see cref="T:EnvDTE.ProjectItem"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Selection">
			<summary>Gets an object representing the current selection on the <see cref="T:EnvDTE.Window"></see> object.</summary>
			<returns>An object.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Top">
			<summary>Gets or sets the vertical distance between the internal top edge of an object and the top edge of its container.</summary>
			<returns>The vertical distance.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Visible">
			<summary>Gets or sets the visibility of a window.</summary>
			<returns>true if the window is visible; otherwise, false.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.Width">
			<summary>Gets or sets the width of the window in character units.</summary>
			<returns>The width of the window in character units.</returns>
		</member>
		<member name="P:EnvDTE80.Window2.WindowState">
			<summary>Gets or sets the state of the window, whether it is minimized, normal, and so forth.</summary>
			<returns>A <see cref="T:EnvDTE.vsWindowState"></see> constant.</returns>
		</member>
		<member name="T:EnvDTE80.WindowKinds">
			<summary>Expands upon constants used to get a handle for window objects.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindApplicationBrowser">
			<summary>An Application Browser window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindBookmarks">
			<summary>A Bookmark window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindCallBrowser">
			<summary>A Call Browser window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindCodeDefinition">
			<summary>A Code Definition window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindCommunityWindow">
			<summary>A Community window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindDeviceExplorer">
			<summary>A Device Explorer window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindErrorList">
			<summary>An ErrorList window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindFavorites">
			<summary>A Favorites window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindHelpContents">
			<summary>A Help Contents window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindHelpIndex">
			<summary>A Help Index window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindHelpSearch">
			<summary>A Help Search window.</summary>
		</member>
		<member name="F:EnvDTE80.WindowKinds.vsWindowKindKindStartPage">
			<summary>A Kind Start Page window.</summary>
		</member>
		<member name="T:EnvDTE80.Windows2">
			<summary>The <see cref="T:EnvDTE.Windows"></see> collection contains all windows in the environment.</summary>
		</member>
		<member name="M:EnvDTE80.Windows2.CreateLinkedWindowFrame(EnvDTE.Window,EnvDTE.Window,EnvDTE.vsLinkedWindowType)">
			<summary>Creates a <see cref="T:EnvDTE.Window"></see> object and places two windows in it.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
			<param name="Window2">Required. The second <see cref="T:EnvDTE.Window"></see> object to link to the other.</param>
			<param name="Window1">Required. The first <see cref="T:EnvDTE.Window"></see> object to link to the other.</param>
			<param name="Link">Required. A <see cref="T:EnvDTE.vsLinkedWindowType"></see> constant indicating the way the windows should be joined.</param>
		</member>
		<member name="M:EnvDTE80.Windows2.CreateToolWindow(EnvDTE.AddIn,System.String,System.String,System.String,System.Object@)">
			<summary>Creates a new tool window containing the specified <see cref="T:EnvDTE.Document"></see> object or ActiveX control.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
			<param name="DocObj">Required. The <see cref="T:EnvDTE.Document"></see> object or control to be hosted in the tool window.</param>
			<param name="ProgID">Required. The programmatic ID of the <see cref="T:EnvDTE.Document"></see> object or ActiveX control.</param>
			<param name="Caption">Required. The caption for the new tool window.</param>
			<param name="GuidPosition">Required. A unique identifier for the new tool window, and it can be used as an index to Windows.Item.</param>
			<param name="AddInInst">Required. An <see cref="T:EnvDTE.AddIn"></see> object whose lifetime determines the lifetime of the tool window.</param>
		</member>
		<member name="M:EnvDTE80.Windows2.CreateToolWindow2(EnvDTE.AddIn,System.String,System.String,System.String,System.String,System.Object@)">
			<summary>Creates a new tool window and hosts a user-defined, .NET control in it.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
			<param name="Caption">The caption to display in the new tool window.</param>
			<param name="Class">The full name of the class implementing the User control.</param>
			<param name="ControlObject">The User control to be hosted in the new tool window.</param>
			<param name="GuidPosition">A unique identifier for the new window. (This can be used to locate the window in the <see cref="T:EnvDTE.Windows"></see> collection.)</param>
			<param name="Assembly">The full name or file path of the assembly containing the User control.</param>
			<param name="Addin">An instance of the Add-in creating the tool window.</param>
		</member>
		<member name="M:EnvDTE80.Windows2.GetEnumerator">
			<summary>Gets an enumeration for items in a collection.</summary>
			<returns>An enumerator.</returns>
		</member>
		<member name="M:EnvDTE80.Windows2.Item(System.Object)">
			<summary>Returns an indexed member of a <see cref="T:EnvDTE.Windows"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.Window"></see> object.</returns>
			<param name="index">Required. The index of the item to return. </param>
		</member>
		<member name="P:EnvDTE80.Windows2.Count">
			<summary>Gets a value indicating the number of objects in the <see cref="T:EnvDTE80.Windows2"></see> collection.</summary>
			<returns>An integer containing the number of objects in the <see cref="T:EnvDTE80.Windows2"></see> collection.</returns>
		</member>
		<member name="P:EnvDTE80.Windows2.DTE">
			<summary>Gets the top-level extensibility object.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="P:EnvDTE80.Windows2.Parent">
			<summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Windows2"></see> collection.</summary>
			<returns>A <see cref="T:EnvDTE.DTE"></see> object.</returns>
		</member>
		<member name="T:EnvDTE80.WindowVisibilityEvents">
			<summary>Tells whether <see cref="T:EnvDTE80.ToolWindows"></see> are visible (hide or show). Use this object for functionality and refer to <see cref="T:EnvDTE80.WindowVisibilityEventsClass"></see> for this object's documentation.</summary>
		</member>
		<member name="T:EnvDTE80.WindowVisibilityEventsClass">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="M:EnvDTE80.WindowVisibilityEventsClass.#ctor">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="E:EnvDTE80.WindowVisibilityEventsClass.WindowHiding">
			<summary>Called when a window is hidden.</summary>
		</member>
		<member name="E:EnvDTE80.WindowVisibilityEventsClass.WindowShowing">
			<summary>Called when a tool window is made visible.</summary>
		</member>
		<member name="M:EnvDTE80.WindowVisibilityEventsClass.add_WindowHiding(EnvDTE80._dispWindowVisibilityEvents_WindowHidingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.WindowVisibilityEventsClass.add_WindowShowing(EnvDTE80._dispWindowVisibilityEvents_WindowShowingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.WindowVisibilityEventsClass.remove_WindowHiding(EnvDTE80._dispWindowVisibilityEvents_WindowHidingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="M:EnvDTE80.WindowVisibilityEventsClass.remove_WindowShowing(EnvDTE80._dispWindowVisibilityEvents_WindowShowingEventHandler)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="A_1"> </param>
		</member>
		<member name="T:EnvDTE80.WindowVisibilityEventsRoot">
			<summary>Microsoft Internal Use Only.</summary>
		</member>
		<member name="P:EnvDTE80.WindowVisibilityEventsRoot.WindowVisibilityEvents(EnvDTE.Window)">
			<summary>Microsoft Internal Use Only.</summary>
			<param name="WindowFilter"> </param>
		</member>
	</members>
</doc>